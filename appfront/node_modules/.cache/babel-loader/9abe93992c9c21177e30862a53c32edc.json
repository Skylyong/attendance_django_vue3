{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\";\nimport { watch, computed, reactive, defineComponent } from \"vue\";\nimport { clamp, numericProp, preventDefault, createNamespace, makeRequiredProp } from \"../utils\";\nimport { useTouch } from \"../composables/use-touch\";\nimport { Image } from \"../image\";\nimport { Loading } from \"../loading\";\nimport { SwipeItem } from \"../swipe-item\";\n\nconst getDistance = touches => Math.sqrt((touches[0].clientX - touches[1].clientX) ** 2 + (touches[0].clientY - touches[1].clientY) ** 2);\n\nconst bem = createNamespace(\"image-preview\")[1];\nvar stdin_default = defineComponent({\n  props: {\n    src: String,\n    show: Boolean,\n    active: Number,\n    minZoom: makeRequiredProp(numericProp),\n    maxZoom: makeRequiredProp(numericProp),\n    rootWidth: makeRequiredProp(Number),\n    rootHeight: makeRequiredProp(Number)\n  },\n  emits: [\"scale\", \"close\"],\n\n  setup(props, {\n    emit\n  }) {\n    const state = reactive({\n      scale: 1,\n      moveX: 0,\n      moveY: 0,\n      moving: false,\n      zooming: false,\n      imageRatio: 0,\n      displayWidth: 0,\n      displayHeight: 0\n    });\n    const touch = useTouch();\n    const vertical = computed(() => {\n      const {\n        rootWidth,\n        rootHeight\n      } = props;\n      const rootRatio = rootHeight / rootWidth;\n      return state.imageRatio > rootRatio;\n    });\n    const imageStyle = computed(() => {\n      const {\n        scale,\n        moveX,\n        moveY,\n        moving,\n        zooming\n      } = state;\n      const style = {\n        transitionDuration: zooming || moving ? \"0s\" : \".3s\"\n      };\n\n      if (scale !== 1) {\n        const offsetX = moveX / scale;\n        const offsetY = moveY / scale;\n        style.transform = `scale(${scale}, ${scale}) translate(${offsetX}px, ${offsetY}px)`;\n      }\n\n      return style;\n    });\n    const maxMoveX = computed(() => {\n      if (state.imageRatio) {\n        const {\n          rootWidth,\n          rootHeight\n        } = props;\n        const displayWidth = vertical.value ? rootHeight / state.imageRatio : rootWidth;\n        return Math.max(0, (state.scale * displayWidth - rootWidth) / 2);\n      }\n\n      return 0;\n    });\n    const maxMoveY = computed(() => {\n      if (state.imageRatio) {\n        const {\n          rootWidth,\n          rootHeight\n        } = props;\n        const displayHeight = vertical.value ? rootHeight : rootWidth * state.imageRatio;\n        return Math.max(0, (state.scale * displayHeight - rootHeight) / 2);\n      }\n\n      return 0;\n    });\n\n    const setScale = scale => {\n      scale = clamp(scale, +props.minZoom, +props.maxZoom + 1);\n\n      if (scale !== state.scale) {\n        state.scale = scale;\n        emit(\"scale\", {\n          scale,\n          index: props.active\n        });\n      }\n    };\n\n    const resetScale = () => {\n      setScale(1);\n      state.moveX = 0;\n      state.moveY = 0;\n    };\n\n    const toggleScale = () => {\n      const scale = state.scale > 1 ? 1 : 2;\n      setScale(scale);\n      state.moveX = 0;\n      state.moveY = 0;\n    };\n\n    let fingerNum;\n    let startMoveX;\n    let startMoveY;\n    let startScale;\n    let startDistance;\n    let doubleTapTimer;\n    let touchStartTime;\n\n    const onTouchStart = event => {\n      const {\n        touches\n      } = event;\n      const {\n        offsetX\n      } = touch;\n      touch.start(event);\n      fingerNum = touches.length;\n      startMoveX = state.moveX;\n      startMoveY = state.moveY;\n      touchStartTime = Date.now();\n      state.moving = fingerNum === 1 && state.scale !== 1;\n      state.zooming = fingerNum === 2 && !offsetX.value;\n\n      if (state.zooming) {\n        startScale = state.scale;\n        startDistance = getDistance(event.touches);\n      }\n    };\n\n    const onTouchMove = event => {\n      const {\n        touches\n      } = event;\n      touch.move(event);\n\n      if (state.moving || state.zooming) {\n        preventDefault(event, true);\n      }\n\n      if (state.moving) {\n        const {\n          deltaX,\n          deltaY\n        } = touch;\n        const moveX = deltaX.value + startMoveX;\n        const moveY = deltaY.value + startMoveY;\n        state.moveX = clamp(moveX, -maxMoveX.value, maxMoveX.value);\n        state.moveY = clamp(moveY, -maxMoveY.value, maxMoveY.value);\n      }\n\n      if (state.zooming && touches.length === 2) {\n        const distance = getDistance(touches);\n        const scale = startScale * distance / startDistance;\n        setScale(scale);\n      }\n    };\n\n    const checkTap = () => {\n      if (fingerNum > 1) {\n        return;\n      }\n\n      const {\n        offsetX,\n        offsetY\n      } = touch;\n      const deltaTime = Date.now() - touchStartTime;\n      const TAP_TIME = 250;\n      const TAP_OFFSET = 5;\n\n      if (offsetX.value < TAP_OFFSET && offsetY.value < TAP_OFFSET && deltaTime < TAP_TIME) {\n        if (doubleTapTimer) {\n          clearTimeout(doubleTapTimer);\n          doubleTapTimer = null;\n          toggleScale();\n        } else {\n          doubleTapTimer = setTimeout(() => {\n            emit(\"close\");\n            doubleTapTimer = null;\n          }, TAP_TIME);\n        }\n      }\n    };\n\n    const onTouchEnd = event => {\n      let stopPropagation = false;\n\n      if (state.moving || state.zooming) {\n        stopPropagation = true;\n\n        if (state.moving && startMoveX === state.moveX && startMoveY === state.moveY) {\n          stopPropagation = false;\n        }\n\n        if (!event.touches.length) {\n          if (state.zooming) {\n            state.moveX = clamp(state.moveX, -maxMoveX.value, maxMoveX.value);\n            state.moveY = clamp(state.moveY, -maxMoveY.value, maxMoveY.value);\n            state.zooming = false;\n          }\n\n          state.moving = false;\n          startMoveX = 0;\n          startMoveY = 0;\n          startScale = 1;\n\n          if (state.scale < 1) {\n            resetScale();\n          }\n\n          if (state.scale > props.maxZoom) {\n            state.scale = +props.maxZoom;\n          }\n        }\n      }\n\n      preventDefault(event, stopPropagation);\n      checkTap();\n      touch.reset();\n    };\n\n    const onLoad = event => {\n      const {\n        naturalWidth,\n        naturalHeight\n      } = event.target;\n      state.imageRatio = naturalHeight / naturalWidth;\n    };\n\n    watch(() => props.active, resetScale);\n    watch(() => props.show, value => {\n      if (!value) {\n        resetScale();\n      }\n    });\n    return () => {\n      const imageSlots = {\n        loading: () => _createVNode(Loading, {\n          \"type\": \"spinner\"\n        }, null)\n      };\n      return _createVNode(SwipeItem, {\n        \"class\": bem(\"swipe-item\"),\n        \"onTouchstart\": onTouchStart,\n        \"onTouchmove\": onTouchMove,\n        \"onTouchend\": onTouchEnd,\n        \"onTouchcancel\": onTouchEnd\n      }, {\n        default: () => [_createVNode(Image, {\n          \"src\": props.src,\n          \"fit\": \"contain\",\n          \"class\": bem(\"image\", {\n            vertical: vertical.value\n          }),\n          \"style\": imageStyle.value,\n          \"onLoad\": onLoad\n        }, imageSlots)]\n      });\n    };\n  }\n\n});\nexport { stdin_default as default };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/image-preview/ImagePreviewItem.js"],"names":["createVNode","_createVNode","watch","computed","reactive","defineComponent","clamp","numericProp","preventDefault","createNamespace","makeRequiredProp","useTouch","Image","Loading","SwipeItem","getDistance","touches","Math","sqrt","clientX","clientY","bem","stdin_default","props","src","String","show","Boolean","active","Number","minZoom","maxZoom","rootWidth","rootHeight","emits","setup","emit","state","scale","moveX","moveY","moving","zooming","imageRatio","displayWidth","displayHeight","touch","vertical","rootRatio","imageStyle","style","transitionDuration","offsetX","offsetY","transform","maxMoveX","value","max","maxMoveY","setScale","index","resetScale","toggleScale","fingerNum","startMoveX","startMoveY","startScale","startDistance","doubleTapTimer","touchStartTime","onTouchStart","event","start","length","Date","now","onTouchMove","move","deltaX","deltaY","distance","checkTap","deltaTime","TAP_TIME","TAP_OFFSET","clearTimeout","setTimeout","onTouchEnd","stopPropagation","reset","onLoad","naturalWidth","naturalHeight","target","imageSlots","loading","default"],"mappings":"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","sourcesContent":["import { createVNode as _createVNode } from \"vue\";\nimport { watch, computed, reactive, defineComponent } from \"vue\";\nimport { clamp, numericProp, preventDefault, createNamespace, makeRequiredProp } from \"../utils\";\nimport { useTouch } from \"../composables/use-touch\";\nimport { Image } from \"../image\";\nimport { Loading } from \"../loading\";\nimport { SwipeItem } from \"../swipe-item\";\nconst getDistance = (touches) => Math.sqrt((touches[0].clientX - touches[1].clientX) ** 2 + (touches[0].clientY - touches[1].clientY) ** 2);\nconst bem = createNamespace(\"image-preview\")[1];\nvar stdin_default = defineComponent({\n  props: {\n    src: String,\n    show: Boolean,\n    active: Number,\n    minZoom: makeRequiredProp(numericProp),\n    maxZoom: makeRequiredProp(numericProp),\n    rootWidth: makeRequiredProp(Number),\n    rootHeight: makeRequiredProp(Number)\n  },\n  emits: [\"scale\", \"close\"],\n  setup(props, {\n    emit\n  }) {\n    const state = reactive({\n      scale: 1,\n      moveX: 0,\n      moveY: 0,\n      moving: false,\n      zooming: false,\n      imageRatio: 0,\n      displayWidth: 0,\n      displayHeight: 0\n    });\n    const touch = useTouch();\n    const vertical = computed(() => {\n      const {\n        rootWidth,\n        rootHeight\n      } = props;\n      const rootRatio = rootHeight / rootWidth;\n      return state.imageRatio > rootRatio;\n    });\n    const imageStyle = computed(() => {\n      const {\n        scale,\n        moveX,\n        moveY,\n        moving,\n        zooming\n      } = state;\n      const style = {\n        transitionDuration: zooming || moving ? \"0s\" : \".3s\"\n      };\n      if (scale !== 1) {\n        const offsetX = moveX / scale;\n        const offsetY = moveY / scale;\n        style.transform = `scale(${scale}, ${scale}) translate(${offsetX}px, ${offsetY}px)`;\n      }\n      return style;\n    });\n    const maxMoveX = computed(() => {\n      if (state.imageRatio) {\n        const {\n          rootWidth,\n          rootHeight\n        } = props;\n        const displayWidth = vertical.value ? rootHeight / state.imageRatio : rootWidth;\n        return Math.max(0, (state.scale * displayWidth - rootWidth) / 2);\n      }\n      return 0;\n    });\n    const maxMoveY = computed(() => {\n      if (state.imageRatio) {\n        const {\n          rootWidth,\n          rootHeight\n        } = props;\n        const displayHeight = vertical.value ? rootHeight : rootWidth * state.imageRatio;\n        return Math.max(0, (state.scale * displayHeight - rootHeight) / 2);\n      }\n      return 0;\n    });\n    const setScale = (scale) => {\n      scale = clamp(scale, +props.minZoom, +props.maxZoom + 1);\n      if (scale !== state.scale) {\n        state.scale = scale;\n        emit(\"scale\", {\n          scale,\n          index: props.active\n        });\n      }\n    };\n    const resetScale = () => {\n      setScale(1);\n      state.moveX = 0;\n      state.moveY = 0;\n    };\n    const toggleScale = () => {\n      const scale = state.scale > 1 ? 1 : 2;\n      setScale(scale);\n      state.moveX = 0;\n      state.moveY = 0;\n    };\n    let fingerNum;\n    let startMoveX;\n    let startMoveY;\n    let startScale;\n    let startDistance;\n    let doubleTapTimer;\n    let touchStartTime;\n    const onTouchStart = (event) => {\n      const {\n        touches\n      } = event;\n      const {\n        offsetX\n      } = touch;\n      touch.start(event);\n      fingerNum = touches.length;\n      startMoveX = state.moveX;\n      startMoveY = state.moveY;\n      touchStartTime = Date.now();\n      state.moving = fingerNum === 1 && state.scale !== 1;\n      state.zooming = fingerNum === 2 && !offsetX.value;\n      if (state.zooming) {\n        startScale = state.scale;\n        startDistance = getDistance(event.touches);\n      }\n    };\n    const onTouchMove = (event) => {\n      const {\n        touches\n      } = event;\n      touch.move(event);\n      if (state.moving || state.zooming) {\n        preventDefault(event, true);\n      }\n      if (state.moving) {\n        const {\n          deltaX,\n          deltaY\n        } = touch;\n        const moveX = deltaX.value + startMoveX;\n        const moveY = deltaY.value + startMoveY;\n        state.moveX = clamp(moveX, -maxMoveX.value, maxMoveX.value);\n        state.moveY = clamp(moveY, -maxMoveY.value, maxMoveY.value);\n      }\n      if (state.zooming && touches.length === 2) {\n        const distance = getDistance(touches);\n        const scale = startScale * distance / startDistance;\n        setScale(scale);\n      }\n    };\n    const checkTap = () => {\n      if (fingerNum > 1) {\n        return;\n      }\n      const {\n        offsetX,\n        offsetY\n      } = touch;\n      const deltaTime = Date.now() - touchStartTime;\n      const TAP_TIME = 250;\n      const TAP_OFFSET = 5;\n      if (offsetX.value < TAP_OFFSET && offsetY.value < TAP_OFFSET && deltaTime < TAP_TIME) {\n        if (doubleTapTimer) {\n          clearTimeout(doubleTapTimer);\n          doubleTapTimer = null;\n          toggleScale();\n        } else {\n          doubleTapTimer = setTimeout(() => {\n            emit(\"close\");\n            doubleTapTimer = null;\n          }, TAP_TIME);\n        }\n      }\n    };\n    const onTouchEnd = (event) => {\n      let stopPropagation = false;\n      if (state.moving || state.zooming) {\n        stopPropagation = true;\n        if (state.moving && startMoveX === state.moveX && startMoveY === state.moveY) {\n          stopPropagation = false;\n        }\n        if (!event.touches.length) {\n          if (state.zooming) {\n            state.moveX = clamp(state.moveX, -maxMoveX.value, maxMoveX.value);\n            state.moveY = clamp(state.moveY, -maxMoveY.value, maxMoveY.value);\n            state.zooming = false;\n          }\n          state.moving = false;\n          startMoveX = 0;\n          startMoveY = 0;\n          startScale = 1;\n          if (state.scale < 1) {\n            resetScale();\n          }\n          if (state.scale > props.maxZoom) {\n            state.scale = +props.maxZoom;\n          }\n        }\n      }\n      preventDefault(event, stopPropagation);\n      checkTap();\n      touch.reset();\n    };\n    const onLoad = (event) => {\n      const {\n        naturalWidth,\n        naturalHeight\n      } = event.target;\n      state.imageRatio = naturalHeight / naturalWidth;\n    };\n    watch(() => props.active, resetScale);\n    watch(() => props.show, (value) => {\n      if (!value) {\n        resetScale();\n      }\n    });\n    return () => {\n      const imageSlots = {\n        loading: () => _createVNode(Loading, {\n          \"type\": \"spinner\"\n        }, null)\n      };\n      return _createVNode(SwipeItem, {\n        \"class\": bem(\"swipe-item\"),\n        \"onTouchstart\": onTouchStart,\n        \"onTouchmove\": onTouchMove,\n        \"onTouchend\": onTouchEnd,\n        \"onTouchcancel\": onTouchEnd\n      }, {\n        default: () => [_createVNode(Image, {\n          \"src\": props.src,\n          \"fit\": \"contain\",\n          \"class\": bem(\"image\", {\n            vertical: vertical.value\n          }),\n          \"style\": imageStyle.value,\n          \"onLoad\": onLoad\n        }, imageSlots)]\n      });\n    };\n  }\n});\nexport {\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}