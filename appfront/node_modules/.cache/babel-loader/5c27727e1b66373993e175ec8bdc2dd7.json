{"ast":null,"code":"var isArray = require('./isArray');\n/**\r\n  * 将一个数组分割成大小的组。如果数组不能被平均分配，那么最后一块将是剩下的元素\r\n  *\r\n  * @param {Array} array 数组\r\n  * @param {Number} size 每组大小\r\n  * @return {Array}\r\n  */\n\n\nfunction chunk(array, size) {\n  var index;\n  var result = [];\n  var arrLen = size >> 0 || 1;\n\n  if (isArray(array)) {\n    if (arrLen >= 0 && array.length > arrLen) {\n      index = 0;\n\n      while (index < array.length) {\n        result.push(array.slice(index, index + arrLen));\n        index += arrLen;\n      }\n    } else {\n      result = array.length ? [array] : array;\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = chunk;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/xe-utils/chunk.js"],"names":["isArray","require","chunk","array","size","index","result","arrLen","length","push","slice","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAgBC,KAAhB,EAAuBC,IAAvB,EAA6B;AAC3B,MAAIC,KAAJ;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,MAAM,GAAGH,IAAI,IAAI,CAAR,IAAa,CAA1B;;AACA,MAAIJ,OAAO,CAACG,KAAD,CAAX,EAAoB;AAClB,QAAII,MAAM,IAAI,CAAV,IAAeJ,KAAK,CAACK,MAAN,GAAeD,MAAlC,EAA0C;AACxCF,MAAAA,KAAK,GAAG,CAAR;;AACA,aAAOA,KAAK,GAAGF,KAAK,CAACK,MAArB,EAA6B;AAC3BF,QAAAA,MAAM,CAACG,IAAP,CAAYN,KAAK,CAACO,KAAN,CAAYL,KAAZ,EAAmBA,KAAK,GAAGE,MAA3B,CAAZ;AACAF,QAAAA,KAAK,IAAIE,MAAT;AACD;AACF,KAND,MAMO;AACLD,MAAAA,MAAM,GAAGH,KAAK,CAACK,MAAN,GAAe,CAACL,KAAD,CAAf,GAAyBA,KAAlC;AACD;AACF;;AACD,SAAOG,MAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBV,KAAjB","sourcesContent":["var isArray = require('./isArray')\r\n\r\n/**\r\n  * 将一个数组分割成大小的组。如果数组不能被平均分配，那么最后一块将是剩下的元素\r\n  *\r\n  * @param {Array} array 数组\r\n  * @param {Number} size 每组大小\r\n  * @return {Array}\r\n  */\r\nfunction chunk (array, size) {\r\n  var index\r\n  var result = []\r\n  var arrLen = size >> 0 || 1\r\n  if (isArray(array)) {\r\n    if (arrLen >= 0 && array.length > arrLen) {\r\n      index = 0\r\n      while (index < array.length) {\r\n        result.push(array.slice(index, index + arrLen))\r\n        index += arrLen\r\n      }\r\n    } else {\r\n      result = array.length ? [array] : array\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\nmodule.exports = chunk\r\n"]},"metadata":{},"sourceType":"script"}