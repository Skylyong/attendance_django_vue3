{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport warning, { noteOnce } from '../../vc-util/warning';\nimport { convertChildrenToData } from './legacyUtil';\nimport { toArray } from './commonUtil';\nimport { isValidElement } from '../../_util/props-util';\n\nfunction warningProps(props) {\n  var mode = props.mode,\n      options = props.options,\n      children = props.children,\n      backfill = props.backfill,\n      allowClear = props.allowClear,\n      placeholder = props.placeholder,\n      getInputElement = props.getInputElement,\n      showSearch = props.showSearch,\n      onSearch = props.onSearch,\n      defaultOpen = props.defaultOpen,\n      autofocus = props.autofocus,\n      labelInValue = props.labelInValue,\n      value = props.value,\n      inputValue = props.inputValue,\n      optionLabelProp = props.optionLabelProp;\n  var multiple = mode === 'multiple' || mode === 'tags';\n  var mergedShowSearch = showSearch !== undefined ? showSearch : multiple || mode === 'combobox';\n  var mergedOptions = options || convertChildrenToData(children); // `tags` should not set option as disabled\n\n  warning(mode !== 'tags' || mergedOptions.every(function (opt) {\n    return !opt.disabled;\n  }), 'Please avoid setting option to disabled in tags mode since user can always type text as tag.'); // `combobox` should not use `optionLabelProp`\n\n  warning(mode !== 'combobox' || !optionLabelProp, '`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.'); // Only `combobox` support `backfill`\n\n  warning(mode === 'combobox' || !backfill, '`backfill` only works with `combobox` mode.'); // Only `combobox` support `getInputElement`\n\n  warning(mode === 'combobox' || !getInputElement, '`getInputElement` only work with `combobox` mode.'); // Customize `getInputElement` should not use `allowClear` & `placeholder`\n\n  noteOnce(mode !== 'combobox' || !getInputElement || !allowClear || !placeholder, 'Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.'); // `onSearch` should use in `combobox` or `showSearch`\n\n  if (onSearch && !mergedShowSearch && mode !== 'combobox' && mode !== 'tags') {\n    warning(false, '`onSearch` should work with `showSearch` instead of use alone.');\n  }\n\n  noteOnce(!defaultOpen || autofocus, '`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autofocus` if needed.');\n\n  if (value !== undefined && value !== null) {\n    var values = toArray(value);\n    warning(!labelInValue || values.every(function (val) {\n      return _typeof(val) === 'object' && ('key' in val || 'value' in val);\n    }), '`value` should in shape of `{ value: string | number, label?: any }` when you set `labelInValue` to `true`');\n    warning(!multiple || Array.isArray(value), '`value` should be array when `mode` is `multiple` or `tags`');\n  } // Syntactic sugar should use correct children type\n\n\n  if (children) {\n    var invalidateChildType = null;\n    children.some(function (node) {\n      var _a;\n\n      if (!isValidElement(node) || !node.type) {\n        return false;\n      }\n\n      var type = node.type;\n\n      if (type.isSelectOption) {\n        return false;\n      }\n\n      if (type.isSelectOptGroup) {\n        var childs = ((_a = node.children) === null || _a === void 0 ? void 0 : _a.default()) || [];\n        var allChildrenValid = childs.every(function (subNode) {\n          if (!isValidElement(subNode) || !node.type || subNode.type.isSelectOption) {\n            return true;\n          }\n\n          invalidateChildType = subNode.type;\n          return false;\n        });\n\n        if (allChildrenValid) {\n          return false;\n        }\n\n        return true;\n      }\n\n      invalidateChildType = type;\n      return true;\n    });\n\n    if (invalidateChildType) {\n      warning(false, \"`children` should be `Select.Option` or `Select.OptGroup` instead of `\".concat(invalidateChildType.displayName || invalidateChildType.name || invalidateChildType, \"`.\"));\n    }\n\n    warning(inputValue === undefined, '`inputValue` is deprecated, please use `searchValue` instead.');\n  }\n}\n\nexport default warningProps;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/ant-design-vue/es/vc-select/utils/warningPropsUtil.js"],"names":["_typeof","warning","noteOnce","convertChildrenToData","toArray","isValidElement","warningProps","props","mode","options","children","backfill","allowClear","placeholder","getInputElement","showSearch","onSearch","defaultOpen","autofocus","labelInValue","value","inputValue","optionLabelProp","multiple","mergedShowSearch","undefined","mergedOptions","every","opt","disabled","values","val","Array","isArray","invalidateChildType","some","node","_a","type","isSelectOption","isSelectOptGroup","childs","default","allChildrenValid","subNode","concat","displayName","name"],"mappings":"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","sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport warning, { noteOnce } from '../../vc-util/warning';\nimport { convertChildrenToData } from './legacyUtil';\nimport { toArray } from './commonUtil';\nimport { isValidElement } from '../../_util/props-util';\n\nfunction warningProps(props) {\n  var mode = props.mode,\n      options = props.options,\n      children = props.children,\n      backfill = props.backfill,\n      allowClear = props.allowClear,\n      placeholder = props.placeholder,\n      getInputElement = props.getInputElement,\n      showSearch = props.showSearch,\n      onSearch = props.onSearch,\n      defaultOpen = props.defaultOpen,\n      autofocus = props.autofocus,\n      labelInValue = props.labelInValue,\n      value = props.value,\n      inputValue = props.inputValue,\n      optionLabelProp = props.optionLabelProp;\n  var multiple = mode === 'multiple' || mode === 'tags';\n  var mergedShowSearch = showSearch !== undefined ? showSearch : multiple || mode === 'combobox';\n  var mergedOptions = options || convertChildrenToData(children); // `tags` should not set option as disabled\n\n  warning(mode !== 'tags' || mergedOptions.every(function (opt) {\n    return !opt.disabled;\n  }), 'Please avoid setting option to disabled in tags mode since user can always type text as tag.'); // `combobox` should not use `optionLabelProp`\n\n  warning(mode !== 'combobox' || !optionLabelProp, '`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.'); // Only `combobox` support `backfill`\n\n  warning(mode === 'combobox' || !backfill, '`backfill` only works with `combobox` mode.'); // Only `combobox` support `getInputElement`\n\n  warning(mode === 'combobox' || !getInputElement, '`getInputElement` only work with `combobox` mode.'); // Customize `getInputElement` should not use `allowClear` & `placeholder`\n\n  noteOnce(mode !== 'combobox' || !getInputElement || !allowClear || !placeholder, 'Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.'); // `onSearch` should use in `combobox` or `showSearch`\n\n  if (onSearch && !mergedShowSearch && mode !== 'combobox' && mode !== 'tags') {\n    warning(false, '`onSearch` should work with `showSearch` instead of use alone.');\n  }\n\n  noteOnce(!defaultOpen || autofocus, '`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autofocus` if needed.');\n\n  if (value !== undefined && value !== null) {\n    var values = toArray(value);\n    warning(!labelInValue || values.every(function (val) {\n      return _typeof(val) === 'object' && ('key' in val || 'value' in val);\n    }), '`value` should in shape of `{ value: string | number, label?: any }` when you set `labelInValue` to `true`');\n    warning(!multiple || Array.isArray(value), '`value` should be array when `mode` is `multiple` or `tags`');\n  } // Syntactic sugar should use correct children type\n\n\n  if (children) {\n    var invalidateChildType = null;\n    children.some(function (node) {\n      var _a;\n\n      if (!isValidElement(node) || !node.type) {\n        return false;\n      }\n\n      var type = node.type;\n\n      if (type.isSelectOption) {\n        return false;\n      }\n\n      if (type.isSelectOptGroup) {\n        var childs = ((_a = node.children) === null || _a === void 0 ? void 0 : _a.default()) || [];\n        var allChildrenValid = childs.every(function (subNode) {\n          if (!isValidElement(subNode) || !node.type || subNode.type.isSelectOption) {\n            return true;\n          }\n\n          invalidateChildType = subNode.type;\n          return false;\n        });\n\n        if (allChildrenValid) {\n          return false;\n        }\n\n        return true;\n      }\n\n      invalidateChildType = type;\n      return true;\n    });\n\n    if (invalidateChildType) {\n      warning(false, \"`children` should be `Select.Option` or `Select.OptGroup` instead of `\".concat(invalidateChildType.displayName || invalidateChildType.name || invalidateChildType, \"`.\"));\n    }\n\n    warning(inputValue === undefined, '`inputValue` is deprecated, please use `searchValue` instead.');\n  }\n}\n\nexport default warningProps;"]},"metadata":{},"sourceType":"module"}