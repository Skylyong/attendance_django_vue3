{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\";\nimport { ref, watch, computed, reactive, defineComponent } from \"vue\";\nimport { extend, isHidden, unitToPx, numericProp, getScrollTop, getZIndexStyle, makeStringProp, makeNumericProp, createNamespace } from \"../utils\";\nimport { useRect, useEventListener, useScrollParent } from \"@vant/use\";\nimport { useVisibilityChange } from \"../composables/use-visibility-change\";\nconst [name, bem] = createNamespace(\"sticky\");\nconst stickyProps = {\n  zIndex: numericProp,\n  position: makeStringProp(\"top\"),\n  container: Object,\n  offsetTop: makeNumericProp(0),\n  offsetBottom: makeNumericProp(0)\n};\nvar stdin_default = defineComponent({\n  name,\n  props: stickyProps,\n  emits: [\"scroll\", \"change\"],\n\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const root = ref();\n    const scrollParent = useScrollParent(root);\n    const state = reactive({\n      fixed: false,\n      width: 0,\n      height: 0,\n      transform: 0\n    });\n    const offset = computed(() => unitToPx(props.position === \"top\" ? props.offsetTop : props.offsetBottom));\n    const rootStyle = computed(() => {\n      const {\n        fixed,\n        height,\n        width\n      } = state;\n\n      if (fixed) {\n        return {\n          width: `${width}px`,\n          height: `${height}px`\n        };\n      }\n    });\n    const stickyStyle = computed(() => {\n      if (!state.fixed) {\n        return;\n      }\n\n      const style = extend(getZIndexStyle(props.zIndex), {\n        width: `${state.width}px`,\n        height: `${state.height}px`,\n        [props.position]: `${offset.value}px`\n      });\n\n      if (state.transform) {\n        style.transform = `translate3d(0, ${state.transform}px, 0)`;\n      }\n\n      return style;\n    });\n\n    const emitScroll = scrollTop => emit(\"scroll\", {\n      scrollTop,\n      isFixed: state.fixed\n    });\n\n    const onScroll = () => {\n      if (!root.value || isHidden(root)) {\n        return;\n      }\n\n      const {\n        container,\n        position\n      } = props;\n      const rootRect = useRect(root);\n      const scrollTop = getScrollTop(window);\n      state.width = rootRect.width;\n      state.height = rootRect.height;\n\n      if (position === \"top\") {\n        if (container) {\n          const containerRect = useRect(container);\n          const difference = containerRect.bottom - offset.value - state.height;\n          state.fixed = offset.value > rootRect.top && containerRect.bottom > 0;\n          state.transform = difference < 0 ? difference : 0;\n        } else {\n          state.fixed = offset.value > rootRect.top;\n        }\n      } else {\n        const {\n          clientHeight\n        } = document.documentElement;\n\n        if (container) {\n          const containerRect = useRect(container);\n          const difference = clientHeight - containerRect.top - offset.value - state.height;\n          state.fixed = clientHeight - offset.value < rootRect.bottom && clientHeight > containerRect.top;\n          state.transform = difference < 0 ? -difference : 0;\n        } else {\n          state.fixed = clientHeight - offset.value < rootRect.bottom;\n        }\n      }\n\n      emitScroll(scrollTop);\n    };\n\n    watch(() => state.fixed, value => emit(\"change\", value));\n    useEventListener(\"scroll\", onScroll, {\n      target: scrollParent\n    });\n    useVisibilityChange(root, onScroll);\n    return () => {\n      var _a;\n\n      return _createVNode(\"div\", {\n        \"ref\": root,\n        \"style\": rootStyle.value\n      }, [_createVNode(\"div\", {\n        \"class\": bem({\n          fixed: state.fixed\n        }),\n        \"style\": stickyStyle.value\n      }, [(_a = slots.default) == null ? void 0 : _a.call(slots)])]);\n    };\n  }\n\n});\nexport { stdin_default as default };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/sticky/Sticky.js"],"names":["createVNode","_createVNode","ref","watch","computed","reactive","defineComponent","extend","isHidden","unitToPx","numericProp","getScrollTop","getZIndexStyle","makeStringProp","makeNumericProp","createNamespace","useRect","useEventListener","useScrollParent","useVisibilityChange","name","bem","stickyProps","zIndex","position","container","Object","offsetTop","offsetBottom","stdin_default","props","emits","setup","emit","slots","root","scrollParent","state","fixed","width","height","transform","offset","rootStyle","stickyStyle","style","value","emitScroll","scrollTop","isFixed","onScroll","rootRect","window","containerRect","difference","bottom","top","clientHeight","document","documentElement","target","_a","default","call"],"mappings":"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","sourcesContent":["import { createVNode as _createVNode } from \"vue\";\nimport { ref, watch, computed, reactive, defineComponent } from \"vue\";\nimport { extend, isHidden, unitToPx, numericProp, getScrollTop, getZIndexStyle, makeStringProp, makeNumericProp, createNamespace } from \"../utils\";\nimport { useRect, useEventListener, useScrollParent } from \"@vant/use\";\nimport { useVisibilityChange } from \"../composables/use-visibility-change\";\nconst [name, bem] = createNamespace(\"sticky\");\nconst stickyProps = {\n  zIndex: numericProp,\n  position: makeStringProp(\"top\"),\n  container: Object,\n  offsetTop: makeNumericProp(0),\n  offsetBottom: makeNumericProp(0)\n};\nvar stdin_default = defineComponent({\n  name,\n  props: stickyProps,\n  emits: [\"scroll\", \"change\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const root = ref();\n    const scrollParent = useScrollParent(root);\n    const state = reactive({\n      fixed: false,\n      width: 0,\n      height: 0,\n      transform: 0\n    });\n    const offset = computed(() => unitToPx(props.position === \"top\" ? props.offsetTop : props.offsetBottom));\n    const rootStyle = computed(() => {\n      const {\n        fixed,\n        height,\n        width\n      } = state;\n      if (fixed) {\n        return {\n          width: `${width}px`,\n          height: `${height}px`\n        };\n      }\n    });\n    const stickyStyle = computed(() => {\n      if (!state.fixed) {\n        return;\n      }\n      const style = extend(getZIndexStyle(props.zIndex), {\n        width: `${state.width}px`,\n        height: `${state.height}px`,\n        [props.position]: `${offset.value}px`\n      });\n      if (state.transform) {\n        style.transform = `translate3d(0, ${state.transform}px, 0)`;\n      }\n      return style;\n    });\n    const emitScroll = (scrollTop) => emit(\"scroll\", {\n      scrollTop,\n      isFixed: state.fixed\n    });\n    const onScroll = () => {\n      if (!root.value || isHidden(root)) {\n        return;\n      }\n      const {\n        container,\n        position\n      } = props;\n      const rootRect = useRect(root);\n      const scrollTop = getScrollTop(window);\n      state.width = rootRect.width;\n      state.height = rootRect.height;\n      if (position === \"top\") {\n        if (container) {\n          const containerRect = useRect(container);\n          const difference = containerRect.bottom - offset.value - state.height;\n          state.fixed = offset.value > rootRect.top && containerRect.bottom > 0;\n          state.transform = difference < 0 ? difference : 0;\n        } else {\n          state.fixed = offset.value > rootRect.top;\n        }\n      } else {\n        const {\n          clientHeight\n        } = document.documentElement;\n        if (container) {\n          const containerRect = useRect(container);\n          const difference = clientHeight - containerRect.top - offset.value - state.height;\n          state.fixed = clientHeight - offset.value < rootRect.bottom && clientHeight > containerRect.top;\n          state.transform = difference < 0 ? -difference : 0;\n        } else {\n          state.fixed = clientHeight - offset.value < rootRect.bottom;\n        }\n      }\n      emitScroll(scrollTop);\n    };\n    watch(() => state.fixed, (value) => emit(\"change\", value));\n    useEventListener(\"scroll\", onScroll, {\n      target: scrollParent\n    });\n    useVisibilityChange(root, onScroll);\n    return () => {\n      var _a;\n      return _createVNode(\"div\", {\n        \"ref\": root,\n        \"style\": rootStyle.value\n      }, [_createVNode(\"div\", {\n        \"class\": bem({\n          fixed: state.fixed\n        }),\n        \"style\": stickyStyle.value\n      }, [(_a = slots.default) == null ? void 0 : _a.call(slots)])]);\n    };\n  }\n});\nexport {\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}