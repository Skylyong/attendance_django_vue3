{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n/**\n * source by `component-classes`\n * https://github.com/component/classes.git\n */\n\nimport indexOf from 'lodash-es/indexOf';\n/**\n * Whitespace regexp.\n */\n\nvar re = /\\s+/;\nexport var ClassList = /*#__PURE__*/function () {\n  function ClassList(el) {\n    _classCallCheck(this, ClassList);\n\n    if (!el || !el.nodeType) {\n      throw new Error('A DOM element reference is required');\n    }\n\n    this.el = el;\n    this.list = el.classList;\n  }\n\n  _createClass(ClassList, [{\n    key: \"array\",\n    value: function array() {\n      var className = this.el.getAttribute('class') || '';\n      var str = className.replace(/^\\s+|\\s+$/g, '');\n      var arr = str.split(re);\n      if ('' === arr[0]) arr.shift();\n      return arr;\n    }\n    /**\n     * Add class `name` if not already present.\n     *\n     * @param {String} name\n     * @return {ClassList}\n     * @api public\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(name) {\n      // classList\n      if (this.list) {\n        this.list.add(name);\n        return this;\n      } // fallback\n\n\n      var arr = this.array();\n      var i = indexOf(arr, name);\n      if (!~i) arr.push(name);\n      this.el.className = arr.join(' ');\n      return this;\n    }\n    /**\n     * Remove class `name` when present, or\n     * pass a regular expression to remove\n     * any which match.\n     *\n     * @param {String|RegExp} name\n     * @return {ClassList}\n     * @api public\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(name) {\n      if ('[object RegExp]' === toString.call(name)) {\n        return this._removeMatching(name);\n      } // classList\n\n\n      if (this.list) {\n        this.list.remove(name);\n        return this;\n      } // fallback\n\n\n      var arr = this.array();\n      var i = indexOf(arr, name);\n      if (~i) arr.splice(i, 1);\n      this.el.className = arr.join(' ');\n      return this;\n    }\n    /**\n     * Remove all classes matching `re`.\n     *\n     * @param {RegExp} re\n     * @return {ClassList}\n     * @api private\n     */\n\n  }, {\n    key: \"_removeMatching\",\n    value: function _removeMatching(re) {\n      var arr = this.array();\n\n      for (var i = 0; i < arr.length; i++) {\n        if (re.test(arr[i])) {\n          this.remove(arr[i]);\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Toggle class `name`, can force state via `force`.\n     *\n     * For browsers that support classList, but do not support `force` yet,\n     * the mistake will be detected and corrected.\n     *\n     * @param {String} name\n     * @param {Boolean} force\n     * @return {ClassList}\n     * @api public\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle(name, force) {\n      // classList\n      if (this.list) {\n        if ('undefined' !== typeof force) {\n          if (force !== this.list.toggle(name, force)) {\n            this.list.toggle(name); // toggle again to correct\n          }\n        } else {\n          this.list.toggle(name);\n        }\n\n        return this;\n      } // fallback\n\n\n      if ('undefined' !== typeof force) {\n        if (!force) {\n          this.remove(name);\n        } else {\n          this.add(name);\n        }\n      } else {\n        if (this.has(name)) {\n          this.remove(name);\n        } else {\n          this.add(name);\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Check if class `name` is present.\n     *\n     * @param {String} name\n     * @api public\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      return this.list ? this.list.contains(name) : !!~indexOf(this.array(), name);\n    }\n    /**\n     * Check if class `name` is present.\n     *\n     * @param {String} name\n     * @api public\n     */\n\n  }, {\n    key: \"contains\",\n    value: function contains(name) {\n      return this.has(name);\n    }\n  }]);\n\n  return ClassList;\n}();\n/**\n * Wrap `el` in a `ClassList`.\n *\n * @param {Element} el\n * @return {ClassList}\n * @api public\n */\n\nexport default function (el) {\n  return new ClassList(el);\n}","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/node_modules/ant-design-vue/es/_util/component-classes.js"],"names":["_classCallCheck","_createClass","indexOf","re","ClassList","el","nodeType","Error","list","classList","key","value","array","className","getAttribute","str","replace","arr","split","shift","add","name","i","push","join","remove","toString","call","_removeMatching","splice","length","test","toggle","force","has","contains"],"mappings":"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","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\n/**\n * source by `component-classes`\n * https://github.com/component/classes.git\n */\nimport indexOf from 'lodash-es/indexOf';\n/**\n * Whitespace regexp.\n */\n\nvar re = /\\s+/;\nexport var ClassList = /*#__PURE__*/function () {\n  function ClassList(el) {\n    _classCallCheck(this, ClassList);\n\n    if (!el || !el.nodeType) {\n      throw new Error('A DOM element reference is required');\n    }\n\n    this.el = el;\n    this.list = el.classList;\n  }\n\n  _createClass(ClassList, [{\n    key: \"array\",\n    value: function array() {\n      var className = this.el.getAttribute('class') || '';\n      var str = className.replace(/^\\s+|\\s+$/g, '');\n      var arr = str.split(re);\n      if ('' === arr[0]) arr.shift();\n      return arr;\n    }\n    /**\n     * Add class `name` if not already present.\n     *\n     * @param {String} name\n     * @return {ClassList}\n     * @api public\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(name) {\n      // classList\n      if (this.list) {\n        this.list.add(name);\n        return this;\n      } // fallback\n\n\n      var arr = this.array();\n      var i = indexOf(arr, name);\n      if (!~i) arr.push(name);\n      this.el.className = arr.join(' ');\n      return this;\n    }\n    /**\n     * Remove class `name` when present, or\n     * pass a regular expression to remove\n     * any which match.\n     *\n     * @param {String|RegExp} name\n     * @return {ClassList}\n     * @api public\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(name) {\n      if ('[object RegExp]' === toString.call(name)) {\n        return this._removeMatching(name);\n      } // classList\n\n\n      if (this.list) {\n        this.list.remove(name);\n        return this;\n      } // fallback\n\n\n      var arr = this.array();\n      var i = indexOf(arr, name);\n      if (~i) arr.splice(i, 1);\n      this.el.className = arr.join(' ');\n      return this;\n    }\n    /**\n     * Remove all classes matching `re`.\n     *\n     * @param {RegExp} re\n     * @return {ClassList}\n     * @api private\n     */\n\n  }, {\n    key: \"_removeMatching\",\n    value: function _removeMatching(re) {\n      var arr = this.array();\n\n      for (var i = 0; i < arr.length; i++) {\n        if (re.test(arr[i])) {\n          this.remove(arr[i]);\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Toggle class `name`, can force state via `force`.\n     *\n     * For browsers that support classList, but do not support `force` yet,\n     * the mistake will be detected and corrected.\n     *\n     * @param {String} name\n     * @param {Boolean} force\n     * @return {ClassList}\n     * @api public\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle(name, force) {\n      // classList\n      if (this.list) {\n        if ('undefined' !== typeof force) {\n          if (force !== this.list.toggle(name, force)) {\n            this.list.toggle(name); // toggle again to correct\n          }\n        } else {\n          this.list.toggle(name);\n        }\n\n        return this;\n      } // fallback\n\n\n      if ('undefined' !== typeof force) {\n        if (!force) {\n          this.remove(name);\n        } else {\n          this.add(name);\n        }\n      } else {\n        if (this.has(name)) {\n          this.remove(name);\n        } else {\n          this.add(name);\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Check if class `name` is present.\n     *\n     * @param {String} name\n     * @api public\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      return this.list ? this.list.contains(name) : !!~indexOf(this.array(), name);\n    }\n    /**\n     * Check if class `name` is present.\n     *\n     * @param {String} name\n     * @api public\n     */\n\n  }, {\n    key: \"contains\",\n    value: function contains(name) {\n      return this.has(name);\n    }\n  }]);\n\n  return ClassList;\n}();\n/**\n * Wrap `el` in a `ClassList`.\n *\n * @param {Element} el\n * @return {ClassList}\n * @api public\n */\n\nexport default function (el) {\n  return new ClassList(el);\n}"]},"metadata":{},"sourceType":"module"}