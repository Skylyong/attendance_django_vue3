{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/* eslint no-loop-func: 0*/\n\n\nimport warning from 'warning';\nimport TreeNode from './TreeNode';\nimport { getOptionProps, getSlot } from '../../_util/props-util';\nvar DRAG_SIDE_RANGE = 0.25;\nvar DRAG_MIN_GAP = 2;\nvar onlyTreeNodeWarned = false;\nexport function warnOnlyTreeNode() {\n  if (onlyTreeNodeWarned) return;\n  onlyTreeNodeWarned = true;\n  warning(false, 'Tree only accept TreeNode as children.');\n}\nexport function arrDel(list, value) {\n  var clone = list.slice();\n  var index = clone.indexOf(value);\n\n  if (index >= 0) {\n    clone.splice(index, 1);\n  }\n\n  return clone;\n}\nexport function arrAdd(list, value) {\n  var clone = list.slice();\n\n  if (clone.indexOf(value) === -1) {\n    clone.push(value);\n  }\n\n  return clone;\n}\nexport function posToArr(pos) {\n  return pos.split('-');\n}\nexport function getPosition(level, index) {\n  return \"\".concat(level, \"-\").concat(index);\n}\nexport function isTreeNode(node) {\n  return node.type && node.type.isTreeNode;\n}\nexport function getNodeChildren() {\n  var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return children.filter(isTreeNode);\n}\nexport function isCheckDisabled(node) {\n  var _ref = getOptionProps(node) || {},\n      disabled = _ref.disabled,\n      disableCheckbox = _ref.disableCheckbox,\n      checkable = _ref.checkable;\n\n  return !!(disabled || disableCheckbox) || checkable === false;\n}\nexport function traverseTreeNodes(treeNodes, callback) {\n  function processNode(node, index, parent) {\n    var children = node ? getSlot(node) : treeNodes;\n    var pos = node ? getPosition(parent.pos, index) : 0; // Filter children\n\n    var childList = getNodeChildren(children); // Process node if is not root\n\n    if (node) {\n      var key = node.key;\n\n      if (!key && (key === undefined || key === null)) {\n        key = pos;\n      }\n\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null\n      };\n      callback(data);\n    } // Process children node\n\n\n    childList.forEach(function (subNode, subIndex) {\n      processNode(subNode, subIndex, {\n        node: node,\n        pos: pos\n      });\n    });\n  }\n\n  processNode(null);\n}\n/**\n * Use `rc-util` `toArray` to get the children list which keeps the key.\n * And return single node if children is only one(This can avoid `key` missing check).\n */\n\nexport function mapChildren() {\n  var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var func = arguments.length > 1 ? arguments[1] : undefined;\n  var list = children.map(func);\n\n  if (list.length === 1) {\n    return list[0];\n  }\n\n  return list;\n}\nexport function getDragNodesKeys(treeNodes, node) {\n  var _getOptionProps = getOptionProps(node),\n      eventKey = _getOptionProps.eventKey,\n      pos = _getOptionProps.pos;\n\n  var dragNodesKeys = [];\n  traverseTreeNodes(treeNodes, function (_ref2) {\n    var key = _ref2.key;\n    dragNodesKeys.push(key);\n  });\n  dragNodesKeys.push(eventKey || pos);\n  return dragNodesKeys;\n}\nexport function calcDropPosition(event, treeNode) {\n  var clientY = event.clientY;\n\n  var _treeNode$selectHandl = treeNode.selectHandle.getBoundingClientRect(),\n      top = _treeNode$selectHandl.top,\n      bottom = _treeNode$selectHandl.bottom,\n      height = _treeNode$selectHandl.height;\n\n  var des = Math.max(height * DRAG_SIDE_RANGE, DRAG_MIN_GAP);\n\n  if (clientY <= top + des) {\n    return -1;\n  }\n\n  if (clientY >= bottom - des) {\n    return 1;\n  }\n\n  return 0;\n}\n/**\n * Return selectedKeys according with multiple prop\n * @param selectedKeys\n * @param props\n * @returns [string]\n */\n\nexport function calcSelectedKeys(selectedKeys, props) {\n  if (!selectedKeys) {\n    return undefined;\n  }\n\n  var multiple = props.multiple;\n\n  if (multiple) {\n    return selectedKeys.slice();\n  }\n\n  if (selectedKeys.length) {\n    return [selectedKeys[0]];\n  }\n\n  return selectedKeys;\n}\n/**\n * Since React internal will convert key to string,\n * we need do this to avoid `checkStrictly` use number match\n */\n// function keyListToString (keyList) {\n//   if (!keyList) return keyList\n//   return keyList.map(key => String(key))\n// }\n\nvar internalProcessProps = function internalProcessProps() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return _extends(_extends({}, props), {\n    class: props.class || props.className,\n    style: props.style,\n    key: props.key\n  });\n};\n\nexport function convertDataToTree(treeData, processor) {\n  if (!treeData) return [];\n\n  var _ref3 = processor || {},\n      _ref3$processProps = _ref3.processProps,\n      processProps = _ref3$processProps === void 0 ? internalProcessProps : _ref3$processProps;\n\n  var list = Array.isArray(treeData) ? treeData : [treeData];\n  return list.map(function (_a) {\n    var children = _a.children,\n        props = __rest(_a, [\"children\"]);\n\n    var childrenNodes = convertDataToTree(children, processor);\n    return _createVNode(TreeNode, processProps(props), {\n      default: function _default() {\n        return [childrenNodes];\n      }\n    });\n  });\n} // TODO: ========================= NEW LOGIC =========================\n\n/**\n * Calculate treeNodes entities. `processTreeEntity` is used for `rc-tree-select`\n * @param treeNodes\n * @param processTreeEntity  User can customize the entity\n */\n\nexport function convertTreeToEntities(treeNodes) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref4.initWrapper,\n      processEntity = _ref4.processEntity,\n      onProcessFinished = _ref4.onProcessFinished;\n\n  var posEntities = new Map();\n  var keyEntities = new Map();\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseTreeNodes(treeNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos\n    };\n    posEntities.set(pos, entity);\n    keyEntities.set(key, entity); // Fill children\n\n    entity.parent = posEntities.get(parentPos);\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style\n */\n\nexport function parseCheckedKeys(keys) {\n  if (!keys) {\n    return null;\n  } // Convert keys to object format\n\n\n  var keyProps;\n\n  if (Array.isArray(keys)) {\n    // [Legacy] Follow the api doc\n    keyProps = {\n      checkedKeys: keys,\n      halfCheckedKeys: undefined\n    };\n  } else if (_typeof(keys) === 'object') {\n    keyProps = {\n      checkedKeys: keys.checked || undefined,\n      halfCheckedKeys: keys.halfChecked || undefined\n    };\n  } else {\n    warning(false, '`checkedKeys` is not an array or an object');\n    return null;\n  } // keyProps.checkedKeys = keyListToString(keyProps.checkedKeys)\n  // keyProps.halfCheckedKeys = keyListToString(keyProps.halfCheckedKeys)\n\n\n  return keyProps;\n}\n/**\n * Conduct check state by the keyList. It will conduct up & from the provided key.\n * If the conduct path reach the disabled or already checked / unchecked node will stop conduct.\n * @param keyList       list of keys\n * @param isCheck       is check the node or not\n * @param keyEntities   parsed by `convertTreeToEntities` function in Tree\n * @param checkStatus   Can pass current checked status for process (usually for uncheck operation)\n * @returns {{checkedKeys: [], halfCheckedKeys: []}}\n */\n\nexport function conductCheck(keyList, isCheck, keyEntities) {\n  var checkStatus = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var checkedKeys = new Map();\n  var halfCheckedKeys = new Map(); // Record the key has some child checked (include child half checked)\n\n  (checkStatus.checkedKeys || []).forEach(function (key) {\n    checkedKeys.set(key, true);\n  });\n  (checkStatus.halfCheckedKeys || []).forEach(function (key) {\n    halfCheckedKeys.set(key, true);\n  }); // Conduct up\n\n  function conductUp(key) {\n    if (checkedKeys.get(key) === isCheck) return;\n    var entity = keyEntities.get(key);\n    if (!entity) return;\n    var children = entity.children,\n        parent = entity.parent,\n        node = entity.node;\n    if (isCheckDisabled(node)) return; // Check child node checked status\n\n    var everyChildChecked = true;\n    var someChildChecked = false; // Child checked or half checked\n\n    (children || []).filter(function (child) {\n      return !isCheckDisabled(child.node);\n    }).forEach(function (_ref5) {\n      var childKey = _ref5.key;\n      var childChecked = checkedKeys.get(childKey);\n      var childHalfChecked = halfCheckedKeys.get(childKey);\n      if (childChecked || childHalfChecked) someChildChecked = true;\n      if (!childChecked) everyChildChecked = false;\n    }); // Update checked status\n\n    if (isCheck) {\n      checkedKeys.set(key, everyChildChecked);\n    } else {\n      checkedKeys.set(key, false);\n    }\n\n    halfCheckedKeys.set(key, someChildChecked);\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  } // Conduct down\n\n\n  function conductDown(key) {\n    if (checkedKeys.get(key) === isCheck) return;\n    var entity = keyEntities.get(key);\n    if (!entity) return;\n    var children = entity.children,\n        node = entity.node;\n    if (isCheckDisabled(node)) return;\n    checkedKeys.set(key, isCheck);\n    (children || []).forEach(function (child) {\n      conductDown(child.key);\n    });\n  }\n\n  function conduct(key) {\n    var entity = keyEntities.get(key);\n\n    if (!entity) {\n      warning(false, \"'\".concat(key, \"' does not exist in the tree.\"));\n      return;\n    }\n\n    var children = entity.children,\n        parent = entity.parent,\n        node = entity.node;\n    checkedKeys.set(key, isCheck);\n    if (isCheckDisabled(node)) return; // Conduct down\n\n    (children || []).filter(function (child) {\n      return !isCheckDisabled(child.node);\n    }).forEach(function (child) {\n      conductDown(child.key);\n    }); // Conduct up\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n\n  (keyList || []).forEach(function (key) {\n    conduct(key);\n  });\n  var checkedKeyList = [];\n  var halfCheckedKeyList = []; // Fill checked list\n\n  var _iterator = _createForOfIteratorHelper(checkedKeys),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          key = _step$value[0],\n          value = _step$value[1];\n\n      if (value) {\n        checkedKeyList.push(key);\n      }\n    } // Fill half checked list\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(halfCheckedKeys),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n          _key = _step2$value[0],\n          _value = _step2$value[1];\n\n      if (!checkedKeys.get(_key) && _value) {\n        halfCheckedKeyList.push(_key);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return {\n    checkedKeys: checkedKeyList,\n    halfCheckedKeys: halfCheckedKeyList\n  };\n}\n/**\n * If user use `autoExpandParent` we should get the list of parent node\n * @param keyList\n * @param keyEntities\n */\n\nexport function conductExpandParent(keyList, keyEntities) {\n  var expandedKeys = new Map();\n\n  function conductUp(key) {\n    if (expandedKeys.get(key)) return;\n    var entity = keyEntities.get(key);\n    if (!entity) return;\n    expandedKeys.set(key, true);\n    var parent = entity.parent,\n        node = entity.node;\n    var props = getOptionProps(node);\n    if (props && props.disabled) return;\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n\n  (keyList || []).forEach(function (key) {\n    conductUp(key);\n  });\n  return _toConsumableArray(expandedKeys.keys());\n}\n/**\n * Returns only the data- and aria- key/value pairs\n * @param {object} props\n */\n\nexport function getDataAndAria(props) {\n  return Object.keys(props).reduce(function (prev, key) {\n    if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-') {\n      prev[key] = props[key];\n    }\n\n    return prev;\n  }, {});\n}","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/ant-design-vue/es/vc-tree/src/util.js"],"names":["_toConsumableArray","_slicedToArray","_createForOfIteratorHelper","_typeof","_extends","createVNode","_createVNode","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","warning","TreeNode","getOptionProps","getSlot","DRAG_SIDE_RANGE","DRAG_MIN_GAP","onlyTreeNodeWarned","warnOnlyTreeNode","arrDel","list","value","clone","slice","index","splice","arrAdd","push","posToArr","pos","split","getPosition","level","concat","isTreeNode","node","type","getNodeChildren","children","arguments","undefined","filter","isCheckDisabled","_ref","disabled","disableCheckbox","checkable","traverseTreeNodes","treeNodes","callback","processNode","parent","childList","key","data","parentPos","forEach","subNode","subIndex","mapChildren","func","map","getDragNodesKeys","_getOptionProps","eventKey","dragNodesKeys","_ref2","calcDropPosition","event","treeNode","clientY","_treeNode$selectHandl","selectHandle","getBoundingClientRect","top","bottom","height","des","Math","max","calcSelectedKeys","selectedKeys","props","multiple","internalProcessProps","class","className","style","convertDataToTree","treeData","processor","_ref3","_ref3$processProps","processProps","Array","isArray","_a","childrenNodes","default","_default","convertTreeToEntities","_ref4","initWrapper","processEntity","onProcessFinished","posEntities","Map","keyEntities","wrapper","item","entity","set","get","parseCheckedKeys","keys","keyProps","checkedKeys","halfCheckedKeys","checked","halfChecked","conductCheck","keyList","isCheck","checkStatus","conductUp","everyChildChecked","someChildChecked","child","_ref5","childKey","childChecked","childHalfChecked","conductDown","conduct","checkedKeyList","halfCheckedKeyList","_iterator","_step","n","done","_step$value","err","f","_iterator2","_step2","_step2$value","_key","_value","conductExpandParent","expandedKeys","getDataAndAria","reduce","prev","substr"],"mappings":"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","sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/* eslint no-loop-func: 0*/\n\n\nimport warning from 'warning';\nimport TreeNode from './TreeNode';\nimport { getOptionProps, getSlot } from '../../_util/props-util';\nvar DRAG_SIDE_RANGE = 0.25;\nvar DRAG_MIN_GAP = 2;\nvar onlyTreeNodeWarned = false;\nexport function warnOnlyTreeNode() {\n  if (onlyTreeNodeWarned) return;\n  onlyTreeNodeWarned = true;\n  warning(false, 'Tree only accept TreeNode as children.');\n}\nexport function arrDel(list, value) {\n  var clone = list.slice();\n  var index = clone.indexOf(value);\n\n  if (index >= 0) {\n    clone.splice(index, 1);\n  }\n\n  return clone;\n}\nexport function arrAdd(list, value) {\n  var clone = list.slice();\n\n  if (clone.indexOf(value) === -1) {\n    clone.push(value);\n  }\n\n  return clone;\n}\nexport function posToArr(pos) {\n  return pos.split('-');\n}\nexport function getPosition(level, index) {\n  return \"\".concat(level, \"-\").concat(index);\n}\nexport function isTreeNode(node) {\n  return node.type && node.type.isTreeNode;\n}\nexport function getNodeChildren() {\n  var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return children.filter(isTreeNode);\n}\nexport function isCheckDisabled(node) {\n  var _ref = getOptionProps(node) || {},\n      disabled = _ref.disabled,\n      disableCheckbox = _ref.disableCheckbox,\n      checkable = _ref.checkable;\n\n  return !!(disabled || disableCheckbox) || checkable === false;\n}\nexport function traverseTreeNodes(treeNodes, callback) {\n  function processNode(node, index, parent) {\n    var children = node ? getSlot(node) : treeNodes;\n    var pos = node ? getPosition(parent.pos, index) : 0; // Filter children\n\n    var childList = getNodeChildren(children); // Process node if is not root\n\n    if (node) {\n      var key = node.key;\n\n      if (!key && (key === undefined || key === null)) {\n        key = pos;\n      }\n\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null\n      };\n      callback(data);\n    } // Process children node\n\n\n    childList.forEach(function (subNode, subIndex) {\n      processNode(subNode, subIndex, {\n        node: node,\n        pos: pos\n      });\n    });\n  }\n\n  processNode(null);\n}\n/**\n * Use `rc-util` `toArray` to get the children list which keeps the key.\n * And return single node if children is only one(This can avoid `key` missing check).\n */\n\nexport function mapChildren() {\n  var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var func = arguments.length > 1 ? arguments[1] : undefined;\n  var list = children.map(func);\n\n  if (list.length === 1) {\n    return list[0];\n  }\n\n  return list;\n}\nexport function getDragNodesKeys(treeNodes, node) {\n  var _getOptionProps = getOptionProps(node),\n      eventKey = _getOptionProps.eventKey,\n      pos = _getOptionProps.pos;\n\n  var dragNodesKeys = [];\n  traverseTreeNodes(treeNodes, function (_ref2) {\n    var key = _ref2.key;\n    dragNodesKeys.push(key);\n  });\n  dragNodesKeys.push(eventKey || pos);\n  return dragNodesKeys;\n}\nexport function calcDropPosition(event, treeNode) {\n  var clientY = event.clientY;\n\n  var _treeNode$selectHandl = treeNode.selectHandle.getBoundingClientRect(),\n      top = _treeNode$selectHandl.top,\n      bottom = _treeNode$selectHandl.bottom,\n      height = _treeNode$selectHandl.height;\n\n  var des = Math.max(height * DRAG_SIDE_RANGE, DRAG_MIN_GAP);\n\n  if (clientY <= top + des) {\n    return -1;\n  }\n\n  if (clientY >= bottom - des) {\n    return 1;\n  }\n\n  return 0;\n}\n/**\n * Return selectedKeys according with multiple prop\n * @param selectedKeys\n * @param props\n * @returns [string]\n */\n\nexport function calcSelectedKeys(selectedKeys, props) {\n  if (!selectedKeys) {\n    return undefined;\n  }\n\n  var multiple = props.multiple;\n\n  if (multiple) {\n    return selectedKeys.slice();\n  }\n\n  if (selectedKeys.length) {\n    return [selectedKeys[0]];\n  }\n\n  return selectedKeys;\n}\n/**\n * Since React internal will convert key to string,\n * we need do this to avoid `checkStrictly` use number match\n */\n// function keyListToString (keyList) {\n//   if (!keyList) return keyList\n//   return keyList.map(key => String(key))\n// }\n\nvar internalProcessProps = function internalProcessProps() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return _extends(_extends({}, props), {\n    class: props.class || props.className,\n    style: props.style,\n    key: props.key\n  });\n};\n\nexport function convertDataToTree(treeData, processor) {\n  if (!treeData) return [];\n\n  var _ref3 = processor || {},\n      _ref3$processProps = _ref3.processProps,\n      processProps = _ref3$processProps === void 0 ? internalProcessProps : _ref3$processProps;\n\n  var list = Array.isArray(treeData) ? treeData : [treeData];\n  return list.map(function (_a) {\n    var children = _a.children,\n        props = __rest(_a, [\"children\"]);\n\n    var childrenNodes = convertDataToTree(children, processor);\n    return _createVNode(TreeNode, processProps(props), {\n      default: function _default() {\n        return [childrenNodes];\n      }\n    });\n  });\n} // TODO: ========================= NEW LOGIC =========================\n\n/**\n * Calculate treeNodes entities. `processTreeEntity` is used for `rc-tree-select`\n * @param treeNodes\n * @param processTreeEntity  User can customize the entity\n */\n\nexport function convertTreeToEntities(treeNodes) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref4.initWrapper,\n      processEntity = _ref4.processEntity,\n      onProcessFinished = _ref4.onProcessFinished;\n\n  var posEntities = new Map();\n  var keyEntities = new Map();\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseTreeNodes(treeNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos\n    };\n    posEntities.set(pos, entity);\n    keyEntities.set(key, entity); // Fill children\n\n    entity.parent = posEntities.get(parentPos);\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style\n */\n\nexport function parseCheckedKeys(keys) {\n  if (!keys) {\n    return null;\n  } // Convert keys to object format\n\n\n  var keyProps;\n\n  if (Array.isArray(keys)) {\n    // [Legacy] Follow the api doc\n    keyProps = {\n      checkedKeys: keys,\n      halfCheckedKeys: undefined\n    };\n  } else if (_typeof(keys) === 'object') {\n    keyProps = {\n      checkedKeys: keys.checked || undefined,\n      halfCheckedKeys: keys.halfChecked || undefined\n    };\n  } else {\n    warning(false, '`checkedKeys` is not an array or an object');\n    return null;\n  } // keyProps.checkedKeys = keyListToString(keyProps.checkedKeys)\n  // keyProps.halfCheckedKeys = keyListToString(keyProps.halfCheckedKeys)\n\n\n  return keyProps;\n}\n/**\n * Conduct check state by the keyList. It will conduct up & from the provided key.\n * If the conduct path reach the disabled or already checked / unchecked node will stop conduct.\n * @param keyList       list of keys\n * @param isCheck       is check the node or not\n * @param keyEntities   parsed by `convertTreeToEntities` function in Tree\n * @param checkStatus   Can pass current checked status for process (usually for uncheck operation)\n * @returns {{checkedKeys: [], halfCheckedKeys: []}}\n */\n\nexport function conductCheck(keyList, isCheck, keyEntities) {\n  var checkStatus = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var checkedKeys = new Map();\n  var halfCheckedKeys = new Map(); // Record the key has some child checked (include child half checked)\n\n  (checkStatus.checkedKeys || []).forEach(function (key) {\n    checkedKeys.set(key, true);\n  });\n  (checkStatus.halfCheckedKeys || []).forEach(function (key) {\n    halfCheckedKeys.set(key, true);\n  }); // Conduct up\n\n  function conductUp(key) {\n    if (checkedKeys.get(key) === isCheck) return;\n    var entity = keyEntities.get(key);\n    if (!entity) return;\n    var children = entity.children,\n        parent = entity.parent,\n        node = entity.node;\n    if (isCheckDisabled(node)) return; // Check child node checked status\n\n    var everyChildChecked = true;\n    var someChildChecked = false; // Child checked or half checked\n\n    (children || []).filter(function (child) {\n      return !isCheckDisabled(child.node);\n    }).forEach(function (_ref5) {\n      var childKey = _ref5.key;\n      var childChecked = checkedKeys.get(childKey);\n      var childHalfChecked = halfCheckedKeys.get(childKey);\n      if (childChecked || childHalfChecked) someChildChecked = true;\n      if (!childChecked) everyChildChecked = false;\n    }); // Update checked status\n\n    if (isCheck) {\n      checkedKeys.set(key, everyChildChecked);\n    } else {\n      checkedKeys.set(key, false);\n    }\n\n    halfCheckedKeys.set(key, someChildChecked);\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  } // Conduct down\n\n\n  function conductDown(key) {\n    if (checkedKeys.get(key) === isCheck) return;\n    var entity = keyEntities.get(key);\n    if (!entity) return;\n    var children = entity.children,\n        node = entity.node;\n    if (isCheckDisabled(node)) return;\n    checkedKeys.set(key, isCheck);\n    (children || []).forEach(function (child) {\n      conductDown(child.key);\n    });\n  }\n\n  function conduct(key) {\n    var entity = keyEntities.get(key);\n\n    if (!entity) {\n      warning(false, \"'\".concat(key, \"' does not exist in the tree.\"));\n      return;\n    }\n\n    var children = entity.children,\n        parent = entity.parent,\n        node = entity.node;\n    checkedKeys.set(key, isCheck);\n    if (isCheckDisabled(node)) return; // Conduct down\n\n    (children || []).filter(function (child) {\n      return !isCheckDisabled(child.node);\n    }).forEach(function (child) {\n      conductDown(child.key);\n    }); // Conduct up\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n\n  (keyList || []).forEach(function (key) {\n    conduct(key);\n  });\n  var checkedKeyList = [];\n  var halfCheckedKeyList = []; // Fill checked list\n\n  var _iterator = _createForOfIteratorHelper(checkedKeys),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          key = _step$value[0],\n          value = _step$value[1];\n\n      if (value) {\n        checkedKeyList.push(key);\n      }\n    } // Fill half checked list\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(halfCheckedKeys),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n          _key = _step2$value[0],\n          _value = _step2$value[1];\n\n      if (!checkedKeys.get(_key) && _value) {\n        halfCheckedKeyList.push(_key);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return {\n    checkedKeys: checkedKeyList,\n    halfCheckedKeys: halfCheckedKeyList\n  };\n}\n/**\n * If user use `autoExpandParent` we should get the list of parent node\n * @param keyList\n * @param keyEntities\n */\n\nexport function conductExpandParent(keyList, keyEntities) {\n  var expandedKeys = new Map();\n\n  function conductUp(key) {\n    if (expandedKeys.get(key)) return;\n    var entity = keyEntities.get(key);\n    if (!entity) return;\n    expandedKeys.set(key, true);\n    var parent = entity.parent,\n        node = entity.node;\n    var props = getOptionProps(node);\n    if (props && props.disabled) return;\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n\n  (keyList || []).forEach(function (key) {\n    conductUp(key);\n  });\n  return _toConsumableArray(expandedKeys.keys());\n}\n/**\n * Returns only the data- and aria- key/value pairs\n * @param {object} props\n */\n\nexport function getDataAndAria(props) {\n  return Object.keys(props).reduce(function (prev, key) {\n    if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-') {\n      prev[key] = props[key];\n    }\n\n    return prev;\n  }, {});\n}"]},"metadata":{},"sourceType":"module"}