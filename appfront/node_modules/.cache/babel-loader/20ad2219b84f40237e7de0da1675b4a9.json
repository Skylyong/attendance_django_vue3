{"ast":null,"code":"import { defineComponent, h, computed, inject } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { getFuncText } from '../../tools/utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { useSize } from '../../hooks/size';\nexport default defineComponent({\n  name: 'VxeCheckbox',\n  props: {\n    modelValue: [String, Number, Boolean],\n    label: {\n      type: [String, Number],\n      default: null\n    },\n    indeterminate: Boolean,\n    title: [String, Number],\n    checkedValue: {\n      type: [String, Number, Boolean],\n      default: true\n    },\n    uncheckedValue: {\n      type: [String, Number, Boolean],\n      default: false\n    },\n    content: [String, Number],\n    disabled: Boolean,\n    size: {\n      type: String,\n      default: function () {\n        return GlobalConfig.checkbox.size || GlobalConfig.size;\n      }\n    }\n  },\n  emits: ['update:modelValue', 'change'],\n  setup: function (props, context) {\n    var slots = context.slots,\n        emit = context.emit;\n    var xID = XEUtils.uniqueId();\n    var $xecheckbox = {\n      xID: xID,\n      props: props,\n      context: context\n    };\n    var checkboxMethods = {};\n    var computeSize = useSize(props);\n    var $xecheckboxgroup = inject('$xecheckboxgroup', null);\n    var computeDisabled = computed(function () {\n      return props.disabled || $xecheckboxgroup && $xecheckboxgroup.props.disabled;\n    });\n    var computeChecked = computed(function () {\n      return $xecheckboxgroup ? XEUtils.includes($xecheckboxgroup.props.modelValue, props.label) : props.modelValue === props.checkedValue;\n    });\n\n    var changeEvent = function (evnt) {\n      var checkedValue = props.checkedValue,\n          uncheckedValue = props.uncheckedValue;\n      var isDisabled = computeDisabled.value;\n\n      if (!isDisabled) {\n        var checked = evnt.target.checked;\n        var value = checked ? checkedValue : uncheckedValue;\n        var params = {\n          checked: checked,\n          value: value,\n          label: props.label\n        };\n\n        if ($xecheckboxgroup) {\n          $xecheckboxgroup.handleChecked(params, evnt);\n        } else {\n          emit('update:modelValue', value);\n          checkboxMethods.dispatchEvent('change', params, evnt);\n        }\n      }\n    };\n\n    checkboxMethods = {\n      dispatchEvent: function (type, params, evnt) {\n        emit(type, Object.assign({\n          $checkbox: $xecheckbox,\n          $event: evnt\n        }, params));\n      }\n    };\n    Object.assign($xecheckbox, checkboxMethods);\n\n    var renderVN = function () {\n      var _a;\n\n      var vSize = computeSize.value;\n      var isDisabled = computeDisabled.value;\n      return h('label', {\n        class: ['vxe-checkbox', (_a = {}, _a[\"size--\" + vSize] = vSize, _a['is--indeterminate'] = props.indeterminate, _a['is--disabled'] = isDisabled, _a)],\n        title: props.title\n      }, [h('input', {\n        class: 'vxe-checkbox--input',\n        type: 'checkbox',\n        disabled: isDisabled,\n        checked: computeChecked.value,\n        onChange: changeEvent\n      }), h('span', {\n        class: 'vxe-checkbox--icon'\n      }), h('span', {\n        class: 'vxe-checkbox--label'\n      }, slots.default ? slots.default({}) : getFuncText(props.content))]);\n    };\n\n    $xecheckbox.renderVN = renderVN;\n    return $xecheckbox;\n  },\n  render: function () {\n    return this.renderVN();\n  }\n});","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vxe-table/es/checkbox/src/checkbox.js"],"names":["defineComponent","h","computed","inject","XEUtils","getFuncText","GlobalConfig","useSize","name","props","modelValue","String","Number","Boolean","label","type","default","indeterminate","title","checkedValue","uncheckedValue","content","disabled","size","checkbox","emits","setup","context","slots","emit","xID","uniqueId","$xecheckbox","checkboxMethods","computeSize","$xecheckboxgroup","computeDisabled","computeChecked","includes","changeEvent","evnt","isDisabled","value","checked","target","params","handleChecked","dispatchEvent","Object","assign","$checkbox","$event","renderVN","_a","vSize","class","onChange","render"],"mappings":"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","sourcesContent":["import { defineComponent, h, computed, inject } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { getFuncText } from '../../tools/utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { useSize } from '../../hooks/size';\nexport default defineComponent({\n    name: 'VxeCheckbox',\n    props: {\n        modelValue: [String, Number, Boolean],\n        label: { type: [String, Number], default: null },\n        indeterminate: Boolean,\n        title: [String, Number],\n        checkedValue: { type: [String, Number, Boolean], default: true },\n        uncheckedValue: { type: [String, Number, Boolean], default: false },\n        content: [String, Number],\n        disabled: Boolean,\n        size: { type: String, default: function () { return GlobalConfig.checkbox.size || GlobalConfig.size; } }\n    },\n    emits: [\n        'update:modelValue',\n        'change'\n    ],\n    setup: function (props, context) {\n        var slots = context.slots, emit = context.emit;\n        var xID = XEUtils.uniqueId();\n        var $xecheckbox = {\n            xID: xID,\n            props: props,\n            context: context\n        };\n        var checkboxMethods = {};\n        var computeSize = useSize(props);\n        var $xecheckboxgroup = inject('$xecheckboxgroup', null);\n        var computeDisabled = computed(function () {\n            return props.disabled || ($xecheckboxgroup && $xecheckboxgroup.props.disabled);\n        });\n        var computeChecked = computed(function () {\n            return $xecheckboxgroup ? XEUtils.includes($xecheckboxgroup.props.modelValue, props.label) : props.modelValue === props.checkedValue;\n        });\n        var changeEvent = function (evnt) {\n            var checkedValue = props.checkedValue, uncheckedValue = props.uncheckedValue;\n            var isDisabled = computeDisabled.value;\n            if (!isDisabled) {\n                var checked = evnt.target.checked;\n                var value = checked ? checkedValue : uncheckedValue;\n                var params = { checked: checked, value: value, label: props.label };\n                if ($xecheckboxgroup) {\n                    $xecheckboxgroup.handleChecked(params, evnt);\n                }\n                else {\n                    emit('update:modelValue', value);\n                    checkboxMethods.dispatchEvent('change', params, evnt);\n                }\n            }\n        };\n        checkboxMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $checkbox: $xecheckbox, $event: evnt }, params));\n            }\n        };\n        Object.assign($xecheckbox, checkboxMethods);\n        var renderVN = function () {\n            var _a;\n            var vSize = computeSize.value;\n            var isDisabled = computeDisabled.value;\n            return h('label', {\n                class: ['vxe-checkbox', (_a = {},\n                        _a[\"size--\" + vSize] = vSize,\n                        _a['is--indeterminate'] = props.indeterminate,\n                        _a['is--disabled'] = isDisabled,\n                        _a)],\n                title: props.title\n            }, [\n                h('input', {\n                    class: 'vxe-checkbox--input',\n                    type: 'checkbox',\n                    disabled: isDisabled,\n                    checked: computeChecked.value,\n                    onChange: changeEvent\n                }),\n                h('span', {\n                    class: 'vxe-checkbox--icon'\n                }),\n                h('span', {\n                    class: 'vxe-checkbox--label'\n                }, slots.default ? slots.default({}) : getFuncText(props.content))\n            ]);\n        };\n        $xecheckbox.renderVN = renderVN;\n        return $xecheckbox;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n"]},"metadata":{},"sourceType":"module"}