{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { watch, computed, defineComponent } from \"vue\";\nimport { createNamespace, extend, pick, truthProp } from \"../utils\";\nimport { CHECKBOX_GROUP_KEY } from \"../checkbox-group/CheckboxGroup\";\nimport { useParent, useCustomFieldValue } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose\";\nimport Checker, { checkerProps } from \"./Checker\";\nconst [name, bem] = createNamespace(\"checkbox\");\nconst checkboxProps = extend({}, checkerProps, {\n  bindGroup: truthProp\n});\nvar stdin_default = defineComponent({\n  name,\n  props: checkboxProps,\n  emits: [\"change\", \"update:modelValue\"],\n\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const {\n      parent\n    } = useParent(CHECKBOX_GROUP_KEY);\n\n    const setParentValue = checked2 => {\n      const {\n        name: name2\n      } = props;\n      const {\n        max,\n        modelValue\n      } = parent.props;\n      const value = modelValue.slice();\n\n      if (checked2) {\n        const overlimit = max && value.length >= max;\n\n        if (!overlimit && !value.includes(name2)) {\n          value.push(name2);\n\n          if (props.bindGroup) {\n            parent.updateValue(value);\n          }\n        }\n      } else {\n        const index = value.indexOf(name2);\n\n        if (index !== -1) {\n          value.splice(index, 1);\n\n          if (props.bindGroup) {\n            parent.updateValue(value);\n          }\n        }\n      }\n    };\n\n    const checked = computed(() => {\n      if (parent && props.bindGroup) {\n        return parent.props.modelValue.indexOf(props.name) !== -1;\n      }\n\n      return !!props.modelValue;\n    });\n\n    const toggle = (newValue = !checked.value) => {\n      if (parent && props.bindGroup) {\n        setParentValue(newValue);\n      } else {\n        emit(\"update:modelValue\", newValue);\n      }\n    };\n\n    watch(() => props.modelValue, value => emit(\"change\", value));\n    useExpose({\n      toggle,\n      props,\n      checked\n    });\n    useCustomFieldValue(() => props.modelValue);\n    return () => _createVNode(Checker, _mergeProps({\n      \"bem\": bem,\n      \"role\": \"checkbox\",\n      \"parent\": parent,\n      \"checked\": checked.value,\n      \"onToggle\": toggle\n    }, props), pick(slots, [\"default\", \"icon\"]));\n  }\n\n});\nexport { stdin_default as default };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/checkbox/Checkbox.js"],"names":["createVNode","_createVNode","mergeProps","_mergeProps","watch","computed","defineComponent","createNamespace","extend","pick","truthProp","CHECKBOX_GROUP_KEY","useParent","useCustomFieldValue","useExpose","Checker","checkerProps","name","bem","checkboxProps","bindGroup","stdin_default","props","emits","setup","emit","slots","parent","setParentValue","checked2","name2","max","modelValue","value","slice","overlimit","length","includes","push","updateValue","index","indexOf","splice","checked","toggle","newValue","default"],"mappings":"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","sourcesContent":["import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { watch, computed, defineComponent } from \"vue\";\nimport { createNamespace, extend, pick, truthProp } from \"../utils\";\nimport { CHECKBOX_GROUP_KEY } from \"../checkbox-group/CheckboxGroup\";\nimport { useParent, useCustomFieldValue } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose\";\nimport Checker, { checkerProps } from \"./Checker\";\nconst [name, bem] = createNamespace(\"checkbox\");\nconst checkboxProps = extend({}, checkerProps, {\n  bindGroup: truthProp\n});\nvar stdin_default = defineComponent({\n  name,\n  props: checkboxProps,\n  emits: [\"change\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const {\n      parent\n    } = useParent(CHECKBOX_GROUP_KEY);\n    const setParentValue = (checked2) => {\n      const {\n        name: name2\n      } = props;\n      const {\n        max,\n        modelValue\n      } = parent.props;\n      const value = modelValue.slice();\n      if (checked2) {\n        const overlimit = max && value.length >= max;\n        if (!overlimit && !value.includes(name2)) {\n          value.push(name2);\n          if (props.bindGroup) {\n            parent.updateValue(value);\n          }\n        }\n      } else {\n        const index = value.indexOf(name2);\n        if (index !== -1) {\n          value.splice(index, 1);\n          if (props.bindGroup) {\n            parent.updateValue(value);\n          }\n        }\n      }\n    };\n    const checked = computed(() => {\n      if (parent && props.bindGroup) {\n        return parent.props.modelValue.indexOf(props.name) !== -1;\n      }\n      return !!props.modelValue;\n    });\n    const toggle = (newValue = !checked.value) => {\n      if (parent && props.bindGroup) {\n        setParentValue(newValue);\n      } else {\n        emit(\"update:modelValue\", newValue);\n      }\n    };\n    watch(() => props.modelValue, (value) => emit(\"change\", value));\n    useExpose({\n      toggle,\n      props,\n      checked\n    });\n    useCustomFieldValue(() => props.modelValue);\n    return () => _createVNode(Checker, _mergeProps({\n      \"bem\": bem,\n      \"role\": \"checkbox\",\n      \"parent\": parent,\n      \"checked\": checked.value,\n      \"onToggle\": toggle\n    }, props), pick(slots, [\"default\", \"icon\"]));\n  }\n});\nexport {\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}