{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { toArray } from './typeUtil';\n/**\n * Convert name to internal supported format.\n * This function should keep since we still thinking if need support like `a.b.c` format.\n * 'a' => ['a']\n * 123 => [123]\n * ['a', 123] => ['a', 123]\n */\n\nexport function getNamePath(path) {\n  return toArray(path);\n}\nexport function containsNamePath(namePathList, namePath) {\n  return namePathList && namePathList.some(function (path) {\n    return matchNamePath(path, namePath);\n  });\n}\n\nfunction isObject(obj) {\n  return _typeof(obj) === 'object' && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;\n}\n/**\n * Copy values into store and return a new values object\n * ({ a: 1, b: { c: 2 } }, { a: 4, b: { d: 5 } }) => { a: 4, b: { c: 2, d: 5 } }\n */\n\n\nfunction internalSetValues(store, values) {\n  var newStore = Array.isArray(store) ? _toConsumableArray(store) : _extends({}, store);\n\n  if (!values) {\n    return newStore;\n  }\n\n  Object.keys(values).forEach(function (key) {\n    var prevValue = newStore[key];\n    var value = values[key]; // If both are object (but target is not array), we use recursion to set deep value\n\n    var recursive = isObject(prevValue) && isObject(value);\n    newStore[key] = recursive ? internalSetValues(prevValue, value || {}) : value;\n  });\n  return newStore;\n}\n\nexport function setValues(store) {\n  for (var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    restValues[_key - 1] = arguments[_key];\n  }\n\n  return restValues.reduce(function (current, newStore) {\n    return internalSetValues(current, newStore);\n  }, store);\n}\nexport function matchNamePath(namePath, changedNamePath) {\n  if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {\n    return false;\n  }\n\n  return namePath.every(function (nameUnit, i) {\n    return changedNamePath[i] === nameUnit;\n  });\n}","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/node_modules/ant-design-vue/es/form/utils/valueUtil.js"],"names":["_extends","_toConsumableArray","_typeof","toArray","getNamePath","path","containsNamePath","namePathList","namePath","some","matchNamePath","isObject","obj","Object","getPrototypeOf","prototype","internalSetValues","store","values","newStore","Array","isArray","keys","forEach","key","prevValue","value","recursive","setValues","_len","arguments","length","restValues","_key","reduce","current","changedNamePath","every","nameUnit","i"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,kBAAP,MAA+B,8CAA/B;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAChC,SAAOF,OAAO,CAACE,IAAD,CAAd;AACD;AACD,OAAO,SAASC,gBAAT,CAA0BC,YAA1B,EAAwCC,QAAxC,EAAkD;AACvD,SAAOD,YAAY,IAAIA,YAAY,CAACE,IAAb,CAAkB,UAAUJ,IAAV,EAAgB;AACvD,WAAOK,aAAa,CAACL,IAAD,EAAOG,QAAP,CAApB;AACD,GAFsB,CAAvB;AAGD;;AAED,SAASG,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAOV,OAAO,CAACU,GAAD,CAAP,KAAiB,QAAjB,IAA6BA,GAAG,KAAK,IAArC,IAA6CC,MAAM,CAACC,cAAP,CAAsBF,GAAtB,MAA+BC,MAAM,CAACE,SAA1F;AACD;AACD;AACA;AACA;AACA;;;AAGA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,MAAlC,EAA0C;AACxC,MAAIC,QAAQ,GAAGC,KAAK,CAACC,OAAN,CAAcJ,KAAd,IAAuBhB,kBAAkB,CAACgB,KAAD,CAAzC,GAAmDjB,QAAQ,CAAC,EAAD,EAAKiB,KAAL,CAA1E;;AAEA,MAAI,CAACC,MAAL,EAAa;AACX,WAAOC,QAAP;AACD;;AAEDN,EAAAA,MAAM,CAACS,IAAP,CAAYJ,MAAZ,EAAoBK,OAApB,CAA4B,UAAUC,GAAV,EAAe;AACzC,QAAIC,SAAS,GAAGN,QAAQ,CAACK,GAAD,CAAxB;AACA,QAAIE,KAAK,GAAGR,MAAM,CAACM,GAAD,CAAlB,CAFyC,CAEhB;;AAEzB,QAAIG,SAAS,GAAGhB,QAAQ,CAACc,SAAD,CAAR,IAAuBd,QAAQ,CAACe,KAAD,CAA/C;AACAP,IAAAA,QAAQ,CAACK,GAAD,CAAR,GAAgBG,SAAS,GAAGX,iBAAiB,CAACS,SAAD,EAAYC,KAAK,IAAI,EAArB,CAApB,GAA+CA,KAAxE;AACD,GAND;AAOA,SAAOP,QAAP;AACD;;AAED,OAAO,SAASS,SAAT,CAAmBX,KAAnB,EAA0B;AAC/B,OAAK,IAAIY,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,UAAU,GAAG,IAAIZ,KAAJ,CAAUS,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAA1C,EAA8EI,IAAI,GAAG,CAA1F,EAA6FA,IAAI,GAAGJ,IAApG,EAA0GI,IAAI,EAA9G,EAAkH;AAChHD,IAAAA,UAAU,CAACC,IAAI,GAAG,CAAR,CAAV,GAAuBH,SAAS,CAACG,IAAD,CAAhC;AACD;;AAED,SAAOD,UAAU,CAACE,MAAX,CAAkB,UAAUC,OAAV,EAAmBhB,QAAnB,EAA6B;AACpD,WAAOH,iBAAiB,CAACmB,OAAD,EAAUhB,QAAV,CAAxB;AACD,GAFM,EAEJF,KAFI,CAAP;AAGD;AACD,OAAO,SAASP,aAAT,CAAuBF,QAAvB,EAAiC4B,eAAjC,EAAkD;AACvD,MAAI,CAAC5B,QAAD,IAAa,CAAC4B,eAAd,IAAiC5B,QAAQ,CAACuB,MAAT,KAAoBK,eAAe,CAACL,MAAzE,EAAiF;AAC/E,WAAO,KAAP;AACD;;AAED,SAAOvB,QAAQ,CAAC6B,KAAT,CAAe,UAAUC,QAAV,EAAoBC,CAApB,EAAuB;AAC3C,WAAOH,eAAe,CAACG,CAAD,CAAf,KAAuBD,QAA9B;AACD,GAFM,CAAP;AAGD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { toArray } from './typeUtil';\n/**\n * Convert name to internal supported format.\n * This function should keep since we still thinking if need support like `a.b.c` format.\n * 'a' => ['a']\n * 123 => [123]\n * ['a', 123] => ['a', 123]\n */\n\nexport function getNamePath(path) {\n  return toArray(path);\n}\nexport function containsNamePath(namePathList, namePath) {\n  return namePathList && namePathList.some(function (path) {\n    return matchNamePath(path, namePath);\n  });\n}\n\nfunction isObject(obj) {\n  return _typeof(obj) === 'object' && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;\n}\n/**\n * Copy values into store and return a new values object\n * ({ a: 1, b: { c: 2 } }, { a: 4, b: { d: 5 } }) => { a: 4, b: { c: 2, d: 5 } }\n */\n\n\nfunction internalSetValues(store, values) {\n  var newStore = Array.isArray(store) ? _toConsumableArray(store) : _extends({}, store);\n\n  if (!values) {\n    return newStore;\n  }\n\n  Object.keys(values).forEach(function (key) {\n    var prevValue = newStore[key];\n    var value = values[key]; // If both are object (but target is not array), we use recursion to set deep value\n\n    var recursive = isObject(prevValue) && isObject(value);\n    newStore[key] = recursive ? internalSetValues(prevValue, value || {}) : value;\n  });\n  return newStore;\n}\n\nexport function setValues(store) {\n  for (var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    restValues[_key - 1] = arguments[_key];\n  }\n\n  return restValues.reduce(function (current, newStore) {\n    return internalSetValues(current, newStore);\n  }, store);\n}\nexport function matchNamePath(namePath, changedNamePath) {\n  if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {\n    return false;\n  }\n\n  return namePath.every(function (nameUnit, i) {\n    return changedNamePath[i] === nameUnit;\n  });\n}"]},"metadata":{},"sourceType":"module"}