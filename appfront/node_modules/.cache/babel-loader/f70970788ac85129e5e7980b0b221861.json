{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { ref, watch, computed, defineComponent } from \"vue\";\nimport { pick, isDate, truthProp, numericProp, getScrollTop, makeStringProp, makeNumericProp } from \"../utils\";\nimport { t, bem, name, getToday, cloneDate, cloneDates, getPrevDay, getNextDay, compareDay, calcDateNum, compareMonth, getDayByOffset } from \"./utils\";\nimport { raf, useRect, onMountedOrActivated } from \"@vant/use\";\nimport { useRefs } from \"../composables/use-refs\";\nimport { useExpose } from \"../composables/use-expose\";\nimport { Popup } from \"../popup\";\nimport { Button } from \"../button\";\nimport { Toast } from \"../toast\";\nimport CalendarMonth from \"./CalendarMonth\";\nimport CalendarHeader from \"./CalendarHeader\";\nconst calendarProps = {\n  show: Boolean,\n  type: makeStringProp(\"single\"),\n  title: String,\n  color: String,\n  round: truthProp,\n  readonly: Boolean,\n  poppable: truthProp,\n  maxRange: makeNumericProp(null),\n  position: makeStringProp(\"bottom\"),\n  teleport: [String, Object],\n  showMark: truthProp,\n  showTitle: truthProp,\n  formatter: Function,\n  rowHeight: numericProp,\n  confirmText: String,\n  rangePrompt: String,\n  lazyRender: truthProp,\n  showConfirm: truthProp,\n  defaultDate: [Date, Array],\n  allowSameDay: Boolean,\n  showSubtitle: truthProp,\n  closeOnPopstate: truthProp,\n  showRangePrompt: truthProp,\n  confirmDisabledText: String,\n  closeOnClickOverlay: truthProp,\n  safeAreaInsetBottom: truthProp,\n  minDate: {\n    type: Date,\n    validator: isDate,\n    default: getToday\n  },\n  maxDate: {\n    type: Date,\n    validator: isDate,\n    default: () => {\n      const now = getToday();\n      return new Date(now.getFullYear(), now.getMonth() + 6, now.getDate());\n    }\n  },\n  firstDayOfWeek: {\n    type: numericProp,\n    default: 0,\n    validator: val => val >= 0 && val <= 6\n  }\n};\nvar stdin_default = defineComponent({\n  name,\n  props: calendarProps,\n  emits: [\"select\", \"confirm\", \"unselect\", \"month-show\", \"over-range\", \"update:show\", \"click-subtitle\"],\n\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const limitDateRange = (date, minDate = props.minDate, maxDate = props.maxDate) => {\n      if (compareDay(date, minDate) === -1) {\n        return minDate;\n      }\n\n      if (compareDay(date, maxDate) === 1) {\n        return maxDate;\n      }\n\n      return date;\n    };\n\n    const getInitialDate = (defaultDate = props.defaultDate) => {\n      const {\n        type,\n        minDate,\n        maxDate\n      } = props;\n\n      if (defaultDate === null) {\n        return defaultDate;\n      }\n\n      const now = getToday();\n\n      if (type === \"range\") {\n        if (!Array.isArray(defaultDate)) {\n          defaultDate = [];\n        }\n\n        const start = limitDateRange(defaultDate[0] || now, minDate, getPrevDay(maxDate));\n        const end = limitDateRange(defaultDate[1] || now, getNextDay(minDate));\n        return [start, end];\n      }\n\n      if (type === \"multiple\") {\n        if (Array.isArray(defaultDate)) {\n          return defaultDate.map(date => limitDateRange(date));\n        }\n\n        return [limitDateRange(now)];\n      }\n\n      if (!defaultDate || Array.isArray(defaultDate)) {\n        defaultDate = now;\n      }\n\n      return limitDateRange(defaultDate);\n    };\n\n    let bodyHeight;\n    const bodyRef = ref();\n    const subtitle = ref(\"\");\n    const currentDate = ref(getInitialDate());\n    const [monthRefs, setMonthRefs] = useRefs();\n    const dayOffset = computed(() => props.firstDayOfWeek ? +props.firstDayOfWeek % 7 : 0);\n    const months = computed(() => {\n      const months2 = [];\n      const cursor = new Date(props.minDate);\n      cursor.setDate(1);\n\n      do {\n        months2.push(new Date(cursor));\n        cursor.setMonth(cursor.getMonth() + 1);\n      } while (compareMonth(cursor, props.maxDate) !== 1);\n\n      return months2;\n    });\n    const buttonDisabled = computed(() => {\n      if (currentDate.value) {\n        if (props.type === \"range\") {\n          return !currentDate.value[0] || !currentDate.value[1];\n        }\n\n        if (props.type === \"multiple\") {\n          return !currentDate.value.length;\n        }\n      }\n\n      return !currentDate.value;\n    });\n\n    const onScroll = () => {\n      const top = getScrollTop(bodyRef.value);\n      const bottom = top + bodyHeight;\n      const heights = months.value.map((item, index) => monthRefs.value[index].getHeight());\n      const heightSum = heights.reduce((a, b) => a + b, 0);\n\n      if (bottom > heightSum && top > 0) {\n        return;\n      }\n\n      let height = 0;\n      let currentMonth;\n      const visibleRange = [-1, -1];\n\n      for (let i = 0; i < months.value.length; i++) {\n        const month = monthRefs.value[i];\n        const visible = height <= bottom && height + heights[i] >= top;\n\n        if (visible) {\n          visibleRange[1] = i;\n\n          if (!currentMonth) {\n            currentMonth = month;\n            visibleRange[0] = i;\n          }\n\n          if (!monthRefs.value[i].showed) {\n            monthRefs.value[i].showed = true;\n            emit(\"month-show\", {\n              date: month.date,\n              title: month.getTitle()\n            });\n          }\n        }\n\n        height += heights[i];\n      }\n\n      months.value.forEach((month, index) => {\n        const visible = index >= visibleRange[0] - 1 && index <= visibleRange[1] + 1;\n        monthRefs.value[index].setVisible(visible);\n      });\n\n      if (currentMonth) {\n        subtitle.value = currentMonth.getTitle();\n      }\n    };\n\n    const scrollToDate = targetDate => {\n      raf(() => {\n        months.value.some((month, index) => {\n          if (compareMonth(month, targetDate) === 0) {\n            if (bodyRef.value) {\n              monthRefs.value[index].scrollToDate(bodyRef.value, targetDate);\n            }\n\n            return true;\n          }\n\n          return false;\n        });\n        onScroll();\n      });\n    };\n\n    const scrollToCurrentDate = () => {\n      if (props.poppable && !props.show) {\n        return;\n      }\n\n      if (currentDate.value) {\n        const targetDate = props.type === \"single\" ? currentDate.value : currentDate.value[0];\n        scrollToDate(targetDate);\n      } else {\n        raf(onScroll);\n      }\n    };\n\n    const init = () => {\n      if (props.poppable && !props.show) {\n        return;\n      }\n\n      raf(() => {\n        bodyHeight = Math.floor(useRect(bodyRef).height);\n        scrollToCurrentDate();\n      });\n    };\n\n    const reset = (date = getInitialDate()) => {\n      currentDate.value = date;\n      scrollToCurrentDate();\n    };\n\n    const checkRange = date => {\n      const {\n        maxRange,\n        rangePrompt,\n        showRangePrompt\n      } = props;\n\n      if (maxRange && calcDateNum(date) > maxRange) {\n        if (showRangePrompt) {\n          Toast(rangePrompt || t(\"rangePrompt\", maxRange));\n        }\n\n        emit(\"over-range\");\n        return false;\n      }\n\n      return true;\n    };\n\n    const onConfirm = () => {\n      var _a;\n\n      return emit(\"confirm\", (_a = currentDate.value) != null ? _a : cloneDates(currentDate.value));\n    };\n\n    const select = (date, complete) => {\n      const setCurrentDate = date2 => {\n        currentDate.value = date2;\n        emit(\"select\", cloneDates(date2));\n      };\n\n      if (complete && props.type === \"range\") {\n        const valid = checkRange(date);\n\n        if (!valid) {\n          setCurrentDate([date[0], getDayByOffset(date[0], +props.maxRange - 1)]);\n          return;\n        }\n      }\n\n      setCurrentDate(date);\n\n      if (complete && !props.showConfirm) {\n        onConfirm();\n      }\n    };\n\n    const getDisabledDate = (disabledDays2, startDay, date) => {\n      var _a;\n\n      return (_a = disabledDays2.find(day => compareDay(startDay, day.date) === -1 && compareDay(day.date, date) === -1)) == null ? void 0 : _a.date;\n    };\n\n    const disabledDays = computed(() => monthRefs.value.reduce((arr, ref2) => {\n      var _a, _b;\n\n      arr.push(...((_b = (_a = ref2.disabledDays) == null ? void 0 : _a.value) != null ? _b : []));\n      return arr;\n    }, []));\n\n    const onClickDay = item => {\n      if (props.readonly || !item.date) {\n        return;\n      }\n\n      const {\n        date\n      } = item;\n      const {\n        type\n      } = props;\n\n      if (type === \"range\") {\n        if (!currentDate.value) {\n          select([date]);\n          return;\n        }\n\n        const [startDay, endDay] = currentDate.value;\n\n        if (startDay && !endDay) {\n          const compareToStart = compareDay(date, startDay);\n\n          if (compareToStart === 1) {\n            const disabledDay = getDisabledDate(disabledDays.value, startDay, date);\n\n            if (disabledDay) {\n              const endDay2 = getPrevDay(disabledDay);\n\n              if (compareDay(startDay, endDay2) === -1) {\n                select([startDay, endDay2]);\n              } else {\n                select([date]);\n              }\n            } else {\n              select([startDay, date], true);\n            }\n          } else if (compareToStart === -1) {\n            select([date]);\n          } else if (props.allowSameDay) {\n            select([date, date], true);\n          }\n        } else {\n          select([date]);\n        }\n      } else if (type === \"multiple\") {\n        if (!currentDate.value) {\n          select([date]);\n          return;\n        }\n\n        const dates = currentDate.value;\n        const selectedIndex = dates.findIndex(dateItem => compareDay(dateItem, date) === 0);\n\n        if (selectedIndex !== -1) {\n          const [unselectedDate] = dates.splice(selectedIndex, 1);\n          emit(\"unselect\", cloneDate(unselectedDate));\n        } else if (props.maxRange && dates.length >= props.maxRange) {\n          Toast(props.rangePrompt || t(\"rangePrompt\", props.maxRange));\n        } else {\n          select([...dates, date]);\n        }\n      } else {\n        select(date, true);\n      }\n    };\n\n    const updateShow = value => emit(\"update:show\", value);\n\n    const renderMonth = (date, index) => {\n      const showMonthTitle = index !== 0 || !props.showSubtitle;\n      return _createVNode(CalendarMonth, _mergeProps({\n        \"ref\": setMonthRefs(index),\n        \"date\": date,\n        \"currentDate\": currentDate.value,\n        \"showMonthTitle\": showMonthTitle,\n        \"firstDayOfWeek\": dayOffset.value\n      }, pick(props, [\"type\", \"color\", \"minDate\", \"maxDate\", \"showMark\", \"formatter\", \"rowHeight\", \"lazyRender\", \"showSubtitle\", \"allowSameDay\"]), {\n        \"onClick\": onClickDay\n      }), pick(slots, [\"top-info\", \"bottom-info\"]));\n    };\n\n    const renderFooterButton = () => {\n      if (slots.footer) {\n        return slots.footer();\n      }\n\n      if (props.showConfirm) {\n        const slot = slots[\"confirm-text\"];\n        const disabled = buttonDisabled.value;\n        const text = disabled ? props.confirmDisabledText : props.confirmText;\n        return _createVNode(Button, {\n          \"round\": true,\n          \"block\": true,\n          \"type\": \"danger\",\n          \"color\": props.color,\n          \"class\": bem(\"confirm\"),\n          \"disabled\": disabled,\n          \"nativeType\": \"button\",\n          \"onClick\": onConfirm\n        }, {\n          default: () => [slot ? slot({\n            disabled\n          }) : text || t(\"confirm\")]\n        });\n      }\n    };\n\n    const renderFooter = () => _createVNode(\"div\", {\n      \"class\": [bem(\"footer\"), {\n        \"van-safe-area-bottom\": props.safeAreaInsetBottom\n      }]\n    }, [renderFooterButton()]);\n\n    const renderCalendar = () => _createVNode(\"div\", {\n      \"class\": bem()\n    }, [_createVNode(CalendarHeader, {\n      \"title\": props.title,\n      \"subtitle\": subtitle.value,\n      \"showTitle\": props.showTitle,\n      \"showSubtitle\": props.showSubtitle,\n      \"firstDayOfWeek\": dayOffset.value,\n      \"onClick-subtitle\": event => emit(\"click-subtitle\", event)\n    }, pick(slots, [\"title\", \"subtitle\"])), _createVNode(\"div\", {\n      \"ref\": bodyRef,\n      \"class\": bem(\"body\"),\n      \"onScroll\": onScroll\n    }, [months.value.map(renderMonth)]), renderFooter()]);\n\n    watch(() => props.show, init);\n    watch(() => [props.type, props.minDate, props.maxDate], () => reset(getInitialDate(currentDate.value)));\n    watch(() => props.defaultDate, (value = null) => {\n      currentDate.value = value;\n      scrollToCurrentDate();\n    });\n    useExpose({\n      reset,\n      scrollToDate\n    });\n    onMountedOrActivated(init);\n    return () => {\n      if (props.poppable) {\n        return _createVNode(Popup, {\n          \"show\": props.show,\n          \"class\": bem(\"popup\"),\n          \"round\": props.round,\n          \"position\": props.position,\n          \"closeable\": props.showTitle || props.showSubtitle,\n          \"teleport\": props.teleport,\n          \"closeOnPopstate\": props.closeOnPopstate,\n          \"closeOnClickOverlay\": props.closeOnClickOverlay,\n          \"onUpdate:show\": updateShow\n        }, {\n          default: renderCalendar\n        });\n      }\n\n      return renderCalendar();\n    };\n  }\n\n});\nexport { stdin_default as default };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/calendar/Calendar.js"],"names":["createVNode","_createVNode","mergeProps","_mergeProps","ref","watch","computed","defineComponent","pick","isDate","truthProp","numericProp","getScrollTop","makeStringProp","makeNumericProp","t","bem","name","getToday","cloneDate","cloneDates","getPrevDay","getNextDay","compareDay","calcDateNum","compareMonth","getDayByOffset","raf","useRect","onMountedOrActivated","useRefs","useExpose","Popup","Button","Toast","CalendarMonth","CalendarHeader","calendarProps","show","Boolean","type","title","String","color","round","readonly","poppable","maxRange","position","teleport","Object","showMark","showTitle","formatter","Function","rowHeight","confirmText","rangePrompt","lazyRender","showConfirm","defaultDate","Date","Array","allowSameDay","showSubtitle","closeOnPopstate","showRangePrompt","confirmDisabledText","closeOnClickOverlay","safeAreaInsetBottom","minDate","validator","default","maxDate","now","getFullYear","getMonth","getDate","firstDayOfWeek","val","stdin_default","props","emits","setup","emit","slots","limitDateRange","date","getInitialDate","isArray","start","end","map","bodyHeight","bodyRef","subtitle","currentDate","monthRefs","setMonthRefs","dayOffset","months","months2","cursor","setDate","push","setMonth","buttonDisabled","value","length","onScroll","top","bottom","heights","item","index","getHeight","heightSum","reduce","a","b","height","currentMonth","visibleRange","i","month","visible","showed","getTitle","forEach","setVisible","scrollToDate","targetDate","some","scrollToCurrentDate","init","Math","floor","reset","checkRange","onConfirm","_a","select","complete","setCurrentDate","date2","valid","getDisabledDate","disabledDays2","startDay","find","day","disabledDays","arr","ref2","_b","onClickDay","endDay","compareToStart","disabledDay","endDay2","dates","selectedIndex","findIndex","dateItem","unselectedDate","splice","updateShow","renderMonth","showMonthTitle","renderFooterButton","footer","slot","disabled","text","renderFooter","renderCalendar","event"],"mappings":"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","sourcesContent":["import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { ref, watch, computed, defineComponent } from \"vue\";\nimport { pick, isDate, truthProp, numericProp, getScrollTop, makeStringProp, makeNumericProp } from \"../utils\";\nimport { t, bem, name, getToday, cloneDate, cloneDates, getPrevDay, getNextDay, compareDay, calcDateNum, compareMonth, getDayByOffset } from \"./utils\";\nimport { raf, useRect, onMountedOrActivated } from \"@vant/use\";\nimport { useRefs } from \"../composables/use-refs\";\nimport { useExpose } from \"../composables/use-expose\";\nimport { Popup } from \"../popup\";\nimport { Button } from \"../button\";\nimport { Toast } from \"../toast\";\nimport CalendarMonth from \"./CalendarMonth\";\nimport CalendarHeader from \"./CalendarHeader\";\nconst calendarProps = {\n  show: Boolean,\n  type: makeStringProp(\"single\"),\n  title: String,\n  color: String,\n  round: truthProp,\n  readonly: Boolean,\n  poppable: truthProp,\n  maxRange: makeNumericProp(null),\n  position: makeStringProp(\"bottom\"),\n  teleport: [String, Object],\n  showMark: truthProp,\n  showTitle: truthProp,\n  formatter: Function,\n  rowHeight: numericProp,\n  confirmText: String,\n  rangePrompt: String,\n  lazyRender: truthProp,\n  showConfirm: truthProp,\n  defaultDate: [Date, Array],\n  allowSameDay: Boolean,\n  showSubtitle: truthProp,\n  closeOnPopstate: truthProp,\n  showRangePrompt: truthProp,\n  confirmDisabledText: String,\n  closeOnClickOverlay: truthProp,\n  safeAreaInsetBottom: truthProp,\n  minDate: {\n    type: Date,\n    validator: isDate,\n    default: getToday\n  },\n  maxDate: {\n    type: Date,\n    validator: isDate,\n    default: () => {\n      const now = getToday();\n      return new Date(now.getFullYear(), now.getMonth() + 6, now.getDate());\n    }\n  },\n  firstDayOfWeek: {\n    type: numericProp,\n    default: 0,\n    validator: (val) => val >= 0 && val <= 6\n  }\n};\nvar stdin_default = defineComponent({\n  name,\n  props: calendarProps,\n  emits: [\"select\", \"confirm\", \"unselect\", \"month-show\", \"over-range\", \"update:show\", \"click-subtitle\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const limitDateRange = (date, minDate = props.minDate, maxDate = props.maxDate) => {\n      if (compareDay(date, minDate) === -1) {\n        return minDate;\n      }\n      if (compareDay(date, maxDate) === 1) {\n        return maxDate;\n      }\n      return date;\n    };\n    const getInitialDate = (defaultDate = props.defaultDate) => {\n      const {\n        type,\n        minDate,\n        maxDate\n      } = props;\n      if (defaultDate === null) {\n        return defaultDate;\n      }\n      const now = getToday();\n      if (type === \"range\") {\n        if (!Array.isArray(defaultDate)) {\n          defaultDate = [];\n        }\n        const start = limitDateRange(defaultDate[0] || now, minDate, getPrevDay(maxDate));\n        const end = limitDateRange(defaultDate[1] || now, getNextDay(minDate));\n        return [start, end];\n      }\n      if (type === \"multiple\") {\n        if (Array.isArray(defaultDate)) {\n          return defaultDate.map((date) => limitDateRange(date));\n        }\n        return [limitDateRange(now)];\n      }\n      if (!defaultDate || Array.isArray(defaultDate)) {\n        defaultDate = now;\n      }\n      return limitDateRange(defaultDate);\n    };\n    let bodyHeight;\n    const bodyRef = ref();\n    const subtitle = ref(\"\");\n    const currentDate = ref(getInitialDate());\n    const [monthRefs, setMonthRefs] = useRefs();\n    const dayOffset = computed(() => props.firstDayOfWeek ? +props.firstDayOfWeek % 7 : 0);\n    const months = computed(() => {\n      const months2 = [];\n      const cursor = new Date(props.minDate);\n      cursor.setDate(1);\n      do {\n        months2.push(new Date(cursor));\n        cursor.setMonth(cursor.getMonth() + 1);\n      } while (compareMonth(cursor, props.maxDate) !== 1);\n      return months2;\n    });\n    const buttonDisabled = computed(() => {\n      if (currentDate.value) {\n        if (props.type === \"range\") {\n          return !currentDate.value[0] || !currentDate.value[1];\n        }\n        if (props.type === \"multiple\") {\n          return !currentDate.value.length;\n        }\n      }\n      return !currentDate.value;\n    });\n    const onScroll = () => {\n      const top = getScrollTop(bodyRef.value);\n      const bottom = top + bodyHeight;\n      const heights = months.value.map((item, index) => monthRefs.value[index].getHeight());\n      const heightSum = heights.reduce((a, b) => a + b, 0);\n      if (bottom > heightSum && top > 0) {\n        return;\n      }\n      let height = 0;\n      let currentMonth;\n      const visibleRange = [-1, -1];\n      for (let i = 0; i < months.value.length; i++) {\n        const month = monthRefs.value[i];\n        const visible = height <= bottom && height + heights[i] >= top;\n        if (visible) {\n          visibleRange[1] = i;\n          if (!currentMonth) {\n            currentMonth = month;\n            visibleRange[0] = i;\n          }\n          if (!monthRefs.value[i].showed) {\n            monthRefs.value[i].showed = true;\n            emit(\"month-show\", {\n              date: month.date,\n              title: month.getTitle()\n            });\n          }\n        }\n        height += heights[i];\n      }\n      months.value.forEach((month, index) => {\n        const visible = index >= visibleRange[0] - 1 && index <= visibleRange[1] + 1;\n        monthRefs.value[index].setVisible(visible);\n      });\n      if (currentMonth) {\n        subtitle.value = currentMonth.getTitle();\n      }\n    };\n    const scrollToDate = (targetDate) => {\n      raf(() => {\n        months.value.some((month, index) => {\n          if (compareMonth(month, targetDate) === 0) {\n            if (bodyRef.value) {\n              monthRefs.value[index].scrollToDate(bodyRef.value, targetDate);\n            }\n            return true;\n          }\n          return false;\n        });\n        onScroll();\n      });\n    };\n    const scrollToCurrentDate = () => {\n      if (props.poppable && !props.show) {\n        return;\n      }\n      if (currentDate.value) {\n        const targetDate = props.type === \"single\" ? currentDate.value : currentDate.value[0];\n        scrollToDate(targetDate);\n      } else {\n        raf(onScroll);\n      }\n    };\n    const init = () => {\n      if (props.poppable && !props.show) {\n        return;\n      }\n      raf(() => {\n        bodyHeight = Math.floor(useRect(bodyRef).height);\n        scrollToCurrentDate();\n      });\n    };\n    const reset = (date = getInitialDate()) => {\n      currentDate.value = date;\n      scrollToCurrentDate();\n    };\n    const checkRange = (date) => {\n      const {\n        maxRange,\n        rangePrompt,\n        showRangePrompt\n      } = props;\n      if (maxRange && calcDateNum(date) > maxRange) {\n        if (showRangePrompt) {\n          Toast(rangePrompt || t(\"rangePrompt\", maxRange));\n        }\n        emit(\"over-range\");\n        return false;\n      }\n      return true;\n    };\n    const onConfirm = () => {\n      var _a;\n      return emit(\"confirm\", (_a = currentDate.value) != null ? _a : cloneDates(currentDate.value));\n    };\n    const select = (date, complete) => {\n      const setCurrentDate = (date2) => {\n        currentDate.value = date2;\n        emit(\"select\", cloneDates(date2));\n      };\n      if (complete && props.type === \"range\") {\n        const valid = checkRange(date);\n        if (!valid) {\n          setCurrentDate([date[0], getDayByOffset(date[0], +props.maxRange - 1)]);\n          return;\n        }\n      }\n      setCurrentDate(date);\n      if (complete && !props.showConfirm) {\n        onConfirm();\n      }\n    };\n    const getDisabledDate = (disabledDays2, startDay, date) => {\n      var _a;\n      return (_a = disabledDays2.find((day) => compareDay(startDay, day.date) === -1 && compareDay(day.date, date) === -1)) == null ? void 0 : _a.date;\n    };\n    const disabledDays = computed(() => monthRefs.value.reduce((arr, ref2) => {\n      var _a, _b;\n      arr.push(...(_b = (_a = ref2.disabledDays) == null ? void 0 : _a.value) != null ? _b : []);\n      return arr;\n    }, []));\n    const onClickDay = (item) => {\n      if (props.readonly || !item.date) {\n        return;\n      }\n      const {\n        date\n      } = item;\n      const {\n        type\n      } = props;\n      if (type === \"range\") {\n        if (!currentDate.value) {\n          select([date]);\n          return;\n        }\n        const [startDay, endDay] = currentDate.value;\n        if (startDay && !endDay) {\n          const compareToStart = compareDay(date, startDay);\n          if (compareToStart === 1) {\n            const disabledDay = getDisabledDate(disabledDays.value, startDay, date);\n            if (disabledDay) {\n              const endDay2 = getPrevDay(disabledDay);\n              if (compareDay(startDay, endDay2) === -1) {\n                select([startDay, endDay2]);\n              } else {\n                select([date]);\n              }\n            } else {\n              select([startDay, date], true);\n            }\n          } else if (compareToStart === -1) {\n            select([date]);\n          } else if (props.allowSameDay) {\n            select([date, date], true);\n          }\n        } else {\n          select([date]);\n        }\n      } else if (type === \"multiple\") {\n        if (!currentDate.value) {\n          select([date]);\n          return;\n        }\n        const dates = currentDate.value;\n        const selectedIndex = dates.findIndex((dateItem) => compareDay(dateItem, date) === 0);\n        if (selectedIndex !== -1) {\n          const [unselectedDate] = dates.splice(selectedIndex, 1);\n          emit(\"unselect\", cloneDate(unselectedDate));\n        } else if (props.maxRange && dates.length >= props.maxRange) {\n          Toast(props.rangePrompt || t(\"rangePrompt\", props.maxRange));\n        } else {\n          select([...dates, date]);\n        }\n      } else {\n        select(date, true);\n      }\n    };\n    const updateShow = (value) => emit(\"update:show\", value);\n    const renderMonth = (date, index) => {\n      const showMonthTitle = index !== 0 || !props.showSubtitle;\n      return _createVNode(CalendarMonth, _mergeProps({\n        \"ref\": setMonthRefs(index),\n        \"date\": date,\n        \"currentDate\": currentDate.value,\n        \"showMonthTitle\": showMonthTitle,\n        \"firstDayOfWeek\": dayOffset.value\n      }, pick(props, [\"type\", \"color\", \"minDate\", \"maxDate\", \"showMark\", \"formatter\", \"rowHeight\", \"lazyRender\", \"showSubtitle\", \"allowSameDay\"]), {\n        \"onClick\": onClickDay\n      }), pick(slots, [\"top-info\", \"bottom-info\"]));\n    };\n    const renderFooterButton = () => {\n      if (slots.footer) {\n        return slots.footer();\n      }\n      if (props.showConfirm) {\n        const slot = slots[\"confirm-text\"];\n        const disabled = buttonDisabled.value;\n        const text = disabled ? props.confirmDisabledText : props.confirmText;\n        return _createVNode(Button, {\n          \"round\": true,\n          \"block\": true,\n          \"type\": \"danger\",\n          \"color\": props.color,\n          \"class\": bem(\"confirm\"),\n          \"disabled\": disabled,\n          \"nativeType\": \"button\",\n          \"onClick\": onConfirm\n        }, {\n          default: () => [slot ? slot({\n            disabled\n          }) : text || t(\"confirm\")]\n        });\n      }\n    };\n    const renderFooter = () => _createVNode(\"div\", {\n      \"class\": [bem(\"footer\"), {\n        \"van-safe-area-bottom\": props.safeAreaInsetBottom\n      }]\n    }, [renderFooterButton()]);\n    const renderCalendar = () => _createVNode(\"div\", {\n      \"class\": bem()\n    }, [_createVNode(CalendarHeader, {\n      \"title\": props.title,\n      \"subtitle\": subtitle.value,\n      \"showTitle\": props.showTitle,\n      \"showSubtitle\": props.showSubtitle,\n      \"firstDayOfWeek\": dayOffset.value,\n      \"onClick-subtitle\": (event) => emit(\"click-subtitle\", event)\n    }, pick(slots, [\"title\", \"subtitle\"])), _createVNode(\"div\", {\n      \"ref\": bodyRef,\n      \"class\": bem(\"body\"),\n      \"onScroll\": onScroll\n    }, [months.value.map(renderMonth)]), renderFooter()]);\n    watch(() => props.show, init);\n    watch(() => [props.type, props.minDate, props.maxDate], () => reset(getInitialDate(currentDate.value)));\n    watch(() => props.defaultDate, (value = null) => {\n      currentDate.value = value;\n      scrollToCurrentDate();\n    });\n    useExpose({\n      reset,\n      scrollToDate\n    });\n    onMountedOrActivated(init);\n    return () => {\n      if (props.poppable) {\n        return _createVNode(Popup, {\n          \"show\": props.show,\n          \"class\": bem(\"popup\"),\n          \"round\": props.round,\n          \"position\": props.position,\n          \"closeable\": props.showTitle || props.showSubtitle,\n          \"teleport\": props.teleport,\n          \"closeOnPopstate\": props.closeOnPopstate,\n          \"closeOnClickOverlay\": props.closeOnClickOverlay,\n          \"onUpdate:show\": updateShow\n        }, {\n          default: renderCalendar\n        });\n      }\n      return renderCalendar();\n    };\n  }\n});\nexport {\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}