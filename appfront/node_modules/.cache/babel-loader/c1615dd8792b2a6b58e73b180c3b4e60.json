{"ast":null,"code":"var helperCreateTreeFunc = require('./helperCreateTreeFunc');\n\nvar each = require('./each');\n\nfunction eachTreeItem(parent, obj, iterate, context, path, node, parseChildren, opts) {\n  var paths, nodes;\n  each(obj, function (item, index) {\n    paths = path.concat(['' + index]);\n    nodes = node.concat([item]);\n    iterate.call(context, item, index, obj, paths, parent, nodes);\n\n    if (item && parseChildren) {\n      paths.push(parseChildren);\n      eachTreeItem(item, item[parseChildren], iterate, context, paths, nodes, parseChildren, opts);\n    }\n  });\n}\n/**\r\n  * 从树结构中遍历数据的键、值、路径\r\n  *\r\n  * @param {Object} obj 对象/数组\r\n  * @param {Function} iterate(item, index, items, path, parent, nodes) 回调\r\n  * @param {Object} options {children: 'children', mapChildren: 'children}\r\n  * @param {Object} context 上下文\r\n  */\n\n\nvar eachTree = helperCreateTreeFunc(eachTreeItem);\nmodule.exports = eachTree;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/xe-utils/eachTree.js"],"names":["helperCreateTreeFunc","require","each","eachTreeItem","parent","obj","iterate","context","path","node","parseChildren","opts","paths","nodes","item","index","concat","call","push","eachTree","module","exports"],"mappings":"AAAA,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAlB;;AAEA,SAASE,YAAT,CAAuBC,MAAvB,EAA+BC,GAA/B,EAAoCC,OAApC,EAA6CC,OAA7C,EAAsDC,IAAtD,EAA4DC,IAA5D,EAAkEC,aAAlE,EAAiFC,IAAjF,EAAuF;AACrF,MAAIC,KAAJ,EAAWC,KAAX;AACAX,EAAAA,IAAI,CAACG,GAAD,EAAM,UAAUS,IAAV,EAAgBC,KAAhB,EAAuB;AAC/BH,IAAAA,KAAK,GAAGJ,IAAI,CAACQ,MAAL,CAAY,CAAC,KAAKD,KAAN,CAAZ,CAAR;AACAF,IAAAA,KAAK,GAAGJ,IAAI,CAACO,MAAL,CAAY,CAACF,IAAD,CAAZ,CAAR;AACAR,IAAAA,OAAO,CAACW,IAAR,CAAaV,OAAb,EAAsBO,IAAtB,EAA4BC,KAA5B,EAAmCV,GAAnC,EAAwCO,KAAxC,EAA+CR,MAA/C,EAAuDS,KAAvD;;AACA,QAAIC,IAAI,IAAIJ,aAAZ,EAA2B;AACzBE,MAAAA,KAAK,CAACM,IAAN,CAAWR,aAAX;AACAP,MAAAA,YAAY,CAACW,IAAD,EAAOA,IAAI,CAACJ,aAAD,CAAX,EAA4BJ,OAA5B,EAAqCC,OAArC,EAA8CK,KAA9C,EAAqDC,KAArD,EAA4DH,aAA5D,EAA2EC,IAA3E,CAAZ;AACD;AACF,GARG,CAAJ;AASD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIQ,QAAQ,GAAGnB,oBAAoB,CAACG,YAAD,CAAnC;AAEAiB,MAAM,CAACC,OAAP,GAAiBF,QAAjB","sourcesContent":["var helperCreateTreeFunc = require('./helperCreateTreeFunc')\r\nvar each = require('./each')\r\n\r\nfunction eachTreeItem (parent, obj, iterate, context, path, node, parseChildren, opts) {\r\n  var paths, nodes\r\n  each(obj, function (item, index) {\r\n    paths = path.concat(['' + index])\r\n    nodes = node.concat([item])\r\n    iterate.call(context, item, index, obj, paths, parent, nodes)\r\n    if (item && parseChildren) {\r\n      paths.push(parseChildren)\r\n      eachTreeItem(item, item[parseChildren], iterate, context, paths, nodes, parseChildren, opts)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n  * 从树结构中遍历数据的键、值、路径\r\n  *\r\n  * @param {Object} obj 对象/数组\r\n  * @param {Function} iterate(item, index, items, path, parent, nodes) 回调\r\n  * @param {Object} options {children: 'children', mapChildren: 'children}\r\n  * @param {Object} context 上下文\r\n  */\r\nvar eachTree = helperCreateTreeFunc(eachTreeItem)\r\n\r\nmodule.exports = eachTree\r\n"]},"metadata":{},"sourceType":"script"}