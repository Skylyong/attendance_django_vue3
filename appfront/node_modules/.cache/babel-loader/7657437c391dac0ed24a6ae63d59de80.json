{"ast":null,"code":"/**axios封装\n * 请求拦截、相应拦截、错误统一处理\n */\nimport axios from 'axios';\nimport QS from 'qs';\nimport { Toast } from 'vant';\nimport store from '../store/index'; // 环境的切换\n\nconsole.log(process.env.NODE_ENV);\n\nif (process.env.NODE_ENV == 'development') {\n  axios.defaults.baseURL = 'http://127.0.0.1:8000/api';\n} else if (process.env.NODE_ENV == 'http://127.0.0.1:8000/api') {\n  axios.defaults.baseURL = '';\n} else if (process.env.NODE_ENV == 'production') {\n  axios.defaults.baseURL = 'http://api.123dailu.com/';\n} // 请求超时时间\n\n\naxios.defaults.timeout = 10000;\naxios.defaults.xsrfCookieName = 'csrfmiddlewaretoken';\naxios.defaults.xsrfHeaderName = 'X-XSRF-TOKEN';\naxios.defaults.withCredentials = true; // post请求头\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\naxios.get('/login/', {\n  withCredentials: true\n}).then(response => {\n  const regex = /.*csrftoken=([^;.]*).*$/;\n  var CSRFToken = document.cookie.match(regex) === null ? null : document.cookie.match(regex)[1];\n  console.log(response);\n  axios.defaults.headers['X-CSRFToken'] = CSRFToken; //getCsfrKey()\n}); // 请求拦截器\n\naxios.interceptors.request.use(config => {\n  // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\n  // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\n  const token = store.state.token;\n  token && (config.headers.Authorization = token);\n  return config;\n}, error => {\n  return Promise.error(error);\n}); // 响应拦截器\n\naxios.interceptors.response.use(response => {\n  if (response.status === 200) {\n    return Promise.resolve(response);\n  } else {\n    return Promise.reject(response);\n  }\n}, // 服务器状态码不是200的情况    \nerror => {\n  if (error.response.status) {\n    switch (error.response.status) {\n      // 401: 未登录                \n      // 未登录则跳转登录页面，并携带当前页面的路径                \n      // 在登录成功后返回当前页面，这一步需要在登录页操作。                \n      case 401:\n        router.replace({\n          path: '/login',\n          query: {\n            redirect: router.currentRoute.fullPath\n          }\n        });\n        break;\n      // 403 token过期                \n      // 登录过期对用户进行提示                \n      // 清除本地token和清空vuex中token对象                \n      // 跳转登录页面                \n\n      case 403:\n        Toast({\n          message: '登录过期，请重新登录',\n          duration: 1000,\n          forbidClick: true\n        }); // 清除token                    \n\n        localStorage.removeItem('token');\n        store.commit('loginSuccess', null); // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\n\n        setTimeout(() => {\n          router.replace({\n            path: '/login',\n            query: {\n              redirect: router.currentRoute.fullPath\n            }\n          });\n        }, 1000);\n        break;\n      // 404请求不存在                \n\n      case 404:\n        Toast({\n          message: '网络请求不存在',\n          duration: 1500,\n          forbidClick: true\n        });\n        break;\n      // 其他错误，直接抛出错误提示                \n\n      default:\n        Toast({\n          message: error.response.data.message,\n          duration: 1500,\n          forbidClick: true\n        });\n    }\n\n    return Promise.reject(error.response);\n  }\n});\n/** \n * get方法，对应get请求 \n * @param {String} url [请求的url地址] \n * @param {Object} params [请求时携带的参数] \n */\n\nexport function get(url, params) {\n  return new Promise((resolve, reject) => {\n    axios.get(url, {\n      params: params\n    }).then(res => {\n      resolve(res.data);\n    }).catch(err => {\n      reject(err.data);\n    });\n  });\n}\n/** \n * post方法，对应post请求 \n * @param {String} url [请求的url地址] \n * @param {Object} params [请求时携带的参数] \n */\n\nexport function post(url, params) {\n  return new Promise((resolve, reject) => {\n    axios.post(url, QS.stringify(params)).then(res => {\n      resolve(res.data);\n    }).catch(err => {\n      reject(err.data);\n    });\n  });\n}","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/src/api/http.js"],"names":["axios","QS","Toast","store","console","log","process","env","NODE_ENV","defaults","baseURL","timeout","xsrfCookieName","xsrfHeaderName","withCredentials","headers","post","get","then","response","regex","CSRFToken","document","cookie","match","interceptors","request","use","config","token","state","Authorization","error","Promise","status","resolve","reject","router","replace","path","query","redirect","currentRoute","fullPath","message","duration","forbidClick","localStorage","removeItem","commit","setTimeout","data","url","params","res","catch","err","stringify"],"mappings":"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","sourcesContent":["/**axios封装\n * 请求拦截、相应拦截、错误统一处理\n */\n import axios from 'axios';import QS from 'qs';\n import { Toast } from 'vant';\n import store from '../store/index'\n \n // 环境的切换\n console.log(process.env.NODE_ENV)\n if (process.env.NODE_ENV == 'development') {    \n     axios.defaults.baseURL = 'http://127.0.0.1:8000/api';\n } else if (process.env.NODE_ENV == 'http://127.0.0.1:8000/api') {    \n     axios.defaults.baseURL = '';\n } else if (process.env.NODE_ENV == 'production') {    \n     axios.defaults.baseURL = 'http://api.123dailu.com/';\n }\n \n // 请求超时时间\n axios.defaults.timeout = 10000;\n axios.defaults.xsrfCookieName = 'csrfmiddlewaretoken'\n axios.defaults.xsrfHeaderName = 'X-XSRF-TOKEN'\n axios.defaults.withCredentials = true\n \n // post请求头\n axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n \n\n axios.get('/login/',{withCredentials: true})\n        .then((response) => {\n                const regex = /.*csrftoken=([^;.]*).*$/ ;\n                var CSRFToken =  document.cookie.match(regex) === null ? null : document.cookie.match(regex)[1]\n          console.log(response)\n          axios.defaults.headers['X-CSRFToken'] = CSRFToken//getCsfrKey()\n        })\n\n\n\n // 请求拦截器\n axios.interceptors.request.use(    \n     config => {\n         // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\n         // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\n         const token = store.state.token;        \n         token && (config.headers.Authorization = token);        \n         return config;    \n     },    \n     error => {        \n         return Promise.error(error);    \n     })\n \n // 响应拦截器\n axios.interceptors.response.use(    \n     response => {        \n         if (response.status === 200) {            \n             return Promise.resolve(response);        \n         } else {            \n             return Promise.reject(response);        \n         }    \n     },\n     // 服务器状态码不是200的情况    \n     error => {        \n         if (error.response.status) {            \n             switch (error.response.status) {                \n                 // 401: 未登录                \n                 // 未登录则跳转登录页面，并携带当前页面的路径                \n                 // 在登录成功后返回当前页面，这一步需要在登录页操作。                \n                 case 401:                    \n                     router.replace({                        \n                         path: '/login',                        \n                         query: { redirect: router.currentRoute.fullPath } \n                     });\n                     break;\n                 // 403 token过期                \n                 // 登录过期对用户进行提示                \n                 // 清除本地token和清空vuex中token对象                \n                 // 跳转登录页面                \n                 case 403:                     \n                     Toast({                        \n                         message: '登录过期，请重新登录',                        \n                         duration: 1000,                        \n                         forbidClick: true                    \n                     });                    \n                     // 清除token                    \n                     localStorage.removeItem('token');                    \n                     store.commit('loginSuccess', null);                    \n                     // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\n                     setTimeout(() => {                        \n                         router.replace({                            \n                             path: '/login',                            \n                             query: { \n                                 redirect: router.currentRoute.fullPath \n                             }                        \n                         });                    \n                     }, 1000);                    \n                     break; \n                 // 404请求不存在                \n                 case 404:                    \n                     Toast({                        \n                         message: '网络请求不存在',                        \n                         duration: 1500,                        \n                         forbidClick: true                    \n                     });                    \n                 break;                \n                 // 其他错误，直接抛出错误提示                \n                 default:                    \n                     Toast({                        \n                         message: error.response.data.message,                        \n                         duration: 1500,                        \n                         forbidClick: true                    \n                     });            \n             }            \n             return Promise.reject(error.response);        \n         }       \n     }\n );\n /** \n  * get方法，对应get请求 \n  * @param {String} url [请求的url地址] \n  * @param {Object} params [请求时携带的参数] \n  */\n export function get(url, params){    \n     return new Promise((resolve, reject) =>{        \n         axios.get(url, {            \n             params: params        \n         })        \n         .then(res => {            \n             resolve(res.data);        \n         })        \n         .catch(err => {            \n             reject(err.data)        \n         })    \n     });\n }\n /** \n  * post方法，对应post请求 \n  * @param {String} url [请求的url地址] \n  * @param {Object} params [请求时携带的参数] \n  */\n export function post(url, params) {    \n     return new Promise((resolve, reject) => {         \n         axios.post(url, QS.stringify(params))        \n         .then(res => {            \n             resolve(res.data);        \n         })        \n         .catch(err => {            \n             reject(err.data)        \n         })    \n     });\n }\n "]},"metadata":{},"sourceType":"module"}