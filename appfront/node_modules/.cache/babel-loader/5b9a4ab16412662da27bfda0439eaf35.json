{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { ref, watch, computed, nextTick, onMounted, defineComponent } from \"vue\";\nimport { pick, clamp, extend, padZero, createNamespace, makeNumericProp } from \"../utils\";\nimport { times, sharedProps, pickerInheritKeys, proxyPickerMethods } from \"./utils\";\nimport { useExpose } from \"../composables/use-expose\";\nimport { Picker } from \"../picker\";\nconst [name] = createNamespace(\"time-picker\");\nvar stdin_default = defineComponent({\n  name,\n  props: extend({}, sharedProps, {\n    minHour: makeNumericProp(0),\n    maxHour: makeNumericProp(23),\n    minMinute: makeNumericProp(0),\n    maxMinute: makeNumericProp(59),\n    modelValue: String\n  }),\n  emits: [\"confirm\", \"cancel\", \"change\", \"update:modelValue\"],\n\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const formatValue = value => {\n      const {\n        minHour,\n        maxHour,\n        maxMinute,\n        minMinute\n      } = props;\n\n      if (!value) {\n        value = `${padZero(minHour)}:${padZero(minMinute)}`;\n      }\n\n      let [hour, minute] = value.split(\":\");\n      hour = padZero(clamp(+hour, +minHour, +maxHour));\n      minute = padZero(clamp(+minute, +minMinute, +maxMinute));\n      return `${hour}:${minute}`;\n    };\n\n    const picker = ref();\n    const currentDate = ref(formatValue(props.modelValue));\n    const ranges = computed(() => [{\n      type: \"hour\",\n      range: [+props.minHour, +props.maxHour]\n    }, {\n      type: \"minute\",\n      range: [+props.minMinute, +props.maxMinute]\n    }]);\n    const originColumns = computed(() => ranges.value.map(({\n      type,\n      range: rangeArr\n    }) => {\n      let values = times(rangeArr[1] - rangeArr[0] + 1, index => padZero(rangeArr[0] + index));\n\n      if (props.filter) {\n        values = props.filter(type, values);\n      }\n\n      return {\n        type,\n        values\n      };\n    }));\n    const columns = computed(() => originColumns.value.map(column => ({\n      values: column.values.map(value => props.formatter(column.type, value))\n    })));\n\n    const updateColumnValue = () => {\n      const pair = currentDate.value.split(\":\");\n      const values = [props.formatter(\"hour\", pair[0]), props.formatter(\"minute\", pair[1])];\n      nextTick(() => {\n        var _a;\n\n        (_a = picker.value) == null ? void 0 : _a.setValues(values);\n      });\n    };\n\n    const updateInnerValue = () => {\n      const [hourIndex, minuteIndex] = picker.value.getIndexes();\n      const [hourColumn, minuteColumn] = originColumns.value;\n      const hour = hourColumn.values[hourIndex] || hourColumn.values[0];\n      const minute = minuteColumn.values[minuteIndex] || minuteColumn.values[0];\n      currentDate.value = formatValue(`${hour}:${minute}`);\n      updateColumnValue();\n    };\n\n    const onConfirm = () => emit(\"confirm\", currentDate.value);\n\n    const onCancel = () => emit(\"cancel\");\n\n    const onChange = () => {\n      updateInnerValue();\n      nextTick(() => {\n        nextTick(() => emit(\"change\", currentDate.value));\n      });\n    };\n\n    onMounted(() => {\n      updateColumnValue();\n      nextTick(updateInnerValue);\n    });\n    watch(columns, updateColumnValue);\n    watch(() => [props.filter, props.maxHour, props.minMinute, props.maxMinute], updateInnerValue);\n    watch(() => props.minHour, () => {\n      nextTick(updateInnerValue);\n    });\n    watch(currentDate, value => emit(\"update:modelValue\", value));\n    watch(() => props.modelValue, value => {\n      value = formatValue(value);\n\n      if (value !== currentDate.value) {\n        currentDate.value = value;\n        updateColumnValue();\n      }\n    });\n    useExpose({\n      getPicker: () => picker.value && proxyPickerMethods(picker.value, updateInnerValue)\n    });\n    return () => _createVNode(Picker, _mergeProps({\n      \"ref\": picker,\n      \"columns\": columns.value,\n      \"onChange\": onChange,\n      \"onCancel\": onCancel,\n      \"onConfirm\": onConfirm\n    }, pick(props, pickerInheritKeys)), slots);\n  }\n\n});\nexport { stdin_default as default };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/datetime-picker/TimePicker.js"],"names":["createVNode","_createVNode","mergeProps","_mergeProps","ref","watch","computed","nextTick","onMounted","defineComponent","pick","clamp","extend","padZero","createNamespace","makeNumericProp","times","sharedProps","pickerInheritKeys","proxyPickerMethods","useExpose","Picker","name","stdin_default","props","minHour","maxHour","minMinute","maxMinute","modelValue","String","emits","setup","emit","slots","formatValue","value","hour","minute","split","picker","currentDate","ranges","type","range","originColumns","map","rangeArr","values","index","filter","columns","column","formatter","updateColumnValue","pair","_a","setValues","updateInnerValue","hourIndex","minuteIndex","getIndexes","hourColumn","minuteColumn","onConfirm","onCancel","onChange","getPicker","default"],"mappings":"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","sourcesContent":["import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { ref, watch, computed, nextTick, onMounted, defineComponent } from \"vue\";\nimport { pick, clamp, extend, padZero, createNamespace, makeNumericProp } from \"../utils\";\nimport { times, sharedProps, pickerInheritKeys, proxyPickerMethods } from \"./utils\";\nimport { useExpose } from \"../composables/use-expose\";\nimport { Picker } from \"../picker\";\nconst [name] = createNamespace(\"time-picker\");\nvar stdin_default = defineComponent({\n  name,\n  props: extend({}, sharedProps, {\n    minHour: makeNumericProp(0),\n    maxHour: makeNumericProp(23),\n    minMinute: makeNumericProp(0),\n    maxMinute: makeNumericProp(59),\n    modelValue: String\n  }),\n  emits: [\"confirm\", \"cancel\", \"change\", \"update:modelValue\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const formatValue = (value) => {\n      const {\n        minHour,\n        maxHour,\n        maxMinute,\n        minMinute\n      } = props;\n      if (!value) {\n        value = `${padZero(minHour)}:${padZero(minMinute)}`;\n      }\n      let [hour, minute] = value.split(\":\");\n      hour = padZero(clamp(+hour, +minHour, +maxHour));\n      minute = padZero(clamp(+minute, +minMinute, +maxMinute));\n      return `${hour}:${minute}`;\n    };\n    const picker = ref();\n    const currentDate = ref(formatValue(props.modelValue));\n    const ranges = computed(() => [{\n      type: \"hour\",\n      range: [+props.minHour, +props.maxHour]\n    }, {\n      type: \"minute\",\n      range: [+props.minMinute, +props.maxMinute]\n    }]);\n    const originColumns = computed(() => ranges.value.map(({\n      type,\n      range: rangeArr\n    }) => {\n      let values = times(rangeArr[1] - rangeArr[0] + 1, (index) => padZero(rangeArr[0] + index));\n      if (props.filter) {\n        values = props.filter(type, values);\n      }\n      return {\n        type,\n        values\n      };\n    }));\n    const columns = computed(() => originColumns.value.map((column) => ({\n      values: column.values.map((value) => props.formatter(column.type, value))\n    })));\n    const updateColumnValue = () => {\n      const pair = currentDate.value.split(\":\");\n      const values = [props.formatter(\"hour\", pair[0]), props.formatter(\"minute\", pair[1])];\n      nextTick(() => {\n        var _a;\n        (_a = picker.value) == null ? void 0 : _a.setValues(values);\n      });\n    };\n    const updateInnerValue = () => {\n      const [hourIndex, minuteIndex] = picker.value.getIndexes();\n      const [hourColumn, minuteColumn] = originColumns.value;\n      const hour = hourColumn.values[hourIndex] || hourColumn.values[0];\n      const minute = minuteColumn.values[minuteIndex] || minuteColumn.values[0];\n      currentDate.value = formatValue(`${hour}:${minute}`);\n      updateColumnValue();\n    };\n    const onConfirm = () => emit(\"confirm\", currentDate.value);\n    const onCancel = () => emit(\"cancel\");\n    const onChange = () => {\n      updateInnerValue();\n      nextTick(() => {\n        nextTick(() => emit(\"change\", currentDate.value));\n      });\n    };\n    onMounted(() => {\n      updateColumnValue();\n      nextTick(updateInnerValue);\n    });\n    watch(columns, updateColumnValue);\n    watch(() => [props.filter, props.maxHour, props.minMinute, props.maxMinute], updateInnerValue);\n    watch(() => props.minHour, () => {\n      nextTick(updateInnerValue);\n    });\n    watch(currentDate, (value) => emit(\"update:modelValue\", value));\n    watch(() => props.modelValue, (value) => {\n      value = formatValue(value);\n      if (value !== currentDate.value) {\n        currentDate.value = value;\n        updateColumnValue();\n      }\n    });\n    useExpose({\n      getPicker: () => picker.value && proxyPickerMethods(picker.value, updateInnerValue)\n    });\n    return () => _createVNode(Picker, _mergeProps({\n      \"ref\": picker,\n      \"columns\": columns.value,\n      \"onChange\": onChange,\n      \"onCancel\": onCancel,\n      \"onConfirm\": onConfirm\n    }, pick(props, pickerInheritKeys)), slots);\n  }\n});\nexport {\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}