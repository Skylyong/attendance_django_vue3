{"ast":null,"code":"var eachTree = require('./eachTree');\n/**\r\n  * 从树结构中根据回调过滤数据\r\n  *\r\n  * @param {Object} obj 对象/数组\r\n  * @param {Function} iterate(item, index, items, path, parent) 回调\r\n  * @param {Object} options {children: 'children'}\r\n  * @param {Object} context 上下文\r\n  * @return {Array}\r\n  */\n\n\nfunction filterTree(obj, iterate, options, context) {\n  var result = [];\n\n  if (obj && iterate) {\n    eachTree(obj, function (item, index, items, path, parent, nodes) {\n      if (iterate.call(context, item, index, items, path, parent, nodes)) {\n        result.push(item);\n      }\n    }, options);\n  }\n\n  return result;\n}\n\nmodule.exports = filterTree;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/xe-utils/filterTree.js"],"names":["eachTree","require","filterTree","obj","iterate","options","context","result","item","index","items","path","parent","nodes","call","push","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAqBC,GAArB,EAA0BC,OAA1B,EAAmCC,OAAnC,EAA4CC,OAA5C,EAAqD;AACnD,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAIJ,GAAG,IAAIC,OAAX,EAAoB;AAClBJ,IAAAA,QAAQ,CAACG,GAAD,EAAM,UAAUK,IAAV,EAAgBC,KAAhB,EAAuBC,KAAvB,EAA8BC,IAA9B,EAAoCC,MAApC,EAA4CC,KAA5C,EAAmD;AAC/D,UAAIT,OAAO,CAACU,IAAR,CAAaR,OAAb,EAAsBE,IAAtB,EAA4BC,KAA5B,EAAmCC,KAAnC,EAA0CC,IAA1C,EAAgDC,MAAhD,EAAwDC,KAAxD,CAAJ,EAAoE;AAClEN,QAAAA,MAAM,CAACQ,IAAP,CAAYP,IAAZ;AACD;AACF,KAJO,EAILH,OAJK,CAAR;AAKD;;AACD,SAAOE,MAAP;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiBf,UAAjB","sourcesContent":["var eachTree = require('./eachTree')\r\n\r\n/**\r\n  * 从树结构中根据回调过滤数据\r\n  *\r\n  * @param {Object} obj 对象/数组\r\n  * @param {Function} iterate(item, index, items, path, parent) 回调\r\n  * @param {Object} options {children: 'children'}\r\n  * @param {Object} context 上下文\r\n  * @return {Array}\r\n  */\r\nfunction filterTree (obj, iterate, options, context) {\r\n  var result = []\r\n  if (obj && iterate) {\r\n    eachTree(obj, function (item, index, items, path, parent, nodes) {\r\n      if (iterate.call(context, item, index, items, path, parent, nodes)) {\r\n        result.push(item)\r\n      }\r\n    }, options)\r\n  }\r\n  return result\r\n}\r\n\r\nmodule.exports = filterTree\r\n"]},"metadata":{},"sourceType":"script"}