{"ast":null,"code":"import { defineComponent, h, createCommentVNode, ref, computed, reactive, inject, nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { formatText } from '../../tools/utils';\nimport VxeModalConstructor from '../../modal/src/modal';\nimport VxeInputConstructor from '../../input/src/input';\nimport VxeCheckboxConstructor from '../../checkbox/src/checkbox';\nimport VxeSelectConstructor from '../../select/src/select';\nimport VxeButtonConstructor from '../../button/src/button';\nexport default defineComponent({\n  name: 'VxeExportPanel',\n  props: {\n    defaultOptions: Object,\n    storeData: Object\n  },\n  setup: function (props) {\n    var $xetable = inject('$xetable', {});\n\n    var _a = $xetable.getComputeMaps(),\n        computeExportOpts = _a.computeExportOpts,\n        computePrintOpts = _a.computePrintOpts;\n\n    var reactData = reactive({\n      isAll: false,\n      isIndeterminate: false,\n      loading: false\n    });\n    var xButtonConfirm = ref();\n    var xInputFilename = ref();\n    var xInputSheetname = ref();\n    var computeCheckedAll = computed(function () {\n      var storeData = props.storeData;\n      return storeData.columns.every(function (column) {\n        return column.checked;\n      });\n    });\n    var computeShowSheet = computed(function () {\n      var defaultOptions = props.defaultOptions;\n      return ['html', 'xml', 'xlsx', 'pdf'].indexOf(defaultOptions.type) > -1;\n    });\n    var computeSupportMerge = computed(function () {\n      var storeData = props.storeData,\n          defaultOptions = props.defaultOptions;\n      return !defaultOptions.original && defaultOptions.mode === 'current' && (storeData.isPrint || ['html', 'xlsx'].indexOf(defaultOptions.type) > -1);\n    });\n    var computeSupportStyle = computed(function () {\n      var defaultOptions = props.defaultOptions;\n      return !defaultOptions.original && ['xlsx'].indexOf(defaultOptions.type) > -1;\n    });\n\n    var handleOptionCheck = function (column) {\n      var storeData = props.storeData;\n      var matchObj = XEUtils.findTree(storeData.columns, function (item) {\n        return item === column;\n      });\n\n      if (matchObj && matchObj.parent) {\n        var parent_1 = matchObj.parent;\n\n        if (parent_1.children && parent_1.children.length) {\n          parent_1.checked = parent_1.children.every(function (column) {\n            return column.checked;\n          });\n          parent_1.halfChecked = !parent_1.checked && parent_1.children.some(function (column) {\n            return column.checked || column.halfChecked;\n          });\n          handleOptionCheck(parent_1);\n        }\n      }\n    };\n\n    var checkStatus = function () {\n      var storeData = props.storeData;\n      var columns = storeData.columns;\n      reactData.isAll = columns.every(function (column) {\n        return column.disabled || column.checked;\n      });\n      reactData.isIndeterminate = !reactData.isAll && columns.some(function (column) {\n        return !column.disabled && (column.checked || column.halfChecked);\n      });\n    };\n\n    var changeOption = function (column) {\n      var isChecked = !column.checked;\n      XEUtils.eachTree([column], function (item) {\n        item.checked = isChecked;\n        item.halfChecked = false;\n      });\n      handleOptionCheck(column);\n      checkStatus();\n    };\n\n    var allColumnEvent = function () {\n      var storeData = props.storeData;\n      var isAll = !reactData.isAll;\n      XEUtils.eachTree(storeData.columns, function (column) {\n        if (!column.disabled) {\n          column.checked = isAll;\n          column.halfChecked = false;\n        }\n      });\n      reactData.isAll = isAll;\n      checkStatus();\n    };\n\n    var showEvent = function () {\n      nextTick(function () {\n        var filenameInp = xInputFilename.value;\n        var sheetnameInp = xInputSheetname.value;\n        var confirmBtn = xButtonConfirm.value;\n        var targetElem = filenameInp || sheetnameInp || confirmBtn;\n\n        if (targetElem) {\n          targetElem.focus();\n        }\n      });\n      checkStatus();\n    };\n\n    var getExportOption = function () {\n      var storeData = props.storeData,\n          defaultOptions = props.defaultOptions;\n      var hasMerge = storeData.hasMerge,\n          columns = storeData.columns;\n      var checkedAll = computeCheckedAll.value;\n      var supportMerge = computeSupportMerge.value;\n      var expColumns = XEUtils.searchTree(columns, function (column) {\n        return column.checked;\n      }, {\n        children: 'children',\n        mapChildren: 'childNodes',\n        original: true\n      });\n      return Object.assign({}, defaultOptions, {\n        columns: expColumns,\n        isMerge: hasMerge && supportMerge && checkedAll ? defaultOptions.isMerge : false\n      });\n    };\n\n    var printEvent = function () {\n      var storeData = props.storeData;\n      var printOpts = computePrintOpts.value;\n      storeData.visible = false;\n      $xetable.print(Object.assign({}, printOpts, getExportOption()));\n    };\n\n    var exportEvent = function () {\n      var storeData = props.storeData;\n      var exportOpts = computeExportOpts.value;\n      reactData.loading = true;\n      $xetable.exportData(Object.assign({}, exportOpts, getExportOption())).then(function () {\n        reactData.loading = false;\n        storeData.visible = false;\n      }).catch(function () {\n        reactData.loading = false;\n      });\n    };\n\n    var cancelEvent = function () {\n      var storeData = props.storeData;\n      storeData.visible = false;\n    };\n\n    var confirmEvent = function () {\n      var storeData = props.storeData;\n\n      if (storeData.isPrint) {\n        printEvent();\n      } else {\n        exportEvent();\n      }\n    };\n\n    var renderVN = function () {\n      var defaultOptions = props.defaultOptions,\n          storeData = props.storeData;\n      var isAll = reactData.isAll,\n          isIndeterminate = reactData.isIndeterminate;\n      var hasTree = storeData.hasTree,\n          hasMerge = storeData.hasMerge,\n          isPrint = storeData.isPrint,\n          hasColgroup = storeData.hasColgroup;\n      var isHeader = defaultOptions.isHeader;\n      var cols = [];\n      var checkedAll = computeCheckedAll.value;\n      var showSheet = computeShowSheet.value;\n      var supportMerge = computeSupportMerge.value;\n      var supportStyle = computeSupportStyle.value;\n      XEUtils.eachTree(storeData.columns, function (column) {\n        var colTitle = formatText(column.getTitle(), 1);\n        var isColGroup = column.children && column.children.length;\n        cols.push(h('li', {\n          class: ['vxe-export--panel-column-option', \"level--\" + column.level, {\n            'is--group': isColGroup,\n            'is--checked': column.checked,\n            'is--indeterminate': column.halfChecked,\n            'is--disabled': column.disabled\n          }],\n          title: colTitle,\n          onClick: function () {\n            if (!column.disabled) {\n              changeOption(column);\n            }\n          }\n        }, [h('span', {\n          class: 'vxe-checkbox--icon vxe-checkbox--checked-icon'\n        }), h('span', {\n          class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon'\n        }), h('span', {\n          class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon'\n        }), h('span', {\n          class: 'vxe-checkbox--label'\n        }, colTitle)]));\n      });\n      return h(VxeModalConstructor, {\n        modelValue: storeData.visible,\n        title: GlobalConfig.i18n(isPrint ? 'vxe.export.printTitle' : 'vxe.export.expTitle'),\n        width: 660,\n        mask: true,\n        lockView: true,\n        showFooter: false,\n        escClosable: true,\n        maskClosable: true,\n        loading: reactData.loading,\n        'onUpdate:modelValue': function (value) {\n          storeData.visible = value;\n        },\n        onShow: showEvent\n      }, {\n        default: function () {\n          return h('div', {\n            class: 'vxe-export--panel'\n          }, [h('table', {\n            cellspacing: 0,\n            cellpadding: 0,\n            border: 0\n          }, [h('tbody', [[isPrint ? createCommentVNode() : h('tr', [h('td', GlobalConfig.i18n('vxe.export.expName')), h('td', [h(VxeInputConstructor, {\n            ref: xInputFilename,\n            modelValue: defaultOptions.filename,\n            type: 'text',\n            clearable: true,\n            placeholder: GlobalConfig.i18n('vxe.export.expNamePlaceholder'),\n            'onUpdate:modelValue': function (value) {\n              defaultOptions.filename = value;\n            }\n          })])]), isPrint ? createCommentVNode() : h('tr', [h('td', GlobalConfig.i18n('vxe.export.expType')), h('td', [h(VxeSelectConstructor, {\n            modelValue: defaultOptions.type,\n            options: storeData.typeList.map(function (item) {\n              return {\n                value: item.value,\n                label: GlobalConfig.i18n(item.label)\n              };\n            }),\n            'onUpdate:modelValue': function (value) {\n              defaultOptions.type = value;\n            }\n          })])]), isPrint || showSheet ? h('tr', [h('td', GlobalConfig.i18n('vxe.export.expSheetName')), h('td', [h(VxeInputConstructor, {\n            ref: xInputSheetname,\n            modelValue: defaultOptions.sheetName,\n            type: 'text',\n            clearable: true,\n            placeholder: GlobalConfig.i18n('vxe.export.expSheetNamePlaceholder'),\n            'onUpdate:modelValue': function (value) {\n              defaultOptions.sheetName = value;\n            }\n          })])]) : createCommentVNode(), h('tr', [h('td', GlobalConfig.i18n('vxe.export.expMode')), h('td', [h(VxeSelectConstructor, {\n            modelValue: defaultOptions.mode,\n            options: storeData.modeList.map(function (item) {\n              return {\n                value: item.value,\n                label: GlobalConfig.i18n(item.label)\n              };\n            }),\n            'onUpdate:modelValue': function (value) {\n              defaultOptions.mode = value;\n            }\n          })])]), h('tr', [h('td', [GlobalConfig.i18n('vxe.export.expColumn')]), h('td', [h('div', {\n            class: 'vxe-export--panel-column'\n          }, [h('ul', {\n            class: 'vxe-export--panel-column-header'\n          }, [h('li', {\n            class: ['vxe-export--panel-column-option', {\n              'is--checked': isAll,\n              'is--indeterminate': isIndeterminate\n            }],\n            title: GlobalConfig.i18n('vxe.table.allTitle'),\n            onClick: allColumnEvent\n          }, [h('span', {\n            class: 'vxe-checkbox--icon vxe-checkbox--checked-icon'\n          }), h('span', {\n            class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon'\n          }), h('span', {\n            class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon'\n          }), h('span', {\n            class: 'vxe-checkbox--label'\n          }, GlobalConfig.i18n('vxe.export.expCurrentColumn'))])]), h('ul', {\n            class: 'vxe-export--panel-column-body'\n          }, cols)])])]), h('tr', [h('td', GlobalConfig.i18n('vxe.export.expOpts')), h('td', [h('div', {\n            class: 'vxe-export--panel-option-row'\n          }, [h(VxeCheckboxConstructor, {\n            modelValue: defaultOptions.isHeader,\n            title: GlobalConfig.i18n('vxe.export.expHeaderTitle'),\n            content: GlobalConfig.i18n('vxe.export.expOptHeader'),\n            'onUpdate:modelValue': function (value) {\n              defaultOptions.isHeader = value;\n            }\n          }), h(VxeCheckboxConstructor, {\n            modelValue: defaultOptions.isFooter,\n            disabled: !storeData.hasFooter,\n            title: GlobalConfig.i18n('vxe.export.expFooterTitle'),\n            content: GlobalConfig.i18n('vxe.export.expOptFooter'),\n            'onUpdate:modelValue': function (value) {\n              defaultOptions.isFooter = value;\n            }\n          }), h(VxeCheckboxConstructor, {\n            modelValue: defaultOptions.original,\n            title: GlobalConfig.i18n('vxe.export.expOriginalTitle'),\n            content: GlobalConfig.i18n('vxe.export.expOptOriginal'),\n            'onUpdate:modelValue': function (value) {\n              defaultOptions.original = value;\n            }\n          })]), h('div', {\n            class: 'vxe-export--panel-option-row'\n          }, [h(VxeCheckboxConstructor, {\n            modelValue: isHeader && hasColgroup && supportMerge ? defaultOptions.isColgroup : false,\n            title: GlobalConfig.i18n('vxe.export.expColgroupTitle'),\n            disabled: !isHeader || !hasColgroup || !supportMerge,\n            content: GlobalConfig.i18n('vxe.export.expOptColgroup'),\n            'onUpdate:modelValue': function (value) {\n              defaultOptions.isColgroup = value;\n            }\n          }), h(VxeCheckboxConstructor, {\n            modelValue: hasMerge && supportMerge && checkedAll ? defaultOptions.isMerge : false,\n            title: GlobalConfig.i18n('vxe.export.expMergeTitle'),\n            disabled: !hasMerge || !supportMerge || !checkedAll,\n            content: GlobalConfig.i18n('vxe.export.expOptMerge'),\n            'onUpdate:modelValue': function (value) {\n              defaultOptions.isMerge = value;\n            }\n          }), isPrint ? createCommentVNode() : h(VxeCheckboxConstructor, {\n            modelValue: supportStyle ? defaultOptions.useStyle : false,\n            disabled: !supportStyle,\n            title: GlobalConfig.i18n('vxe.export.expUseStyleTitle'),\n            content: GlobalConfig.i18n('vxe.export.expOptUseStyle'),\n            'onUpdate:modelValue': function (value) {\n              defaultOptions.useStyle = value;\n            }\n          }), h(VxeCheckboxConstructor, {\n            modelValue: hasTree ? defaultOptions.isAllExpand : false,\n            disabled: !hasTree,\n            title: GlobalConfig.i18n('vxe.export.expAllExpandTitle'),\n            content: GlobalConfig.i18n('vxe.export.expOptAllExpand'),\n            'onUpdate:modelValue': function (value) {\n              defaultOptions.isAllExpand = value;\n            }\n          })])])])]])]), h('div', {\n            class: 'vxe-export--panel-btns'\n          }, [h(VxeButtonConstructor, {\n            content: GlobalConfig.i18n('vxe.export.expCancel'),\n            onClick: cancelEvent\n          }), h(VxeButtonConstructor, {\n            ref: xButtonConfirm,\n            status: 'primary',\n            content: GlobalConfig.i18n(isPrint ? 'vxe.export.expPrint' : 'vxe.export.expConfirm'),\n            onClick: confirmEvent\n          })])]);\n        }\n      });\n    };\n\n    return renderVN;\n  }\n});","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vxe-table/es/export/src/export-panel.js"],"names":["defineComponent","h","createCommentVNode","ref","computed","reactive","inject","nextTick","XEUtils","GlobalConfig","formatText","VxeModalConstructor","VxeInputConstructor","VxeCheckboxConstructor","VxeSelectConstructor","VxeButtonConstructor","name","props","defaultOptions","Object","storeData","setup","$xetable","_a","getComputeMaps","computeExportOpts","computePrintOpts","reactData","isAll","isIndeterminate","loading","xButtonConfirm","xInputFilename","xInputSheetname","computeCheckedAll","columns","every","column","checked","computeShowSheet","indexOf","type","computeSupportMerge","original","mode","isPrint","computeSupportStyle","handleOptionCheck","matchObj","findTree","item","parent","parent_1","children","length","halfChecked","some","checkStatus","disabled","changeOption","isChecked","eachTree","allColumnEvent","showEvent","filenameInp","value","sheetnameInp","confirmBtn","targetElem","focus","getExportOption","hasMerge","checkedAll","supportMerge","expColumns","searchTree","mapChildren","assign","isMerge","printEvent","printOpts","visible","print","exportEvent","exportOpts","exportData","then","catch","cancelEvent","confirmEvent","renderVN","hasTree","hasColgroup","isHeader","cols","showSheet","supportStyle","colTitle","getTitle","isColGroup","push","class","level","title","onClick","modelValue","i18n","width","mask","lockView","showFooter","escClosable","maskClosable","onShow","default","cellspacing","cellpadding","border","filename","clearable","placeholder","options","typeList","map","label","sheetName","modeList","content","isFooter","hasFooter","isColgroup","useStyle","isAllExpand","status"],"mappings":"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","sourcesContent":["import { defineComponent, h, createCommentVNode, ref, computed, reactive, inject, nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { formatText } from '../../tools/utils';\nimport VxeModalConstructor from '../../modal/src/modal';\nimport VxeInputConstructor from '../../input/src/input';\nimport VxeCheckboxConstructor from '../../checkbox/src/checkbox';\nimport VxeSelectConstructor from '../../select/src/select';\nimport VxeButtonConstructor from '../../button/src/button';\nexport default defineComponent({\n    name: 'VxeExportPanel',\n    props: {\n        defaultOptions: Object,\n        storeData: Object\n    },\n    setup: function (props) {\n        var $xetable = inject('$xetable', {});\n        var _a = $xetable.getComputeMaps(), computeExportOpts = _a.computeExportOpts, computePrintOpts = _a.computePrintOpts;\n        var reactData = reactive({\n            isAll: false,\n            isIndeterminate: false,\n            loading: false\n        });\n        var xButtonConfirm = ref();\n        var xInputFilename = ref();\n        var xInputSheetname = ref();\n        var computeCheckedAll = computed(function () {\n            var storeData = props.storeData;\n            return storeData.columns.every(function (column) { return column.checked; });\n        });\n        var computeShowSheet = computed(function () {\n            var defaultOptions = props.defaultOptions;\n            return ['html', 'xml', 'xlsx', 'pdf'].indexOf(defaultOptions.type) > -1;\n        });\n        var computeSupportMerge = computed(function () {\n            var storeData = props.storeData, defaultOptions = props.defaultOptions;\n            return !defaultOptions.original && defaultOptions.mode === 'current' && (storeData.isPrint || ['html', 'xlsx'].indexOf(defaultOptions.type) > -1);\n        });\n        var computeSupportStyle = computed(function () {\n            var defaultOptions = props.defaultOptions;\n            return !defaultOptions.original && ['xlsx'].indexOf(defaultOptions.type) > -1;\n        });\n        var handleOptionCheck = function (column) {\n            var storeData = props.storeData;\n            var matchObj = XEUtils.findTree(storeData.columns, function (item) { return item === column; });\n            if (matchObj && matchObj.parent) {\n                var parent_1 = matchObj.parent;\n                if (parent_1.children && parent_1.children.length) {\n                    parent_1.checked = parent_1.children.every(function (column) { return column.checked; });\n                    parent_1.halfChecked = !parent_1.checked && parent_1.children.some(function (column) { return column.checked || column.halfChecked; });\n                    handleOptionCheck(parent_1);\n                }\n            }\n        };\n        var checkStatus = function () {\n            var storeData = props.storeData;\n            var columns = storeData.columns;\n            reactData.isAll = columns.every(function (column) { return column.disabled || column.checked; });\n            reactData.isIndeterminate = !reactData.isAll && columns.some(function (column) { return !column.disabled && (column.checked || column.halfChecked); });\n        };\n        var changeOption = function (column) {\n            var isChecked = !column.checked;\n            XEUtils.eachTree([column], function (item) {\n                item.checked = isChecked;\n                item.halfChecked = false;\n            });\n            handleOptionCheck(column);\n            checkStatus();\n        };\n        var allColumnEvent = function () {\n            var storeData = props.storeData;\n            var isAll = !reactData.isAll;\n            XEUtils.eachTree(storeData.columns, function (column) {\n                if (!column.disabled) {\n                    column.checked = isAll;\n                    column.halfChecked = false;\n                }\n            });\n            reactData.isAll = isAll;\n            checkStatus();\n        };\n        var showEvent = function () {\n            nextTick(function () {\n                var filenameInp = xInputFilename.value;\n                var sheetnameInp = xInputSheetname.value;\n                var confirmBtn = xButtonConfirm.value;\n                var targetElem = filenameInp || sheetnameInp || confirmBtn;\n                if (targetElem) {\n                    targetElem.focus();\n                }\n            });\n            checkStatus();\n        };\n        var getExportOption = function () {\n            var storeData = props.storeData, defaultOptions = props.defaultOptions;\n            var hasMerge = storeData.hasMerge, columns = storeData.columns;\n            var checkedAll = computeCheckedAll.value;\n            var supportMerge = computeSupportMerge.value;\n            var expColumns = XEUtils.searchTree(columns, function (column) { return column.checked; }, { children: 'children', mapChildren: 'childNodes', original: true });\n            return Object.assign({}, defaultOptions, {\n                columns: expColumns,\n                isMerge: hasMerge && supportMerge && checkedAll ? defaultOptions.isMerge : false\n            });\n        };\n        var printEvent = function () {\n            var storeData = props.storeData;\n            var printOpts = computePrintOpts.value;\n            storeData.visible = false;\n            $xetable.print(Object.assign({}, printOpts, getExportOption()));\n        };\n        var exportEvent = function () {\n            var storeData = props.storeData;\n            var exportOpts = computeExportOpts.value;\n            reactData.loading = true;\n            $xetable.exportData(Object.assign({}, exportOpts, getExportOption())).then(function () {\n                reactData.loading = false;\n                storeData.visible = false;\n            }).catch(function () {\n                reactData.loading = false;\n            });\n        };\n        var cancelEvent = function () {\n            var storeData = props.storeData;\n            storeData.visible = false;\n        };\n        var confirmEvent = function () {\n            var storeData = props.storeData;\n            if (storeData.isPrint) {\n                printEvent();\n            }\n            else {\n                exportEvent();\n            }\n        };\n        var renderVN = function () {\n            var defaultOptions = props.defaultOptions, storeData = props.storeData;\n            var isAll = reactData.isAll, isIndeterminate = reactData.isIndeterminate;\n            var hasTree = storeData.hasTree, hasMerge = storeData.hasMerge, isPrint = storeData.isPrint, hasColgroup = storeData.hasColgroup;\n            var isHeader = defaultOptions.isHeader;\n            var cols = [];\n            var checkedAll = computeCheckedAll.value;\n            var showSheet = computeShowSheet.value;\n            var supportMerge = computeSupportMerge.value;\n            var supportStyle = computeSupportStyle.value;\n            XEUtils.eachTree(storeData.columns, function (column) {\n                var colTitle = formatText(column.getTitle(), 1);\n                var isColGroup = column.children && column.children.length;\n                cols.push(h('li', {\n                    class: ['vxe-export--panel-column-option', \"level--\" + column.level, {\n                            'is--group': isColGroup,\n                            'is--checked': column.checked,\n                            'is--indeterminate': column.halfChecked,\n                            'is--disabled': column.disabled\n                        }],\n                    title: colTitle,\n                    onClick: function () {\n                        if (!column.disabled) {\n                            changeOption(column);\n                        }\n                    }\n                }, [\n                    h('span', {\n                        class: 'vxe-checkbox--icon vxe-checkbox--checked-icon'\n                    }),\n                    h('span', {\n                        class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon'\n                    }),\n                    h('span', {\n                        class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon'\n                    }),\n                    h('span', {\n                        class: 'vxe-checkbox--label'\n                    }, colTitle)\n                ]));\n            });\n            return h(VxeModalConstructor, {\n                modelValue: storeData.visible,\n                title: GlobalConfig.i18n(isPrint ? 'vxe.export.printTitle' : 'vxe.export.expTitle'),\n                width: 660,\n                mask: true,\n                lockView: true,\n                showFooter: false,\n                escClosable: true,\n                maskClosable: true,\n                loading: reactData.loading,\n                'onUpdate:modelValue': function (value) {\n                    storeData.visible = value;\n                },\n                onShow: showEvent\n            }, {\n                default: function () {\n                    return h('div', {\n                        class: 'vxe-export--panel'\n                    }, [\n                        h('table', {\n                            cellspacing: 0,\n                            cellpadding: 0,\n                            border: 0\n                        }, [\n                            h('tbody', [\n                                [\n                                    isPrint ? createCommentVNode() : h('tr', [\n                                        h('td', GlobalConfig.i18n('vxe.export.expName')),\n                                        h('td', [\n                                            h(VxeInputConstructor, {\n                                                ref: xInputFilename,\n                                                modelValue: defaultOptions.filename,\n                                                type: 'text',\n                                                clearable: true,\n                                                placeholder: GlobalConfig.i18n('vxe.export.expNamePlaceholder'),\n                                                'onUpdate:modelValue': function (value) {\n                                                    defaultOptions.filename = value;\n                                                }\n                                            })\n                                        ])\n                                    ]),\n                                    isPrint ? createCommentVNode() : h('tr', [\n                                        h('td', GlobalConfig.i18n('vxe.export.expType')),\n                                        h('td', [\n                                            h(VxeSelectConstructor, {\n                                                modelValue: defaultOptions.type,\n                                                options: storeData.typeList.map(function (item) {\n                                                    return {\n                                                        value: item.value,\n                                                        label: GlobalConfig.i18n(item.label)\n                                                    };\n                                                }),\n                                                'onUpdate:modelValue': function (value) {\n                                                    defaultOptions.type = value;\n                                                }\n                                            })\n                                        ])\n                                    ]),\n                                    isPrint || showSheet ? h('tr', [\n                                        h('td', GlobalConfig.i18n('vxe.export.expSheetName')),\n                                        h('td', [\n                                            h(VxeInputConstructor, {\n                                                ref: xInputSheetname,\n                                                modelValue: defaultOptions.sheetName,\n                                                type: 'text',\n                                                clearable: true,\n                                                placeholder: GlobalConfig.i18n('vxe.export.expSheetNamePlaceholder'),\n                                                'onUpdate:modelValue': function (value) {\n                                                    defaultOptions.sheetName = value;\n                                                }\n                                            })\n                                        ])\n                                    ]) : createCommentVNode(),\n                                    h('tr', [\n                                        h('td', GlobalConfig.i18n('vxe.export.expMode')),\n                                        h('td', [\n                                            h(VxeSelectConstructor, {\n                                                modelValue: defaultOptions.mode,\n                                                options: storeData.modeList.map(function (item) {\n                                                    return {\n                                                        value: item.value,\n                                                        label: GlobalConfig.i18n(item.label)\n                                                    };\n                                                }),\n                                                'onUpdate:modelValue': function (value) {\n                                                    defaultOptions.mode = value;\n                                                }\n                                            })\n                                        ])\n                                    ]),\n                                    h('tr', [\n                                        h('td', [GlobalConfig.i18n('vxe.export.expColumn')]),\n                                        h('td', [\n                                            h('div', {\n                                                class: 'vxe-export--panel-column'\n                                            }, [\n                                                h('ul', {\n                                                    class: 'vxe-export--panel-column-header'\n                                                }, [\n                                                    h('li', {\n                                                        class: ['vxe-export--panel-column-option', {\n                                                                'is--checked': isAll,\n                                                                'is--indeterminate': isIndeterminate\n                                                            }],\n                                                        title: GlobalConfig.i18n('vxe.table.allTitle'),\n                                                        onClick: allColumnEvent\n                                                    }, [\n                                                        h('span', {\n                                                            class: 'vxe-checkbox--icon vxe-checkbox--checked-icon'\n                                                        }),\n                                                        h('span', {\n                                                            class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon'\n                                                        }),\n                                                        h('span', {\n                                                            class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon'\n                                                        }),\n                                                        h('span', {\n                                                            class: 'vxe-checkbox--label'\n                                                        }, GlobalConfig.i18n('vxe.export.expCurrentColumn'))\n                                                    ])\n                                                ]),\n                                                h('ul', {\n                                                    class: 'vxe-export--panel-column-body'\n                                                }, cols)\n                                            ])\n                                        ])\n                                    ]),\n                                    h('tr', [\n                                        h('td', GlobalConfig.i18n('vxe.export.expOpts')),\n                                        h('td', [\n                                            h('div', {\n                                                class: 'vxe-export--panel-option-row'\n                                            }, [\n                                                h(VxeCheckboxConstructor, {\n                                                    modelValue: defaultOptions.isHeader,\n                                                    title: GlobalConfig.i18n('vxe.export.expHeaderTitle'),\n                                                    content: GlobalConfig.i18n('vxe.export.expOptHeader'),\n                                                    'onUpdate:modelValue': function (value) {\n                                                        defaultOptions.isHeader = value;\n                                                    }\n                                                }),\n                                                h(VxeCheckboxConstructor, {\n                                                    modelValue: defaultOptions.isFooter,\n                                                    disabled: !storeData.hasFooter,\n                                                    title: GlobalConfig.i18n('vxe.export.expFooterTitle'),\n                                                    content: GlobalConfig.i18n('vxe.export.expOptFooter'),\n                                                    'onUpdate:modelValue': function (value) {\n                                                        defaultOptions.isFooter = value;\n                                                    }\n                                                }),\n                                                h(VxeCheckboxConstructor, {\n                                                    modelValue: defaultOptions.original,\n                                                    title: GlobalConfig.i18n('vxe.export.expOriginalTitle'),\n                                                    content: GlobalConfig.i18n('vxe.export.expOptOriginal'),\n                                                    'onUpdate:modelValue': function (value) {\n                                                        defaultOptions.original = value;\n                                                    }\n                                                })\n                                            ]),\n                                            h('div', {\n                                                class: 'vxe-export--panel-option-row'\n                                            }, [\n                                                h(VxeCheckboxConstructor, {\n                                                    modelValue: isHeader && hasColgroup && supportMerge ? defaultOptions.isColgroup : false,\n                                                    title: GlobalConfig.i18n('vxe.export.expColgroupTitle'),\n                                                    disabled: !isHeader || !hasColgroup || !supportMerge,\n                                                    content: GlobalConfig.i18n('vxe.export.expOptColgroup'),\n                                                    'onUpdate:modelValue': function (value) {\n                                                        defaultOptions.isColgroup = value;\n                                                    }\n                                                }),\n                                                h(VxeCheckboxConstructor, {\n                                                    modelValue: hasMerge && supportMerge && checkedAll ? defaultOptions.isMerge : false,\n                                                    title: GlobalConfig.i18n('vxe.export.expMergeTitle'),\n                                                    disabled: !hasMerge || !supportMerge || !checkedAll,\n                                                    content: GlobalConfig.i18n('vxe.export.expOptMerge'),\n                                                    'onUpdate:modelValue': function (value) {\n                                                        defaultOptions.isMerge = value;\n                                                    }\n                                                }),\n                                                isPrint ? createCommentVNode() : h(VxeCheckboxConstructor, {\n                                                    modelValue: supportStyle ? defaultOptions.useStyle : false,\n                                                    disabled: !supportStyle,\n                                                    title: GlobalConfig.i18n('vxe.export.expUseStyleTitle'),\n                                                    content: GlobalConfig.i18n('vxe.export.expOptUseStyle'),\n                                                    'onUpdate:modelValue': function (value) {\n                                                        defaultOptions.useStyle = value;\n                                                    }\n                                                }),\n                                                h(VxeCheckboxConstructor, {\n                                                    modelValue: hasTree ? defaultOptions.isAllExpand : false,\n                                                    disabled: !hasTree,\n                                                    title: GlobalConfig.i18n('vxe.export.expAllExpandTitle'),\n                                                    content: GlobalConfig.i18n('vxe.export.expOptAllExpand'),\n                                                    'onUpdate:modelValue': function (value) {\n                                                        defaultOptions.isAllExpand = value;\n                                                    }\n                                                })\n                                            ])\n                                        ])\n                                    ])\n                                ]\n                            ])\n                        ]),\n                        h('div', {\n                            class: 'vxe-export--panel-btns'\n                        }, [\n                            h(VxeButtonConstructor, {\n                                content: GlobalConfig.i18n('vxe.export.expCancel'),\n                                onClick: cancelEvent\n                            }),\n                            h(VxeButtonConstructor, {\n                                ref: xButtonConfirm,\n                                status: 'primary',\n                                content: GlobalConfig.i18n(isPrint ? 'vxe.export.expPrint' : 'vxe.export.expConfirm'),\n                                onClick: confirmEvent\n                            })\n                        ])\n                    ]);\n                }\n            });\n        };\n        return renderVN;\n    }\n});\n"]},"metadata":{},"sourceType":"module"}