{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\nfunction createRef() {\n  var func = function func(node) {\n    func.current = node;\n  };\n\n  return func;\n}\n\nexport function fillRef(ref, node) {\n  if (typeof ref === 'function') {\n    ref(node);\n  } else if (_typeof(ref) === 'object' && ref && 'current' in ref) {\n    ref.current = node;\n  }\n}\n/**\n * Merge refs into one ref function to support ref passing.\n */\n\nexport function composeRef() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return function (node) {\n    refs.forEach(function (ref) {\n      fillRef(ref, node);\n    });\n  };\n}\nexport default createRef;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/node_modules/ant-design-vue/es/_util/createRef.js"],"names":["_typeof","createRef","func","node","current","fillRef","ref","composeRef","_len","arguments","length","refs","Array","_key","forEach"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,mCAApB;;AAEA,SAASC,SAAT,GAAqB;AACnB,MAAIC,IAAI,GAAG,SAASA,IAAT,CAAcC,IAAd,EAAoB;AAC7BD,IAAAA,IAAI,CAACE,OAAL,GAAeD,IAAf;AACD,GAFD;;AAIA,SAAOD,IAAP;AACD;;AAED,OAAO,SAASG,OAAT,CAAiBC,GAAjB,EAAsBH,IAAtB,EAA4B;AACjC,MAAI,OAAOG,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,IAAAA,GAAG,CAACH,IAAD,CAAH;AACD,GAFD,MAEO,IAAIH,OAAO,CAACM,GAAD,CAAP,KAAiB,QAAjB,IAA6BA,GAA7B,IAAoC,aAAaA,GAArD,EAA0D;AAC/DA,IAAAA,GAAG,CAACF,OAAJ,GAAcD,IAAd;AACD;AACF;AACD;AACA;AACA;;AAEA,OAAO,SAASI,UAAT,GAAsB;AAC3B,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,IAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAED,SAAO,UAAUV,IAAV,EAAgB;AACrBQ,IAAAA,IAAI,CAACG,OAAL,CAAa,UAAUR,GAAV,EAAe;AAC1BD,MAAAA,OAAO,CAACC,GAAD,EAAMH,IAAN,CAAP;AACD,KAFD;AAGD,GAJD;AAKD;AACD,eAAeF,SAAf","sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\nfunction createRef() {\n  var func = function func(node) {\n    func.current = node;\n  };\n\n  return func;\n}\n\nexport function fillRef(ref, node) {\n  if (typeof ref === 'function') {\n    ref(node);\n  } else if (_typeof(ref) === 'object' && ref && 'current' in ref) {\n    ref.current = node;\n  }\n}\n/**\n * Merge refs into one ref function to support ref passing.\n */\n\nexport function composeRef() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return function (node) {\n    refs.forEach(function (ref) {\n      fillRef(ref, node);\n    });\n  };\n}\nexport default createRef;"]},"metadata":{},"sourceType":"module"}