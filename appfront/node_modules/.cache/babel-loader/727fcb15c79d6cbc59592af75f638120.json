{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nimport { defineComponent, onBeforeUnmount, onMounted, onUpdated, ref } from 'vue';\nimport initDefaultProps from '../_util/props-util/initDefaultProps';\nimport Statistic, { statisticProps } from './Statistic';\nimport { formatCountdown as formatCD } from './utils';\nvar REFRESH_INTERVAL = 1000 / 30;\n\nfunction getTime(value) {\n  return new Date(value).getTime();\n}\n\nexport default defineComponent({\n  name: 'AStatisticCountdown',\n  props: initDefaultProps(statisticProps, {\n    format: 'HH:mm:ss'\n  }),\n  emits: ['finish', 'change'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var countdownId = ref();\n    var statistic = ref();\n\n    var syncTimer = function syncTimer() {\n      var value = props.value;\n      var timestamp = getTime(value);\n\n      if (timestamp >= Date.now()) {\n        startTimer();\n      } else {\n        stopTimer();\n      }\n    };\n\n    var startTimer = function startTimer() {\n      if (countdownId.value) return;\n      var timestamp = getTime(props.value);\n      countdownId.value = window.setInterval(function () {\n        statistic.value.$forceUpdate();\n\n        if (timestamp > Date.now()) {\n          emit('change', timestamp - Date.now());\n        }\n\n        syncTimer();\n      }, REFRESH_INTERVAL);\n    };\n\n    var stopTimer = function stopTimer() {\n      var value = props.value;\n\n      if (countdownId.value) {\n        clearInterval(countdownId.value);\n        countdownId.value = undefined;\n        var timestamp = getTime(value);\n\n        if (timestamp < Date.now()) {\n          emit('finish');\n        }\n      }\n    };\n\n    var formatCountdown = function formatCountdown(_ref2) {\n      var value = _ref2.value,\n          config = _ref2.config;\n      var format = props.format;\n      return formatCD(value, _extends(_extends({}, config), {\n        format: format\n      }));\n    };\n\n    var valueRenderHtml = function valueRenderHtml(node) {\n      return node;\n    };\n\n    onMounted(function () {\n      syncTimer();\n    });\n    onUpdated(function () {\n      syncTimer();\n    });\n    onBeforeUnmount(function () {\n      stopTimer();\n    });\n    return function () {\n      return _createVNode(Statistic, _objectSpread({\n        \"ref\": statistic\n      }, _extends(_extends({}, props), {\n        valueRender: valueRenderHtml,\n        formatter: formatCountdown\n      })), null);\n    };\n  }\n});","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/node_modules/ant-design-vue/es/statistic/Countdown.js"],"names":["_objectSpread","_extends","createVNode","_createVNode","defineComponent","onBeforeUnmount","onMounted","onUpdated","ref","initDefaultProps","Statistic","statisticProps","formatCountdown","formatCD","REFRESH_INTERVAL","getTime","value","Date","name","props","format","emits","setup","_ref","emit","countdownId","statistic","syncTimer","timestamp","now","startTimer","stopTimer","window","setInterval","$forceUpdate","clearInterval","undefined","_ref2","config","valueRenderHtml","node","valueRender","formatter"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nimport { defineComponent, onBeforeUnmount, onMounted, onUpdated, ref } from 'vue';\nimport initDefaultProps from '../_util/props-util/initDefaultProps';\nimport Statistic, { statisticProps } from './Statistic';\nimport { formatCountdown as formatCD } from './utils';\nvar REFRESH_INTERVAL = 1000 / 30;\n\nfunction getTime(value) {\n  return new Date(value).getTime();\n}\n\nexport default defineComponent({\n  name: 'AStatisticCountdown',\n  props: initDefaultProps(statisticProps, {\n    format: 'HH:mm:ss'\n  }),\n  emits: ['finish', 'change'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var countdownId = ref();\n    var statistic = ref();\n\n    var syncTimer = function syncTimer() {\n      var value = props.value;\n      var timestamp = getTime(value);\n\n      if (timestamp >= Date.now()) {\n        startTimer();\n      } else {\n        stopTimer();\n      }\n    };\n\n    var startTimer = function startTimer() {\n      if (countdownId.value) return;\n      var timestamp = getTime(props.value);\n      countdownId.value = window.setInterval(function () {\n        statistic.value.$forceUpdate();\n\n        if (timestamp > Date.now()) {\n          emit('change', timestamp - Date.now());\n        }\n\n        syncTimer();\n      }, REFRESH_INTERVAL);\n    };\n\n    var stopTimer = function stopTimer() {\n      var value = props.value;\n\n      if (countdownId.value) {\n        clearInterval(countdownId.value);\n        countdownId.value = undefined;\n        var timestamp = getTime(value);\n\n        if (timestamp < Date.now()) {\n          emit('finish');\n        }\n      }\n    };\n\n    var formatCountdown = function formatCountdown(_ref2) {\n      var value = _ref2.value,\n          config = _ref2.config;\n      var format = props.format;\n      return formatCD(value, _extends(_extends({}, config), {\n        format: format\n      }));\n    };\n\n    var valueRenderHtml = function valueRenderHtml(node) {\n      return node;\n    };\n\n    onMounted(function () {\n      syncTimer();\n    });\n    onUpdated(function () {\n      syncTimer();\n    });\n    onBeforeUnmount(function () {\n      stopTimer();\n    });\n    return function () {\n      return _createVNode(Statistic, _objectSpread({\n        \"ref\": statistic\n      }, _extends(_extends({}, props), {\n        valueRender: valueRenderHtml,\n        formatter: formatCountdown\n      })), null);\n    };\n  }\n});"]},"metadata":{},"sourceType":"module"}