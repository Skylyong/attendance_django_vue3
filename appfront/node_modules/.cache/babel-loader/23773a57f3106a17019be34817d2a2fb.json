{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { extend, isObject, inBrowser, withInstall } from \"../utils\";\nimport { mountComponent, usePopupState } from \"../utils/mount-component\";\nimport VanNotify from \"./Notify\";\nlet timer;\nlet instance;\n\nconst parseOptions = message => isObject(message) ? message : {\n  message\n};\n\nfunction initInstance() {\n  ({\n    instance\n  } = mountComponent({\n    setup() {\n      const {\n        state,\n        toggle\n      } = usePopupState();\n      return () => _createVNode(VanNotify, _mergeProps(state, {\n        \"onUpdate:show\": toggle\n      }), null);\n    }\n\n  }));\n}\n\nfunction Notify(options) {\n  if (!inBrowser) {\n    return;\n  }\n\n  if (!instance) {\n    initInstance();\n  }\n\n  options = extend({}, Notify.currentOptions, parseOptions(options));\n  instance.open(options);\n  clearTimeout(timer);\n\n  if (options.duration > 0) {\n    timer = window.setTimeout(Notify.clear, options.duration);\n  }\n\n  return instance;\n}\n\nconst getDefaultOptions = () => ({\n  type: \"danger\",\n  color: void 0,\n  message: \"\",\n  onClose: void 0,\n  onClick: void 0,\n  onOpened: void 0,\n  duration: 3e3,\n  position: void 0,\n  className: \"\",\n  lockScroll: false,\n  background: void 0\n});\n\nNotify.clear = () => {\n  if (instance) {\n    instance.toggle(false);\n  }\n};\n\nNotify.currentOptions = getDefaultOptions();\n\nNotify.setDefaultOptions = options => {\n  extend(Notify.currentOptions, options);\n};\n\nNotify.resetDefaultOptions = () => {\n  Notify.currentOptions = getDefaultOptions();\n};\n\nNotify.Component = withInstall(VanNotify);\n\nNotify.install = app => {\n  app.use(Notify.Component);\n  app.config.globalProperties.$notify = Notify;\n};\n\nexport { Notify };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/notify/function-call.js"],"names":["createVNode","_createVNode","mergeProps","_mergeProps","extend","isObject","inBrowser","withInstall","mountComponent","usePopupState","VanNotify","timer","instance","parseOptions","message","initInstance","setup","state","toggle","Notify","options","currentOptions","open","clearTimeout","duration","window","setTimeout","clear","getDefaultOptions","type","color","onClose","onClick","onOpened","position","className","lockScroll","background","setDefaultOptions","resetDefaultOptions","Component","install","app","use","config","globalProperties","$notify"],"mappings":"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","sourcesContent":["import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { extend, isObject, inBrowser, withInstall } from \"../utils\";\nimport { mountComponent, usePopupState } from \"../utils/mount-component\";\nimport VanNotify from \"./Notify\";\nlet timer;\nlet instance;\nconst parseOptions = (message) => isObject(message) ? message : {\n  message\n};\nfunction initInstance() {\n  ({\n    instance\n  } = mountComponent({\n    setup() {\n      const {\n        state,\n        toggle\n      } = usePopupState();\n      return () => _createVNode(VanNotify, _mergeProps(state, {\n        \"onUpdate:show\": toggle\n      }), null);\n    }\n  }));\n}\nfunction Notify(options) {\n  if (!inBrowser) {\n    return;\n  }\n  if (!instance) {\n    initInstance();\n  }\n  options = extend({}, Notify.currentOptions, parseOptions(options));\n  instance.open(options);\n  clearTimeout(timer);\n  if (options.duration > 0) {\n    timer = window.setTimeout(Notify.clear, options.duration);\n  }\n  return instance;\n}\nconst getDefaultOptions = () => ({\n  type: \"danger\",\n  color: void 0,\n  message: \"\",\n  onClose: void 0,\n  onClick: void 0,\n  onOpened: void 0,\n  duration: 3e3,\n  position: void 0,\n  className: \"\",\n  lockScroll: false,\n  background: void 0\n});\nNotify.clear = () => {\n  if (instance) {\n    instance.toggle(false);\n  }\n};\nNotify.currentOptions = getDefaultOptions();\nNotify.setDefaultOptions = (options) => {\n  extend(Notify.currentOptions, options);\n};\nNotify.resetDefaultOptions = () => {\n  Notify.currentOptions = getDefaultOptions();\n};\nNotify.Component = withInstall(VanNotify);\nNotify.install = (app) => {\n  app.use(Notify.Component);\n  app.config.globalProperties.$notify = Notify;\n};\nexport {\n  Notify\n};\n"]},"metadata":{},"sourceType":"module"}