{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\";\nimport { computed, defineComponent } from \"vue\";\nimport { extend, createNamespace } from \"../utils\";\nimport { ACTION_BAR_KEY } from \"../action-bar/ActionBar\";\nimport { useParent } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose\";\nimport { useRoute, routeProps } from \"../composables/use-route\";\nimport { Button } from \"../button\";\nconst [name, bem] = createNamespace(\"action-bar-button\");\nconst actionBarButtonProps = extend({}, routeProps, {\n  type: String,\n  text: String,\n  icon: String,\n  color: String,\n  loading: Boolean,\n  disabled: Boolean\n});\nvar stdin_default = defineComponent({\n  name,\n  props: actionBarButtonProps,\n\n  setup(props, {\n    slots\n  }) {\n    const route = useRoute();\n    const {\n      parent,\n      index\n    } = useParent(ACTION_BAR_KEY);\n    const isFirst = computed(() => {\n      if (parent) {\n        const prev = parent.children[index.value - 1];\n        return !(prev && \"isButton\" in prev);\n      }\n    });\n    const isLast = computed(() => {\n      if (parent) {\n        const next = parent.children[index.value + 1];\n        return !(next && \"isButton\" in next);\n      }\n    });\n    useExpose({\n      isButton: true\n    });\n    return () => {\n      const {\n        type,\n        icon,\n        text,\n        color,\n        loading,\n        disabled\n      } = props;\n      return _createVNode(Button, {\n        \"class\": bem([type, {\n          last: isLast.value,\n          first: isFirst.value\n        }]),\n        \"size\": \"large\",\n        \"type\": type,\n        \"icon\": icon,\n        \"color\": color,\n        \"loading\": loading,\n        \"disabled\": disabled,\n        \"onClick\": route\n      }, {\n        default: () => [slots.default ? slots.default() : text]\n      });\n    };\n  }\n\n});\nexport { stdin_default as default };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/action-bar-button/ActionBarButton.js"],"names":["createVNode","_createVNode","computed","defineComponent","extend","createNamespace","ACTION_BAR_KEY","useParent","useExpose","useRoute","routeProps","Button","name","bem","actionBarButtonProps","type","String","text","icon","color","loading","Boolean","disabled","stdin_default","props","setup","slots","route","parent","index","isFirst","prev","children","value","isLast","next","isButton","last","first","default"],"mappings":"AAAA,SAASA,WAAW,IAAIC,YAAxB,QAA4C,KAA5C;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,KAA1C;AACA,SAASC,MAAT,EAAiBC,eAAjB,QAAwC,UAAxC;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,0BAArC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,MAAM,CAACC,IAAD,EAAOC,GAAP,IAAcR,eAAe,CAAC,mBAAD,CAAnC;AACA,MAAMS,oBAAoB,GAAGV,MAAM,CAAC,EAAD,EAAKM,UAAL,EAAiB;AAClDK,EAAAA,IAAI,EAAEC,MAD4C;AAElDC,EAAAA,IAAI,EAAED,MAF4C;AAGlDE,EAAAA,IAAI,EAAEF,MAH4C;AAIlDG,EAAAA,KAAK,EAAEH,MAJ2C;AAKlDI,EAAAA,OAAO,EAAEC,OALyC;AAMlDC,EAAAA,QAAQ,EAAED;AANwC,CAAjB,CAAnC;AAQA,IAAIE,aAAa,GAAGpB,eAAe,CAAC;AAClCS,EAAAA,IADkC;AAElCY,EAAAA,KAAK,EAAEV,oBAF2B;;AAGlCW,EAAAA,KAAK,CAACD,KAAD,EAAQ;AACXE,IAAAA;AADW,GAAR,EAEF;AACD,UAAMC,KAAK,GAAGlB,QAAQ,EAAtB;AACA,UAAM;AACJmB,MAAAA,MADI;AAEJC,MAAAA;AAFI,QAGFtB,SAAS,CAACD,cAAD,CAHb;AAIA,UAAMwB,OAAO,GAAG5B,QAAQ,CAAC,MAAM;AAC7B,UAAI0B,MAAJ,EAAY;AACV,cAAMG,IAAI,GAAGH,MAAM,CAACI,QAAP,CAAgBH,KAAK,CAACI,KAAN,GAAc,CAA9B,CAAb;AACA,eAAO,EAAEF,IAAI,IAAI,cAAcA,IAAxB,CAAP;AACD;AACF,KALuB,CAAxB;AAMA,UAAMG,MAAM,GAAGhC,QAAQ,CAAC,MAAM;AAC5B,UAAI0B,MAAJ,EAAY;AACV,cAAMO,IAAI,GAAGP,MAAM,CAACI,QAAP,CAAgBH,KAAK,CAACI,KAAN,GAAc,CAA9B,CAAb;AACA,eAAO,EAAEE,IAAI,IAAI,cAAcA,IAAxB,CAAP;AACD;AACF,KALsB,CAAvB;AAMA3B,IAAAA,SAAS,CAAC;AACR4B,MAAAA,QAAQ,EAAE;AADF,KAAD,CAAT;AAGA,WAAO,MAAM;AACX,YAAM;AACJrB,QAAAA,IADI;AAEJG,QAAAA,IAFI;AAGJD,QAAAA,IAHI;AAIJE,QAAAA,KAJI;AAKJC,QAAAA,OALI;AAMJE,QAAAA;AANI,UAOFE,KAPJ;AAQA,aAAOvB,YAAY,CAACU,MAAD,EAAS;AAC1B,iBAASE,GAAG,CAAC,CAACE,IAAD,EAAO;AAClBsB,UAAAA,IAAI,EAAEH,MAAM,CAACD,KADK;AAElBK,UAAAA,KAAK,EAAER,OAAO,CAACG;AAFG,SAAP,CAAD,CADc;AAK1B,gBAAQ,OALkB;AAM1B,gBAAQlB,IANkB;AAO1B,gBAAQG,IAPkB;AAQ1B,iBAASC,KARiB;AAS1B,mBAAWC,OATe;AAU1B,oBAAYE,QAVc;AAW1B,mBAAWK;AAXe,OAAT,EAYhB;AACDY,QAAAA,OAAO,EAAE,MAAM,CAACb,KAAK,CAACa,OAAN,GAAgBb,KAAK,CAACa,OAAN,EAAhB,GAAkCtB,IAAnC;AADd,OAZgB,CAAnB;AAeD,KAxBD;AAyBD;;AAnDiC,CAAD,CAAnC;AAqDA,SACEM,aAAa,IAAIgB,OADnB","sourcesContent":["import { createVNode as _createVNode } from \"vue\";\nimport { computed, defineComponent } from \"vue\";\nimport { extend, createNamespace } from \"../utils\";\nimport { ACTION_BAR_KEY } from \"../action-bar/ActionBar\";\nimport { useParent } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose\";\nimport { useRoute, routeProps } from \"../composables/use-route\";\nimport { Button } from \"../button\";\nconst [name, bem] = createNamespace(\"action-bar-button\");\nconst actionBarButtonProps = extend({}, routeProps, {\n  type: String,\n  text: String,\n  icon: String,\n  color: String,\n  loading: Boolean,\n  disabled: Boolean\n});\nvar stdin_default = defineComponent({\n  name,\n  props: actionBarButtonProps,\n  setup(props, {\n    slots\n  }) {\n    const route = useRoute();\n    const {\n      parent,\n      index\n    } = useParent(ACTION_BAR_KEY);\n    const isFirst = computed(() => {\n      if (parent) {\n        const prev = parent.children[index.value - 1];\n        return !(prev && \"isButton\" in prev);\n      }\n    });\n    const isLast = computed(() => {\n      if (parent) {\n        const next = parent.children[index.value + 1];\n        return !(next && \"isButton\" in next);\n      }\n    });\n    useExpose({\n      isButton: true\n    });\n    return () => {\n      const {\n        type,\n        icon,\n        text,\n        color,\n        loading,\n        disabled\n      } = props;\n      return _createVNode(Button, {\n        \"class\": bem([type, {\n          last: isLast.value,\n          first: isFirst.value\n        }]),\n        \"size\": \"large\",\n        \"type\": type,\n        \"icon\": icon,\n        \"color\": color,\n        \"loading\": loading,\n        \"disabled\": disabled,\n        \"onClick\": route\n      }, {\n        default: () => [slots.default ? slots.default() : text]\n      });\n    };\n  }\n});\nexport {\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}