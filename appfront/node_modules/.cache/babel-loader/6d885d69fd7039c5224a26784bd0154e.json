{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { defineComponent } from \"vue\";\nimport { extend, createNamespace, unknownProp, numericProp } from \"../utils\";\nimport { ACTION_BAR_KEY } from \"../action-bar/ActionBar\";\nimport { useParent } from \"@vant/use\";\nimport { useRoute, routeProps } from \"../composables/use-route\";\nimport { Icon } from \"../icon\";\nimport { Badge } from \"../badge\";\nconst [name, bem] = createNamespace(\"action-bar-icon\");\nconst actionBarIconProps = extend({}, routeProps, {\n  dot: Boolean,\n  text: String,\n  icon: String,\n  color: String,\n  badge: numericProp,\n  iconClass: unknownProp,\n  badgeProps: Object,\n  iconPrefix: String\n});\nvar stdin_default = defineComponent({\n  name,\n  props: actionBarIconProps,\n\n  setup(props, {\n    slots\n  }) {\n    const route = useRoute();\n    useParent(ACTION_BAR_KEY);\n\n    const renderIcon = () => {\n      const {\n        dot,\n        badge,\n        icon,\n        color,\n        iconClass,\n        badgeProps,\n        iconPrefix\n      } = props;\n\n      if (slots.icon) {\n        return _createVNode(Badge, _mergeProps({\n          \"dot\": dot,\n          \"class\": bem(\"icon\"),\n          \"content\": badge\n        }, badgeProps), {\n          default: slots.icon\n        });\n      }\n\n      return _createVNode(Icon, {\n        \"tag\": \"div\",\n        \"dot\": dot,\n        \"name\": icon,\n        \"badge\": badge,\n        \"color\": color,\n        \"class\": [bem(\"icon\"), iconClass],\n        \"badgeProps\": badgeProps,\n        \"classPrefix\": iconPrefix\n      }, null);\n    };\n\n    return () => _createVNode(\"div\", {\n      \"role\": \"button\",\n      \"class\": bem(),\n      \"tabindex\": 0,\n      \"onClick\": route\n    }, [renderIcon(), slots.default ? slots.default() : props.text]);\n  }\n\n});\nexport { stdin_default as default };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/action-bar-icon/ActionBarIcon.js"],"names":["createVNode","_createVNode","mergeProps","_mergeProps","defineComponent","extend","createNamespace","unknownProp","numericProp","ACTION_BAR_KEY","useParent","useRoute","routeProps","Icon","Badge","name","bem","actionBarIconProps","dot","Boolean","text","String","icon","color","badge","iconClass","badgeProps","Object","iconPrefix","stdin_default","props","setup","slots","route","renderIcon","default"],"mappings":"AAAA,SAASA,WAAW,IAAIC,YAAxB,EAAsCC,UAAU,IAAIC,WAApD,QAAuE,KAAvE;AACA,SAASC,eAAT,QAAgC,KAAhC;AACA,SAASC,MAAT,EAAiBC,eAAjB,EAAkCC,WAAlC,EAA+CC,WAA/C,QAAkE,UAAlE;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,0BAArC;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,MAAM,CAACC,IAAD,EAAOC,GAAP,IAAcV,eAAe,CAAC,iBAAD,CAAnC;AACA,MAAMW,kBAAkB,GAAGZ,MAAM,CAAC,EAAD,EAAKO,UAAL,EAAiB;AAChDM,EAAAA,GAAG,EAAEC,OAD2C;AAEhDC,EAAAA,IAAI,EAAEC,MAF0C;AAGhDC,EAAAA,IAAI,EAAED,MAH0C;AAIhDE,EAAAA,KAAK,EAAEF,MAJyC;AAKhDG,EAAAA,KAAK,EAAEhB,WALyC;AAMhDiB,EAAAA,SAAS,EAAElB,WANqC;AAOhDmB,EAAAA,UAAU,EAAEC,MAPoC;AAQhDC,EAAAA,UAAU,EAAEP;AARoC,CAAjB,CAAjC;AAUA,IAAIQ,aAAa,GAAGzB,eAAe,CAAC;AAClCW,EAAAA,IADkC;AAElCe,EAAAA,KAAK,EAAEb,kBAF2B;;AAGlCc,EAAAA,KAAK,CAACD,KAAD,EAAQ;AACXE,IAAAA;AADW,GAAR,EAEF;AACD,UAAMC,KAAK,GAAGtB,QAAQ,EAAtB;AACAD,IAAAA,SAAS,CAACD,cAAD,CAAT;;AACA,UAAMyB,UAAU,GAAG,MAAM;AACvB,YAAM;AACJhB,QAAAA,GADI;AAEJM,QAAAA,KAFI;AAGJF,QAAAA,IAHI;AAIJC,QAAAA,KAJI;AAKJE,QAAAA,SALI;AAMJC,QAAAA,UANI;AAOJE,QAAAA;AAPI,UAQFE,KARJ;;AASA,UAAIE,KAAK,CAACV,IAAV,EAAgB;AACd,eAAOrB,YAAY,CAACa,KAAD,EAAQX,WAAW,CAAC;AACrC,iBAAOe,GAD8B;AAErC,mBAASF,GAAG,CAAC,MAAD,CAFyB;AAGrC,qBAAWQ;AAH0B,SAAD,EAInCE,UAJmC,CAAnB,EAIH;AACdS,UAAAA,OAAO,EAAEH,KAAK,CAACV;AADD,SAJG,CAAnB;AAOD;;AACD,aAAOrB,YAAY,CAACY,IAAD,EAAO;AACxB,eAAO,KADiB;AAExB,eAAOK,GAFiB;AAGxB,gBAAQI,IAHgB;AAIxB,iBAASE,KAJe;AAKxB,iBAASD,KALe;AAMxB,iBAAS,CAACP,GAAG,CAAC,MAAD,CAAJ,EAAcS,SAAd,CANe;AAOxB,sBAAcC,UAPU;AAQxB,uBAAeE;AARS,OAAP,EAShB,IATgB,CAAnB;AAUD,KA7BD;;AA8BA,WAAO,MAAM3B,YAAY,CAAC,KAAD,EAAQ;AAC/B,cAAQ,QADuB;AAE/B,eAASe,GAAG,EAFmB;AAG/B,kBAAY,CAHmB;AAI/B,iBAAWiB;AAJoB,KAAR,EAKtB,CAACC,UAAU,EAAX,EAAeF,KAAK,CAACG,OAAN,GAAgBH,KAAK,CAACG,OAAN,EAAhB,GAAkCL,KAAK,CAACV,IAAvD,CALsB,CAAzB;AAMD;;AA5CiC,CAAD,CAAnC;AA8CA,SACES,aAAa,IAAIM,OADnB","sourcesContent":["import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { defineComponent } from \"vue\";\nimport { extend, createNamespace, unknownProp, numericProp } from \"../utils\";\nimport { ACTION_BAR_KEY } from \"../action-bar/ActionBar\";\nimport { useParent } from \"@vant/use\";\nimport { useRoute, routeProps } from \"../composables/use-route\";\nimport { Icon } from \"../icon\";\nimport { Badge } from \"../badge\";\nconst [name, bem] = createNamespace(\"action-bar-icon\");\nconst actionBarIconProps = extend({}, routeProps, {\n  dot: Boolean,\n  text: String,\n  icon: String,\n  color: String,\n  badge: numericProp,\n  iconClass: unknownProp,\n  badgeProps: Object,\n  iconPrefix: String\n});\nvar stdin_default = defineComponent({\n  name,\n  props: actionBarIconProps,\n  setup(props, {\n    slots\n  }) {\n    const route = useRoute();\n    useParent(ACTION_BAR_KEY);\n    const renderIcon = () => {\n      const {\n        dot,\n        badge,\n        icon,\n        color,\n        iconClass,\n        badgeProps,\n        iconPrefix\n      } = props;\n      if (slots.icon) {\n        return _createVNode(Badge, _mergeProps({\n          \"dot\": dot,\n          \"class\": bem(\"icon\"),\n          \"content\": badge\n        }, badgeProps), {\n          default: slots.icon\n        });\n      }\n      return _createVNode(Icon, {\n        \"tag\": \"div\",\n        \"dot\": dot,\n        \"name\": icon,\n        \"badge\": badge,\n        \"color\": color,\n        \"class\": [bem(\"icon\"), iconClass],\n        \"badgeProps\": badgeProps,\n        \"classPrefix\": iconPrefix\n      }, null);\n    };\n    return () => _createVNode(\"div\", {\n      \"role\": \"button\",\n      \"class\": bem(),\n      \"tabindex\": 0,\n      \"onClick\": route\n    }, [renderIcon(), slots.default ? slots.default() : props.text]);\n  }\n});\nexport {\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}