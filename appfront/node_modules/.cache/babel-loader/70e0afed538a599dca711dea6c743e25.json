{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { ref, watch, getCurrentInstance } from \"vue\";\nimport { extend, isObject, inBrowser, withInstall } from \"../utils\";\nimport { mountComponent, usePopupState } from \"../utils/mount-component\";\nimport VanToast from \"./Toast\";\nconst defaultOptions = {\n  icon: \"\",\n  type: \"text\",\n  message: \"\",\n  className: \"\",\n  overlay: false,\n  onClose: void 0,\n  onOpened: void 0,\n  duration: 2e3,\n  teleport: \"body\",\n  iconSize: void 0,\n  iconPrefix: void 0,\n  position: \"middle\",\n  transition: \"van-fade\",\n  forbidClick: false,\n  loadingType: void 0,\n  overlayClass: \"\",\n  overlayStyle: void 0,\n  closeOnClick: false,\n  closeOnClickOverlay: false\n};\nlet queue = [];\nlet allowMultiple = false;\nlet currentOptions = extend({}, defaultOptions);\nconst defaultOptionsMap = /* @__PURE__ */new Map();\n\nfunction parseOptions(message) {\n  if (isObject(message)) {\n    return message;\n  }\n\n  return {\n    message\n  };\n}\n\nfunction createInstance() {\n  const {\n    instance,\n    unmount\n  } = mountComponent({\n    setup() {\n      const message = ref(\"\");\n      const {\n        open,\n        state,\n        close,\n        toggle\n      } = usePopupState();\n\n      const onClosed = () => {\n        if (allowMultiple) {\n          queue = queue.filter(item => item !== instance);\n          unmount();\n        }\n      };\n\n      const render = () => {\n        const attrs = {\n          onClosed,\n          \"onUpdate:show\": toggle\n        };\n        return _createVNode(VanToast, _mergeProps(state, attrs), null);\n      };\n\n      watch(message, val => {\n        state.message = val;\n      });\n      getCurrentInstance().render = render;\n      return {\n        open,\n        clear: close,\n        message\n      };\n    }\n\n  });\n  return instance;\n}\n\nfunction getInstance() {\n  if (!queue.length || allowMultiple) {\n    const instance = createInstance();\n    queue.push(instance);\n  }\n\n  return queue[queue.length - 1];\n}\n\nfunction Toast(options = {}) {\n  if (!inBrowser) {\n    return {};\n  }\n\n  const toast = getInstance();\n  const parsedOptions = parseOptions(options);\n  toast.open(extend({}, currentOptions, defaultOptionsMap.get(parsedOptions.type || currentOptions.type), parsedOptions));\n  return toast;\n}\n\nconst createMethod = type => options => Toast(extend({\n  type\n}, parseOptions(options)));\n\nToast.loading = createMethod(\"loading\");\nToast.success = createMethod(\"success\");\nToast.fail = createMethod(\"fail\");\n\nToast.clear = all => {\n  var _a;\n\n  if (queue.length) {\n    if (all) {\n      queue.forEach(toast => {\n        toast.clear();\n      });\n      queue = [];\n    } else if (!allowMultiple) {\n      queue[0].clear();\n    } else {\n      (_a = queue.shift()) == null ? void 0 : _a.clear();\n    }\n  }\n};\n\nfunction setDefaultOptions(type, options) {\n  if (typeof type === \"string\") {\n    defaultOptionsMap.set(type, options);\n  } else {\n    extend(currentOptions, type);\n  }\n}\n\nToast.setDefaultOptions = setDefaultOptions;\n\nToast.resetDefaultOptions = type => {\n  if (typeof type === \"string\") {\n    defaultOptionsMap.delete(type);\n  } else {\n    currentOptions = extend({}, defaultOptions);\n    defaultOptionsMap.clear();\n  }\n};\n\nToast.allowMultiple = (value = true) => {\n  allowMultiple = value;\n};\n\nToast.install = app => {\n  app.use(withInstall(VanToast));\n  app.config.globalProperties.$toast = Toast;\n};\n\nexport { Toast };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/toast/function-call.js"],"names":["createVNode","_createVNode","mergeProps","_mergeProps","ref","watch","getCurrentInstance","extend","isObject","inBrowser","withInstall","mountComponent","usePopupState","VanToast","defaultOptions","icon","type","message","className","overlay","onClose","onOpened","duration","teleport","iconSize","iconPrefix","position","transition","forbidClick","loadingType","overlayClass","overlayStyle","closeOnClick","closeOnClickOverlay","queue","allowMultiple","currentOptions","defaultOptionsMap","Map","parseOptions","createInstance","instance","unmount","setup","open","state","close","toggle","onClosed","filter","item","render","attrs","val","clear","getInstance","length","push","Toast","options","toast","parsedOptions","get","createMethod","loading","success","fail","all","_a","forEach","shift","setDefaultOptions","set","resetDefaultOptions","delete","value","install","app","use","config","globalProperties","$toast"],"mappings":"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","sourcesContent":["import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { ref, watch, getCurrentInstance } from \"vue\";\nimport { extend, isObject, inBrowser, withInstall } from \"../utils\";\nimport { mountComponent, usePopupState } from \"../utils/mount-component\";\nimport VanToast from \"./Toast\";\nconst defaultOptions = {\n  icon: \"\",\n  type: \"text\",\n  message: \"\",\n  className: \"\",\n  overlay: false,\n  onClose: void 0,\n  onOpened: void 0,\n  duration: 2e3,\n  teleport: \"body\",\n  iconSize: void 0,\n  iconPrefix: void 0,\n  position: \"middle\",\n  transition: \"van-fade\",\n  forbidClick: false,\n  loadingType: void 0,\n  overlayClass: \"\",\n  overlayStyle: void 0,\n  closeOnClick: false,\n  closeOnClickOverlay: false\n};\nlet queue = [];\nlet allowMultiple = false;\nlet currentOptions = extend({}, defaultOptions);\nconst defaultOptionsMap = /* @__PURE__ */ new Map();\nfunction parseOptions(message) {\n  if (isObject(message)) {\n    return message;\n  }\n  return {\n    message\n  };\n}\nfunction createInstance() {\n  const {\n    instance,\n    unmount\n  } = mountComponent({\n    setup() {\n      const message = ref(\"\");\n      const {\n        open,\n        state,\n        close,\n        toggle\n      } = usePopupState();\n      const onClosed = () => {\n        if (allowMultiple) {\n          queue = queue.filter((item) => item !== instance);\n          unmount();\n        }\n      };\n      const render = () => {\n        const attrs = {\n          onClosed,\n          \"onUpdate:show\": toggle\n        };\n        return _createVNode(VanToast, _mergeProps(state, attrs), null);\n      };\n      watch(message, (val) => {\n        state.message = val;\n      });\n      getCurrentInstance().render = render;\n      return {\n        open,\n        clear: close,\n        message\n      };\n    }\n  });\n  return instance;\n}\nfunction getInstance() {\n  if (!queue.length || allowMultiple) {\n    const instance = createInstance();\n    queue.push(instance);\n  }\n  return queue[queue.length - 1];\n}\nfunction Toast(options = {}) {\n  if (!inBrowser) {\n    return {};\n  }\n  const toast = getInstance();\n  const parsedOptions = parseOptions(options);\n  toast.open(extend({}, currentOptions, defaultOptionsMap.get(parsedOptions.type || currentOptions.type), parsedOptions));\n  return toast;\n}\nconst createMethod = (type) => (options) => Toast(extend({\n  type\n}, parseOptions(options)));\nToast.loading = createMethod(\"loading\");\nToast.success = createMethod(\"success\");\nToast.fail = createMethod(\"fail\");\nToast.clear = (all) => {\n  var _a;\n  if (queue.length) {\n    if (all) {\n      queue.forEach((toast) => {\n        toast.clear();\n      });\n      queue = [];\n    } else if (!allowMultiple) {\n      queue[0].clear();\n    } else {\n      (_a = queue.shift()) == null ? void 0 : _a.clear();\n    }\n  }\n};\nfunction setDefaultOptions(type, options) {\n  if (typeof type === \"string\") {\n    defaultOptionsMap.set(type, options);\n  } else {\n    extend(currentOptions, type);\n  }\n}\nToast.setDefaultOptions = setDefaultOptions;\nToast.resetDefaultOptions = (type) => {\n  if (typeof type === \"string\") {\n    defaultOptionsMap.delete(type);\n  } else {\n    currentOptions = extend({}, defaultOptions);\n    defaultOptionsMap.clear();\n  }\n};\nToast.allowMultiple = (value = true) => {\n  allowMultiple = value;\n};\nToast.install = (app) => {\n  app.use(withInstall(VanToast));\n  app.config.globalProperties.$toast = Toast;\n};\nexport {\n  Toast\n};\n"]},"metadata":{},"sourceType":"module"}