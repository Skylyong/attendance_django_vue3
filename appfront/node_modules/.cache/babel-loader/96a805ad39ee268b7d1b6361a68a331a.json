{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\";\nimport { inject } from 'vue';\nimport PropTypes from '../../_util/vue-types';\nimport TableHeaderRow from './TableHeaderRow';\n\nfunction parseHeaderRows(rootColumns) {\n  var rows = [];\n\n  function fillRowCells(columns, colIndex) {\n    var rowIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0; // Init rows\n\n    rows[rowIndex] = rows[rowIndex] || [];\n    var currentColIndex = colIndex;\n    var colSpans = columns.filter(Boolean).map(function (column) {\n      var cell = {\n        key: column.key,\n        className: column.className || column.class || '',\n        children: column.title,\n        column: column,\n        colStart: currentColIndex\n      };\n      var colSpan = 1;\n      var subColumns = column.children;\n\n      if (subColumns && subColumns.length > 0) {\n        colSpan = fillRowCells(subColumns, currentColIndex, rowIndex + 1).reduce(function (total, count) {\n          return total + count;\n        }, 0);\n        cell.hasSubColumns = true;\n      }\n\n      if ('colSpan' in column) {\n        colSpan = column.colSpan;\n      }\n\n      if ('rowSpan' in column) {\n        cell.rowSpan = column.rowSpan;\n      }\n\n      cell.colSpan = colSpan;\n      cell.colEnd = cell.colStart + colSpan - 1;\n      rows[rowIndex].push(cell);\n      currentColIndex += colSpan;\n      return colSpan;\n    });\n    return colSpans;\n  } // Generate `rows` cell data\n\n\n  fillRowCells(rootColumns, 0); // Handle `rowSpan`\n\n  var rowCount = rows.length;\n\n  var _loop = function _loop(rowIndex) {\n    rows[rowIndex].forEach(function (cell) {\n      if (!('rowSpan' in cell) && !cell.hasSubColumns) {\n        // eslint-disable-next-line no-param-reassign\n        cell.rowSpan = rowCount - rowIndex;\n      }\n    });\n  };\n\n  for (var rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {\n    _loop(rowIndex);\n  }\n\n  return rows;\n}\n\nexport default {\n  name: 'TableHeader',\n  inheritAttrs: false,\n  props: {\n    fixed: PropTypes.string,\n    columns: PropTypes.array.isRequired,\n    expander: PropTypes.object.isRequired\n  },\n  setup: function setup() {\n    return {\n      table: inject('table', {})\n    };\n  },\n  render: function render() {\n    var _this$table = this.table,\n        components = _this$table.sComponents,\n        prefixCls = _this$table.prefixCls,\n        showHeader = _this$table.showHeader,\n        customHeaderRow = _this$table.customHeaderRow;\n    var expander = this.expander,\n        columns = this.columns,\n        fixed = this.fixed;\n\n    if (!showHeader) {\n      return null;\n    }\n\n    var rows = parseHeaderRows(this.columns);\n    expander.renderExpandIndentCell(rows, fixed);\n    var HeaderWrapper = components.header.wrapper;\n    return _createVNode(HeaderWrapper, {\n      \"class\": \"\".concat(prefixCls, \"-thead\")\n    }, {\n      default: function _default() {\n        return [rows.map(function (row, index) {\n          return _createVNode(TableHeaderRow, {\n            \"prefixCls\": prefixCls,\n            \"key\": index,\n            \"index\": index,\n            \"fixed\": fixed,\n            \"columns\": columns,\n            \"rows\": rows,\n            \"row\": row,\n            \"components\": components,\n            \"customHeaderRow\": customHeaderRow\n          }, null);\n        })];\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/node_modules/ant-design-vue/es/vc-table/src/TableHeader.js"],"names":["createVNode","_createVNode","inject","PropTypes","TableHeaderRow","parseHeaderRows","rootColumns","rows","fillRowCells","columns","colIndex","rowIndex","arguments","length","undefined","currentColIndex","colSpans","filter","Boolean","map","column","cell","key","className","class","children","title","colStart","colSpan","subColumns","reduce","total","count","hasSubColumns","rowSpan","colEnd","push","rowCount","_loop","forEach","name","inheritAttrs","props","fixed","string","array","isRequired","expander","object","setup","table","render","_this$table","components","sComponents","prefixCls","showHeader","customHeaderRow","renderExpandIndentCell","HeaderWrapper","header","wrapper","concat","default","_default","row","index"],"mappings":"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","sourcesContent":["import { createVNode as _createVNode } from \"vue\";\nimport { inject } from 'vue';\nimport PropTypes from '../../_util/vue-types';\nimport TableHeaderRow from './TableHeaderRow';\n\nfunction parseHeaderRows(rootColumns) {\n  var rows = [];\n\n  function fillRowCells(columns, colIndex) {\n    var rowIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    // Init rows\n    rows[rowIndex] = rows[rowIndex] || [];\n    var currentColIndex = colIndex;\n    var colSpans = columns.filter(Boolean).map(function (column) {\n      var cell = {\n        key: column.key,\n        className: column.className || column.class || '',\n        children: column.title,\n        column: column,\n        colStart: currentColIndex\n      };\n      var colSpan = 1;\n      var subColumns = column.children;\n\n      if (subColumns && subColumns.length > 0) {\n        colSpan = fillRowCells(subColumns, currentColIndex, rowIndex + 1).reduce(function (total, count) {\n          return total + count;\n        }, 0);\n        cell.hasSubColumns = true;\n      }\n\n      if ('colSpan' in column) {\n        colSpan = column.colSpan;\n      }\n\n      if ('rowSpan' in column) {\n        cell.rowSpan = column.rowSpan;\n      }\n\n      cell.colSpan = colSpan;\n      cell.colEnd = cell.colStart + colSpan - 1;\n      rows[rowIndex].push(cell);\n      currentColIndex += colSpan;\n      return colSpan;\n    });\n    return colSpans;\n  } // Generate `rows` cell data\n\n\n  fillRowCells(rootColumns, 0); // Handle `rowSpan`\n\n  var rowCount = rows.length;\n\n  var _loop = function _loop(rowIndex) {\n    rows[rowIndex].forEach(function (cell) {\n      if (!('rowSpan' in cell) && !cell.hasSubColumns) {\n        // eslint-disable-next-line no-param-reassign\n        cell.rowSpan = rowCount - rowIndex;\n      }\n    });\n  };\n\n  for (var rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {\n    _loop(rowIndex);\n  }\n\n  return rows;\n}\n\nexport default {\n  name: 'TableHeader',\n  inheritAttrs: false,\n  props: {\n    fixed: PropTypes.string,\n    columns: PropTypes.array.isRequired,\n    expander: PropTypes.object.isRequired\n  },\n  setup: function setup() {\n    return {\n      table: inject('table', {})\n    };\n  },\n  render: function render() {\n    var _this$table = this.table,\n        components = _this$table.sComponents,\n        prefixCls = _this$table.prefixCls,\n        showHeader = _this$table.showHeader,\n        customHeaderRow = _this$table.customHeaderRow;\n    var expander = this.expander,\n        columns = this.columns,\n        fixed = this.fixed;\n\n    if (!showHeader) {\n      return null;\n    }\n\n    var rows = parseHeaderRows(this.columns);\n    expander.renderExpandIndentCell(rows, fixed);\n    var HeaderWrapper = components.header.wrapper;\n    return _createVNode(HeaderWrapper, {\n      \"class\": \"\".concat(prefixCls, \"-thead\")\n    }, {\n      default: function _default() {\n        return [rows.map(function (row, index) {\n          return _createVNode(TableHeaderRow, {\n            \"prefixCls\": prefixCls,\n            \"key\": index,\n            \"index\": index,\n            \"fixed\": fixed,\n            \"columns\": columns,\n            \"rows\": rows,\n            \"row\": row,\n            \"components\": components,\n            \"customHeaderRow\": customHeaderRow\n          }, null);\n        })];\n      }\n    });\n  }\n};"]},"metadata":{},"sourceType":"module"}