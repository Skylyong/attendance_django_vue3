{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport deselectCurrent from './toggle-selection';\nvar clipboardToIE11Formatting = {\n  'text/plain': 'Text',\n  'text/html': 'Url',\n  default: 'Text'\n};\nvar defaultMessage = 'Copy to clipboard: #{key}, Enter';\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? '⌘' : 'Ctrl') + '+C';\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var message,\n      reselectPrevious,\n      range,\n      selection,\n      mark,\n      success = false;\n\n  if (!options) {\n    options = {};\n  }\n\n  var debug = options.debug || false;\n\n  try {\n    reselectPrevious = deselectCurrent();\n    range = document.createRange();\n    selection = document.getSelection();\n    mark = document.createElement('span');\n    mark.textContent = text; // reset user styles for span element\n\n    mark.style.all = 'unset'; // prevents scrolling to the end of the page\n\n    mark.style.position = 'fixed';\n    mark.style.top = 0;\n    mark.style.clip = 'rect(0, 0, 0, 0)'; // used to preserve spaces and line breaks\n\n    mark.style.whiteSpace = 'pre'; // do not inherit user-select (it may be `none`)\n\n    mark.style.webkitUserSelect = 'text';\n    mark.style.MozUserSelect = 'text';\n    mark.style.msUserSelect = 'text';\n    mark.style.userSelect = 'text';\n    mark.addEventListener('copy', function (e) {\n      e.stopPropagation();\n\n      if (options.format) {\n        e.preventDefault();\n\n        if (typeof e.clipboardData === 'undefined') {\n          // IE 11\n          debug && console.warn('unable to use e.clipboardData');\n          debug && console.warn('trying IE specific stuff');\n          window.clipboardData.clearData();\n\n          var _format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting['default'];\n\n          window.clipboardData.setData(_format, text);\n        } else {\n          // all other browsers\n          e.clipboardData.clearData();\n          e.clipboardData.setData(options.format, text);\n        }\n      }\n\n      if (options.onCopy) {\n        e.preventDefault();\n        options.onCopy(e.clipboardData);\n      }\n    });\n    document.body.appendChild(mark);\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n    var successful = document.execCommand('copy');\n\n    if (!successful) {\n      throw new Error('copy command was unsuccessful');\n    }\n\n    success = true;\n  } catch (err) {\n    debug && console.error('unable to copy using execCommand: ', err);\n    debug && console.warn('trying IE specific stuff');\n\n    try {\n      window.clipboardData.setData(options.format || 'text', text);\n      options.onCopy && options.onCopy(window.clipboardData);\n      success = true;\n    } catch (err) {\n      debug && console.error('unable to copy using clipboardData: ', err);\n      debug && console.error('falling back to prompt');\n      message = format('message' in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == 'function') {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nexport default copy;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/node_modules/ant-design-vue/es/_util/copy-to-clipboard/index.js"],"names":["deselectCurrent","clipboardToIE11Formatting","default","defaultMessage","format","message","copyKey","test","navigator","userAgent","replace","copy","text","options","reselectPrevious","range","selection","mark","success","debug","document","createRange","getSelection","createElement","textContent","style","all","position","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","addEventListener","e","stopPropagation","preventDefault","clipboardData","console","warn","window","clearData","_format","setData","onCopy","body","appendChild","selectNodeContents","addRange","successful","execCommand","Error","err","error","prompt","removeRange","removeAllRanges","removeChild"],"mappings":"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","sourcesContent":["import deselectCurrent from './toggle-selection';\nvar clipboardToIE11Formatting = {\n  'text/plain': 'Text',\n  'text/html': 'Url',\n  default: 'Text'\n};\nvar defaultMessage = 'Copy to clipboard: #{key}, Enter';\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? '⌘' : 'Ctrl') + '+C';\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var message,\n      reselectPrevious,\n      range,\n      selection,\n      mark,\n      success = false;\n\n  if (!options) {\n    options = {};\n  }\n\n  var debug = options.debug || false;\n\n  try {\n    reselectPrevious = deselectCurrent();\n    range = document.createRange();\n    selection = document.getSelection();\n    mark = document.createElement('span');\n    mark.textContent = text; // reset user styles for span element\n\n    mark.style.all = 'unset'; // prevents scrolling to the end of the page\n\n    mark.style.position = 'fixed';\n    mark.style.top = 0;\n    mark.style.clip = 'rect(0, 0, 0, 0)'; // used to preserve spaces and line breaks\n\n    mark.style.whiteSpace = 'pre'; // do not inherit user-select (it may be `none`)\n\n    mark.style.webkitUserSelect = 'text';\n    mark.style.MozUserSelect = 'text';\n    mark.style.msUserSelect = 'text';\n    mark.style.userSelect = 'text';\n    mark.addEventListener('copy', function (e) {\n      e.stopPropagation();\n\n      if (options.format) {\n        e.preventDefault();\n\n        if (typeof e.clipboardData === 'undefined') {\n          // IE 11\n          debug && console.warn('unable to use e.clipboardData');\n          debug && console.warn('trying IE specific stuff');\n          window.clipboardData.clearData();\n\n          var _format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting['default'];\n\n          window.clipboardData.setData(_format, text);\n        } else {\n          // all other browsers\n          e.clipboardData.clearData();\n          e.clipboardData.setData(options.format, text);\n        }\n      }\n\n      if (options.onCopy) {\n        e.preventDefault();\n        options.onCopy(e.clipboardData);\n      }\n    });\n    document.body.appendChild(mark);\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n    var successful = document.execCommand('copy');\n\n    if (!successful) {\n      throw new Error('copy command was unsuccessful');\n    }\n\n    success = true;\n  } catch (err) {\n    debug && console.error('unable to copy using execCommand: ', err);\n    debug && console.warn('trying IE specific stuff');\n\n    try {\n      window.clipboardData.setData(options.format || 'text', text);\n      options.onCopy && options.onCopy(window.clipboardData);\n      success = true;\n    } catch (err) {\n      debug && console.error('unable to copy using clipboardData: ', err);\n      debug && console.error('falling back to prompt');\n      message = format('message' in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == 'function') {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nexport default copy;"]},"metadata":{},"sourceType":"module"}