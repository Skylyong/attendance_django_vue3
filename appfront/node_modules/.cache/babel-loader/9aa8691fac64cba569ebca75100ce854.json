{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, withCtx as _withCtx, mergeProps as _mergeProps, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"float\": \"left\"\n  }\n};\nconst _hoisted_2 = {\n  style: {\n    \"float\": \"right\"\n  }\n};\nexport function render(_ctx, _cache) {\n  const _component_vxe_form_item = _resolveComponent(\"vxe-form-item\");\n\n  const _component_vxe_form_gather = _resolveComponent(\"vxe-form-gather\");\n\n  const _component_vxe_form = _resolveComponent(\"vxe-form\");\n\n  const _component_vxe_column = _resolveComponent(\"vxe-column\");\n\n  const _component_vxe_table = _resolveComponent(\"vxe-table\");\n\n  const _component_vxe_grid = _resolveComponent(\"vxe-grid\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_vxe_form, {\n    \"title-colon\": \"\",\n    ref: \"xForm\",\n    \"title-align\": \"right\",\n    \"title-width\": \"100\",\n    data: _ctx.demo2.formData2\n  }, {\n    default: _withCtx(() => [_createVNode(_component_vxe_form_gather, {\n      span: \"48\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_vxe_form_item, {\n        title: \"姓 名\",\n        field: \"name\",\n        span: \"24\"\n      })]), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_vxe_form_item, {\n        title: \"工 号\",\n        field: \"userId\",\n        span: \"24\"\n      })])]),\n      _: 1\n      /* STABLE */\n\n    })]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"data\"]), _createVNode(_component_vxe_table, {\n    align: _ctx.center,\n    data: _ctx.tableData1\n  }, {\n    default: _withCtx(() => [_createVNode(_component_vxe_column, {\n      field: \"name\",\n      title: \"Name\"\n    }), _createVNode(_component_vxe_column, {\n      field: \"sex\",\n      title: \"Sex\"\n    }), _createVNode(_component_vxe_column, {\n      field: \"age\",\n      title: \"Age\"\n    })]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"align\", \"data\"]), _createVNode(_component_vxe_grid, _mergeProps({\n    ref: \"xGrid\"\n  }, _ctx.gridOptions), null, 16\n  /* FULL_PROPS */\n  )], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;AAUiBA,OAAkB,EAAlB;AAAA;AAAA;;;AAEAA,OAAmB,EAAnB;AAAA;AAAA;;;;;;;;;;;;;;;6DAVTC,aAcWC,mBAdX,EAcW;AAbT,qBAaS;AAZTC,OAAG,EAAC,OAYK;AAXT,mBAAY,OAWH;AAVT,mBAAY,KAUH;AATRC,QAAI,EAAEC,WAAMC;AASJ,GAdX;sBAOE,MAMkB,CANlBL,aAMkBM,0BANlB,EAMkB;AANDC,UAAI,EAAC;AAMJ,KANlB,EAA0B;wBACxB,MAC0E,CAD1EC,oBAC0E,KAD1E,cAC0E,CAA1ER,aAAmES,wBAAnE,EAAmE;AAApDC,aAAK,EAAC,KAA8C;AAAxCC,aAAK,EAAC,MAAkC;AAA3BJ,YAAI,EAAC;AAAsB,OAAnE,CAA0E,CAD1E,CAC0E,EAC1EC,oBAEM,KAFN,cAEM,CADJR,aAAqES,wBAArE,EAAqE;AAAtDC,aAAK,EAAC,KAAgD;AAA1CC,aAAK,EAAC,QAAoC;AAA3BJ,YAAI,EAAC;AAAsB,OAArE,CACI,CAFN,CAD0E,EAFlD;;;;AAAA,KAA1B,CAMkB;;;;GAbpB;;AAAA,eAgBAP,aAMYY,oBANZ,EAMY;AALTC,SAAK,EAACT,WAKG;AAJTD,QAAI,EAAEC;AAIG,GANZ;sBAGE,MAAmD,CAAnDJ,aAAmDc,qBAAnD,EAAmD;AAAvCH,WAAK,EAAC,MAAiC;AAA1BD,WAAK,EAAC;AAAoB,KAAnD,CAAmD,EACnDV,aAAiDc,qBAAjD,EAAiD;AAArCH,WAAK,EAAC,KAA+B;AAAzBD,WAAK,EAAC;AAAmB,KAAjD,CADmD,EAEnDV,aAAiDc,qBAAjD,EAAiD;AAArCH,WAAK,EAAC,KAA+B;AAAzBD,WAAK,EAAC;AAAmB,KAAjD,CAFmD;;;;GAHrD;;AAAA,wBAQFV,aAAsDe,mBAAtD,cAAsD;AAA5Cb,OAAG,EAAC;AAAwC,GAAtD,EAA8BE,gBAA9B,GAAyC,IAAzC,EAAyC;AAAA;AAAzC","names":["style","_createVNode","_component_vxe_form","ref","data","_ctx","formData2","_component_vxe_form_gather","span","_createElementVNode","_component_vxe_form_item","title","field","_component_vxe_table","align","_component_vxe_column","_component_vxe_grid"],"sourceRoot":"","sources":["/Users/lyong/Desktop/myproj/appfront/src/components/manager/managerApprove.vue"],"sourcesContent":["<template>\n    \n        <vxe-form\n          title-colon\n          ref=\"xForm\"\n          title-align=\"right\"\n          title-width=\"100\"\n          :data=\"demo2.formData2\"\n        >\n          <vxe-form-gather span=\"48\">\n            <div style=\"float:left\">\n            <vxe-form-item title=\"姓 名\" field=\"name\" span=\"24\" ></vxe-form-item> </div>\n            <div style=\"float:right\">\n              <vxe-form-item title=\"工 号\" field=\"userId\" span=\"24\" ></vxe-form-item>\n            </div>\n          </vxe-form-gather>\n        </vxe-form>\n\n        <vxe-table\n          :align=center\n          :data=\"tableData1\">\n          <vxe-column field=\"name\" title=\"Name\"></vxe-column>\n          <vxe-column field=\"sex\" title=\"Sex\"></vxe-column>\n          <vxe-column field=\"age\" title=\"Age\"></vxe-column>\n        </vxe-table>\n\n      <vxe-grid ref='xGrid' v-bind=\"gridOptions\"></vxe-grid>\n\n\n        \n</template>\n\n<script>\n  import { VXETable, VxeFormEvents, VxeFormPropTypes } from 'vxe-table'\n  import { defineComponent, onMounted, reactive, ref, computed } from 'vue'\n  import { useStore } from 'vuex'\n  import { VXETable, VxeGridInstance, VxeGridProps } from 'vxe-table'\n  import XEUtils from 'xe-utils'\n\n  export default defineComponent({\n    setup  () {\n      const demo2 = reactive({\n        formData2: {\n          name: '张三',\n          userId: '311251',\n        },\n      })\n      const tableData1 = ref([\n              { id: 10001, name: 'Test1', role: 'Develop', sex: 'Man', age: 28, address: 'test abc' }\n            ])\n      const store = useStore()\n      const serveApiUrl = computed(() => store.state.serveApiUrl)\n\n        const xGrid = ref({} as VxeGridInstance)\n\n        const gridOptions = reactive<VxeGridProps>({\n          border: true,\n          showHeaderOverflow: true,\n          showOverflow: true,\n          keepSource: true,\n          id: 'full_edit_1',\n          height: 600,\n          rowConfig: {\n            keyField: 'id',\n            isHover: true\n          },\n          columnConfig: {\n            resizable: true\n          },\n          customConfig: {\n            storage: true,\n            checkMethod ({ column }) {\n              if (['nickname', 'role'].includes(column.property)) {\n                return false\n              }\n              return true\n            }\n          },\n          printConfig: {\n            columns: [\n              { field: 'name' },\n              { field: 'email' },\n              { field: 'nickname' },\n              { field: 'age' },\n              { field: 'amount' }\n            ]\n          },\n          sortConfig: {\n            trigger: 'cell',\n            remote: true\n          },\n          filterConfig: {\n            remote: true\n          },\n          pagerConfig: {\n            pageSize: 10,\n            pageSizes: [5, 10, 15, 20, 50, 100, 200, 500, 1000]\n          },\n          formConfig: {\n            titleWidth: 100,\n            titleAlign: 'right',\n            items: [\n              { field: 'name', title: 'app.body.label.name', span: 8, titlePrefix: { message: 'app.body.valid.rName', icon: 'fa fa-exclamation-circle' }, itemRender: { name: '$input', props: { placeholder: '请输入名称' } } },\n              { field: 'email', title: '邮件', span: 8, titlePrefix: { useHTML: true, message: '点击链接：<a class=\"link\" href=\"https://vxetable.cn\" target=\"_blank\">vxe-table官网</a>', icon: 'vxe-icon--question' }, itemRender: { name: '$input', props: { placeholder: '请输入邮件' } } },\n              { field: 'nickname', title: '昵称', span: 8, itemRender: { name: '$input', props: { placeholder: '请输入昵称' } } },\n              { field: 'role', title: '角色', span: 8, folding: true, itemRender: { name: '$input', props: { placeholder: '请输入角色' } } },\n              { field: 'sex', title: '性别', span: 8, folding: true, titleSuffix: { message: '注意，必填信息！', icon: 'fa fa-info-circle' }, itemRender: { name: '$select', options: [] } },\n              { field: 'age', title: '年龄', span: 8, folding: true, itemRender: { name: '$input', props: { type: 'number', min: 1, max: 120, placeholder: '请输入年龄' } } },\n              { span: 24, align: 'center', collapseNode: true, itemRender: { name: '$buttons', children: [{ props: { type: 'submit', content: 'app.body.label.search', status: 'primary' } }, { props: { type: 'reset', content: 'app.body.label.reset' } }] } }\n            ]\n          },\n          toolbarConfig: {\n            buttons: [\n              { code: 'insert_actived', name: '新增', icon: 'fa fa-plus' },\n              { code: 'delete', name: '直接删除', icon: 'fa fa-trash-o' },\n              { code: 'mark_cancel', name: '删除/取消', icon: 'fa fa-trash-o' },\n              { code: 'save', name: 'app.body.button.save', icon: 'fa fa-save', status: 'success' }\n            ],\n            refresh: true,\n            import: true,\n            export: true,\n            print: true,\n            zoom: true,\n            custom: true\n          },\n          proxyConfig: {\n            seq: true, // 启用动态序号代理，每一页的序号会根据当前页数变化\n            sort: true, // 启用排序代理，当点击排序时会自动触发 query 行为\n            filter: true, // 启用筛选代理，当点击筛选时会自动触发 query 行为\n            form: true, // 启用表单代理，当点击表单提交按钮时会自动触发 reload 行为\n            // 对应响应结果 { result: [], page: { total: 100 } }\n            props: {\n              result: 'result', // 配置响应结果列表字段\n              total: 'page.total' // 配置响应结果总页数字段\n            },\n            // 只接收Promise，具体实现自由发挥\n            ajax: {\n              // 当点击工具栏查询按钮或者手动提交指令 query或reload 时会被触发\n              query: ({ page, sorts, filters, form }) => {\n                const queryParams: any = Object.assign({}, form)\n                // 处理排序条件\n                const firstSort = sorts[0]\n                if (firstSort) {\n                  queryParams.sort = firstSort.property\n                  queryParams.order = firstSort.order\n                }\n                // 处理筛选条件\n                filters.forEach(({ property, values }) => {\n                  queryParams[property] = values.join(',')\n                })\n                return fetch(`${serveApiUrl.value}/api/pub/page/list/${page.pageSize}/${page.currentPage}?${XEUtils.serialize(queryParams)}`).then(response =>  response.json())\n              },\n              // 当点击工具栏删除按钮或者手动提交指令 delete 时会被触发\n              delete: ({ body }) => {\n                return fetch(`${serveApiUrl.value}/api/pub/save`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) }).then(response => response.json())\n              },\n              // 当点击工具栏保存按钮或者手动提交指令 save 时会被触发\n              save: ({ body }) => {\n                return fetch(`${serveApiUrl.value}/api/pub/save`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) }).then(response => response.json())\n              }\n            }\n                  },\n          columns: [\n            { type: 'checkbox', title: 'ID', width: 120 },\n            { field: 'name', title: 'Name', sortable: true, titleHelp: { message: '名称必须填写！' }, editRender: { name: 'input', attrs: { placeholder: '请输入名称' } } },\n            {\n              field: 'role',\n              title: 'Role',\n              sortable: true,\n              titleHelp: { useHTML: true, content: '点击链接：<a class=\"link\" href=\"https://vxetable.cn\" target=\"_blank\">vxe-table官网</a>' },\n              filters: [\n                { label: '前端开发', value: '前端' },\n                { label: '后端开发', value: '后端' },\n                { label: '测试', value: '测试' },\n                { label: '程序员鼓励师', value: '程序员鼓励师' }\n              ],\n              filterMultiple: false,\n              editRender: { name: 'input', attrs: { placeholder: '请输入角色' } }\n            },\n            { field: 'email', title: 'Email', width: 160, editRender: { name: '$input', props: { placeholder: '请输入邮件' } } },\n            { field: 'nickname', title: 'Nickname', editRender: { name: 'input', attrs: { placeholder: '请输入昵称' } } },\n            {\n              field: 'sex',\n              title: 'Sex',\n              filters: [\n                { label: '男', value: '1' },\n                { label: '女', value: '0' }\n              ],\n              editRender: { name: '$select', options: [], props: { placeholder: '请选择性别' } }\n            },\n            { field: 'age', title: 'Age', visible: false, sortable: true, editRender: { name: '$input', props: { type: 'number', min: 1, max: 120 } } },\n            {\n              field: 'amount',\n              title: 'Amount',\n              formatter ({ cellValue }) {\n                return cellValue ? `￥${XEUtils.commafy(XEUtils.toNumber(cellValue), { digits: 2 })}` : ''\n              },\n              editRender:\n              { name: '$input', props: { type: 'float', digits: 2, placeholder: '请输入数值' } }\n            },\n            {\n              field: 'updateDate',\n              title: 'Update Date',\n              width: 160,\n              visible: false,\n              sortable: true,\n              formatter ({ cellValue }) {\n                return XEUtils.toDateString(cellValue, 'yyyy-MM-dd HH:ss:mm')\n              }\n            },\n            {\n              field: 'createDate',\n              title: 'Create Date',\n              width: 160,\n              visible: false,\n              sortable: true,\n              formatter ({ cellValue }) {\n                return XEUtils.toDateString(cellValue, 'yyyy-MM-dd')\n              }\n            }\n          ],\n          importConfig: {\n            remote: true,\n            types: ['xlsx'],\n            modes: ['insert'],\n            // 自定义服务端导入\n            importMethod ({ file }) {\n              const $grid = xGrid.value\n              const formBody = new FormData()\n              formBody.append('file', file)\n              return fetch(`${serveApiUrl.value}/api/pub/import`, { method: 'POST', body: formBody }).then(response => response.json()).then(data => {\n                VXETable.modal.message({ content: `成功导入 ${data.result.insertRows} 条记录！`, status: 'success' })\n                // 导入完成，刷新表格\n                $grid.commitProxy('query')\n              }).catch(() => {\n                VXETable.modal.message({ content: '导入失败，请检查数据是否正确！', status: 'error' })\n              })\n            }\n          },\n          exportConfig: {\n            remote: true,\n            types: ['xlsx'],\n            modes: ['current', 'selected', 'all'],\n            // 自定义服务端导出\n            exportMethod ({ options }) {\n              const $grid = xGrid.value\n              const proxyInfo = $grid.getProxyInfo()\n              // 传给服务端的参数\n              const body = {\n                filename: options.filename,\n                sheetName: options.sheetName,\n                isHeader: options.isHeader,\n                original: options.original,\n                mode: options.mode,\n                pager: proxyInfo ? proxyInfo.pager : null,\n                ids: options.mode === 'selected' ? options.data.map((item) => item.id) : [],\n                fields: options.columns.map((column) => {\n                  return {\n                    field: column.property,\n                    title: column.title\n                  }\n                })\n              }\n              // 开始服务端导出\n              return fetch(`${serveApiUrl.value}/api/pub/export`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) }).then(response => response.json()).then(data => {\n                if (data.id) {\n                  VXETable.modal.message({ content: '导出成功，开始下载', status: 'success' })\n                  // 读取路径，请求文件\n                  fetch(`${serveApiUrl.value}/api/pub/export/download/${data.id}`).then(response => {\n                    response.blob().then(blob => {\n                      // 开始下载\n                      VXETable.saveFile({ filename: '导出数据', type: 'xlsx', content: blob })\n                    })\n                  })\n                }\n              }).catch(() => {\n                VXETable.modal.message({ content: '导出失败！', status: 'error' })\n              })\n            }\n          },\n          checkboxConfig: {\n            labelField: 'id',\n            reserve: true,\n            highlight: true,\n            range: true\n          },\n          editRules: {\n            name: [\n              { required: true, message: 'app.body.valid.rName' },\n              { min: 3, max: 50, message: '名称长度在 3 到 50 个字符' }\n            ],\n            email: [\n              { required: true, message: '邮件必须填写' }\n            ],\n            role: [\n              { required: true, message: '角色必须填写' }\n            ]\n          },\n          editConfig: {\n            trigger: 'click',\n            mode: 'row',\n            showStatus: true\n          }\n        })\n\n        onMounted(() => {\n          const sexList = [\n            { label: '女', value: '0' },\n            { label: '男', value: '1' }\n          ]\n          const { formConfig, columns } = gridOptions\n          if (columns) {\n            const sexColumn = columns[5]\n            if (sexColumn && sexColumn.editRender) {\n              sexColumn.editRender.options = sexList\n            }\n          }\n          if (formConfig && formConfig.items) {\n            const sexItem = formConfig.items[4]\n            if (sexItem && sexItem.itemRender) {\n              sexItem.itemRender.options = sexList\n            }\n          }\n        })\n\n\n\n\n        return {\n          demo2,\n          tableData1,\n          xGrid,\n          gridOptions\n        }\n      }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    }\n  })\n</script>"]},"metadata":{},"sourceType":"module"}