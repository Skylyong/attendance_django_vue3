{"ast":null,"code":"import { useRect } from \"@vant/use\";\nimport { loadImageAsync } from \"./util\";\nimport { noop } from \"../../utils\";\n\nvar stdin_default = lazyManager => ({\n  props: {\n    src: [String, Object],\n    tag: {\n      type: String,\n      default: \"img\"\n    }\n  },\n\n  render(h) {\n    return h(this.tag, {\n      attrs: {\n        src: this.renderSrc\n      }\n    }, this.$slots.default);\n  },\n\n  data() {\n    return {\n      el: null,\n      options: {\n        src: \"\",\n        error: \"\",\n        loading: \"\",\n        attempt: lazyManager.options.attempt\n      },\n      state: {\n        loaded: false,\n        error: false,\n        attempt: 0\n      },\n      renderSrc: \"\"\n    };\n  },\n\n  watch: {\n    src() {\n      this.init();\n      lazyManager.addLazyBox(this);\n      lazyManager.lazyLoadHandler();\n    }\n\n  },\n\n  created() {\n    this.init();\n    this.renderSrc = this.options.loading;\n  },\n\n  mounted() {\n    this.el = this.$el;\n    lazyManager.addLazyBox(this);\n    lazyManager.lazyLoadHandler();\n  },\n\n  beforeUnmount() {\n    lazyManager.removeComponent(this);\n  },\n\n  methods: {\n    init() {\n      const {\n        src,\n        loading,\n        error\n      } = lazyManager.valueFormatter(this.src);\n      this.state.loaded = false;\n      this.options.src = src;\n      this.options.error = error;\n      this.options.loading = loading;\n      this.renderSrc = this.options.loading;\n    },\n\n    checkInView() {\n      const rect = useRect(this.$el);\n      return rect.top < window.innerHeight * lazyManager.options.preLoad && rect.bottom > 0 && rect.left < window.innerWidth * lazyManager.options.preLoad && rect.right > 0;\n    },\n\n    load(onFinish = noop) {\n      if (this.state.attempt > this.options.attempt - 1 && this.state.error) {\n        if (process.env.NODE_ENV !== \"production\" && !lazyManager.options.silent) {\n          console.log(`[@vant/lazyload] ${this.options.src} tried too more than ${this.options.attempt} times`);\n        }\n\n        onFinish();\n        return;\n      }\n\n      const {\n        src\n      } = this.options;\n      loadImageAsync({\n        src\n      }, ({\n        src: src2\n      }) => {\n        this.renderSrc = src2;\n        this.state.loaded = true;\n      }, () => {\n        this.state.attempt++;\n        this.renderSrc = this.options.error;\n        this.state.error = true;\n      });\n    }\n\n  }\n});\n\nexport { stdin_default as default };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/lazyload/vue-lazyload/lazy-image.js"],"names":["useRect","loadImageAsync","noop","stdin_default","lazyManager","props","src","String","Object","tag","type","default","render","h","attrs","renderSrc","$slots","data","el","options","error","loading","attempt","state","loaded","watch","init","addLazyBox","lazyLoadHandler","created","mounted","$el","beforeUnmount","removeComponent","methods","valueFormatter","checkInView","rect","top","window","innerHeight","preLoad","bottom","left","innerWidth","right","load","onFinish","process","env","NODE_ENV","silent","console","log","src2"],"mappings":"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","sourcesContent":["import { useRect } from \"@vant/use\";\nimport { loadImageAsync } from \"./util\";\nimport { noop } from \"../../utils\";\nvar stdin_default = (lazyManager) => ({\n  props: {\n    src: [String, Object],\n    tag: {\n      type: String,\n      default: \"img\"\n    }\n  },\n  render(h) {\n    return h(this.tag, {\n      attrs: {\n        src: this.renderSrc\n      }\n    }, this.$slots.default);\n  },\n  data() {\n    return {\n      el: null,\n      options: {\n        src: \"\",\n        error: \"\",\n        loading: \"\",\n        attempt: lazyManager.options.attempt\n      },\n      state: {\n        loaded: false,\n        error: false,\n        attempt: 0\n      },\n      renderSrc: \"\"\n    };\n  },\n  watch: {\n    src() {\n      this.init();\n      lazyManager.addLazyBox(this);\n      lazyManager.lazyLoadHandler();\n    }\n  },\n  created() {\n    this.init();\n    this.renderSrc = this.options.loading;\n  },\n  mounted() {\n    this.el = this.$el;\n    lazyManager.addLazyBox(this);\n    lazyManager.lazyLoadHandler();\n  },\n  beforeUnmount() {\n    lazyManager.removeComponent(this);\n  },\n  methods: {\n    init() {\n      const { src, loading, error } = lazyManager.valueFormatter(this.src);\n      this.state.loaded = false;\n      this.options.src = src;\n      this.options.error = error;\n      this.options.loading = loading;\n      this.renderSrc = this.options.loading;\n    },\n    checkInView() {\n      const rect = useRect(this.$el);\n      return rect.top < window.innerHeight * lazyManager.options.preLoad && rect.bottom > 0 && rect.left < window.innerWidth * lazyManager.options.preLoad && rect.right > 0;\n    },\n    load(onFinish = noop) {\n      if (this.state.attempt > this.options.attempt - 1 && this.state.error) {\n        if (process.env.NODE_ENV !== \"production\" && !lazyManager.options.silent) {\n          console.log(`[@vant/lazyload] ${this.options.src} tried too more than ${this.options.attempt} times`);\n        }\n        onFinish();\n        return;\n      }\n      const { src } = this.options;\n      loadImageAsync({ src }, ({ src: src2 }) => {\n        this.renderSrc = src2;\n        this.state.loaded = true;\n      }, () => {\n        this.state.attempt++;\n        this.renderSrc = this.options.error;\n        this.state.error = true;\n      });\n    }\n  }\n});\nexport {\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}