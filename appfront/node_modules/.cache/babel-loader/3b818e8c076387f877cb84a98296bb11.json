{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { computed } from 'vue';\nexport default function useColumnManager(columns) {\n  var _leafColumns = function _leafColumns(cls) {\n    var fixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var leafColumns = [];\n    cls.forEach(function (column) {\n      column.fixed = fixed || column.fixed;\n\n      if (!column.children) {\n        leafColumns.push(column);\n      } else {\n        leafColumns.push.apply(leafColumns, _toConsumableArray(_leafColumns(column.children, column.fixed)));\n      }\n    });\n    return leafColumns;\n  }; // add appropriate rowspan and colspan to column\n\n\n  var groupedColumns = computed(function () {\n    var _groupColumns = function _groupColumns(cls) {\n      var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var parentColumn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var rows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n      var fixed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false; // track how many rows we got\n\n      rows[currentRow] = rows[currentRow] || [];\n      var grouped = [];\n\n      var setRowSpan = function setRowSpan(column) {\n        var rowSpan = rows.length - currentRow;\n\n        if (column && !column.children && // parent columns.value are supposed to be one row\n        rowSpan > 1 && (!column.rowSpan || column.rowSpan < rowSpan)) {\n          column.rowSpan = rowSpan;\n        }\n      };\n\n      cls.forEach(function (column, index) {\n        var newColumn = _extends({}, column);\n\n        newColumn.fixed = fixed || column.fixed;\n        rows[currentRow].push(newColumn);\n        parentColumn.colSpan = parentColumn.colSpan || 0;\n\n        if (newColumn.children && newColumn.children.length > 0) {\n          newColumn.children = _groupColumns(newColumn.children, currentRow + 1, newColumn, rows, newColumn.fixed);\n          parentColumn.colSpan += newColumn.colSpan;\n        } else {\n          parentColumn.colSpan += 1;\n        } // update rowspan to all same row columns.value\n\n\n        for (var i = 0; i < rows[currentRow].length - 1; i += 1) {\n          setRowSpan(rows[currentRow][i]);\n        } // last column, update rowspan immediately\n\n\n        if (index + 1 === cls.length) {\n          setRowSpan(newColumn);\n        }\n\n        grouped.push(newColumn);\n      });\n      return grouped;\n    };\n\n    return _groupColumns(columns.value);\n  });\n  var isAnyColumnsFixed = computed(function () {\n    return columns.value.some(function (column) {\n      return !!column.fixed;\n    });\n  });\n  var isAnyColumnsLeftFixed = computed(function () {\n    return columns.value.some(function (column) {\n      return column.fixed === 'left' || column.fixed === true;\n    });\n  });\n  var isAnyColumnsRightFixed = computed(function () {\n    return columns.value.some(function (column) {\n      return column.fixed === 'right';\n    });\n  });\n  var leftColumns = computed(function () {\n    return groupedColumns.value.filter(function (column) {\n      return column.fixed === 'left' || column.fixed === true;\n    });\n  });\n  var rightColumns = computed(function () {\n    return groupedColumns.value.filter(function (column) {\n      return column.fixed === 'right';\n    });\n  });\n  var leafColumns = computed(function () {\n    return _leafColumns(columns.value);\n  });\n  var leftLeafColumns = computed(function () {\n    return _leafColumns(leftColumns.value);\n  });\n  var rightLeafColumns = computed(function () {\n    return _leafColumns(rightColumns.value);\n  });\n  return {\n    groupedColumns: groupedColumns,\n    isAnyColumnsFixed: isAnyColumnsFixed,\n    isAnyColumnsLeftFixed: isAnyColumnsLeftFixed,\n    isAnyColumnsRightFixed: isAnyColumnsRightFixed,\n    leftColumns: leftColumns,\n    rightColumns: rightColumns,\n    leafColumns: leafColumns,\n    leftLeafColumns: leftLeafColumns,\n    rightLeafColumns: rightLeafColumns\n  };\n}","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/ant-design-vue/es/vc-table/src/useColumnManager.js"],"names":["_extends","_toConsumableArray","computed","useColumnManager","columns","_leafColumns","cls","fixed","arguments","length","undefined","leafColumns","forEach","column","children","push","apply","groupedColumns","_groupColumns","currentRow","parentColumn","rows","grouped","setRowSpan","rowSpan","index","newColumn","colSpan","i","value","isAnyColumnsFixed","some","isAnyColumnsLeftFixed","isAnyColumnsRightFixed","leftColumns","filter","rightColumns","leftLeafColumns","rightLeafColumns"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { computed } from 'vue';\nexport default function useColumnManager(columns) {\n  var _leafColumns = function _leafColumns(cls) {\n    var fixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var leafColumns = [];\n    cls.forEach(function (column) {\n      column.fixed = fixed || column.fixed;\n\n      if (!column.children) {\n        leafColumns.push(column);\n      } else {\n        leafColumns.push.apply(leafColumns, _toConsumableArray(_leafColumns(column.children, column.fixed)));\n      }\n    });\n    return leafColumns;\n  }; // add appropriate rowspan and colspan to column\n\n\n  var groupedColumns = computed(function () {\n    var _groupColumns = function _groupColumns(cls) {\n      var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var parentColumn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var rows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n      var fixed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      // track how many rows we got\n      rows[currentRow] = rows[currentRow] || [];\n      var grouped = [];\n\n      var setRowSpan = function setRowSpan(column) {\n        var rowSpan = rows.length - currentRow;\n\n        if (column && !column.children && // parent columns.value are supposed to be one row\n        rowSpan > 1 && (!column.rowSpan || column.rowSpan < rowSpan)) {\n          column.rowSpan = rowSpan;\n        }\n      };\n\n      cls.forEach(function (column, index) {\n        var newColumn = _extends({}, column);\n\n        newColumn.fixed = fixed || column.fixed;\n        rows[currentRow].push(newColumn);\n        parentColumn.colSpan = parentColumn.colSpan || 0;\n\n        if (newColumn.children && newColumn.children.length > 0) {\n          newColumn.children = _groupColumns(newColumn.children, currentRow + 1, newColumn, rows, newColumn.fixed);\n          parentColumn.colSpan += newColumn.colSpan;\n        } else {\n          parentColumn.colSpan += 1;\n        } // update rowspan to all same row columns.value\n\n\n        for (var i = 0; i < rows[currentRow].length - 1; i += 1) {\n          setRowSpan(rows[currentRow][i]);\n        } // last column, update rowspan immediately\n\n\n        if (index + 1 === cls.length) {\n          setRowSpan(newColumn);\n        }\n\n        grouped.push(newColumn);\n      });\n      return grouped;\n    };\n\n    return _groupColumns(columns.value);\n  });\n  var isAnyColumnsFixed = computed(function () {\n    return columns.value.some(function (column) {\n      return !!column.fixed;\n    });\n  });\n  var isAnyColumnsLeftFixed = computed(function () {\n    return columns.value.some(function (column) {\n      return column.fixed === 'left' || column.fixed === true;\n    });\n  });\n  var isAnyColumnsRightFixed = computed(function () {\n    return columns.value.some(function (column) {\n      return column.fixed === 'right';\n    });\n  });\n  var leftColumns = computed(function () {\n    return groupedColumns.value.filter(function (column) {\n      return column.fixed === 'left' || column.fixed === true;\n    });\n  });\n  var rightColumns = computed(function () {\n    return groupedColumns.value.filter(function (column) {\n      return column.fixed === 'right';\n    });\n  });\n  var leafColumns = computed(function () {\n    return _leafColumns(columns.value);\n  });\n  var leftLeafColumns = computed(function () {\n    return _leafColumns(leftColumns.value);\n  });\n  var rightLeafColumns = computed(function () {\n    return _leafColumns(rightColumns.value);\n  });\n  return {\n    groupedColumns: groupedColumns,\n    isAnyColumnsFixed: isAnyColumnsFixed,\n    isAnyColumnsLeftFixed: isAnyColumnsLeftFixed,\n    isAnyColumnsRightFixed: isAnyColumnsRightFixed,\n    leftColumns: leftColumns,\n    rightColumns: rightColumns,\n    leafColumns: leafColumns,\n    leftLeafColumns: leftLeafColumns,\n    rightLeafColumns: rightLeafColumns\n  };\n}"]},"metadata":{},"sourceType":"module"}