{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nimport { nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { renderer } from '../../v-x-e-table';\nimport { isEnableConf } from '../../tools/utils';\nimport { getCellValue, setCellValue, getRowid } from '../../table/src/util';\nimport { browse, removeClass, addClass } from '../../tools/dom';\nimport { warnLog, errLog, getLog } from '../../tools/log';\nvar tableEditMethodKeys = ['insert', 'insertAt', 'remove', 'removeCheckboxRow', 'removeRadioRow', 'removeCurrentRow', 'getRecordset', 'getInsertRecords', 'getRemoveRecords', 'getUpdateRecords', 'getActiveRecord', 'getSelectedCell', 'clearActived', 'clearSelected', 'isActiveByRow', 'setActiveRow', 'setActiveCell', 'setSelectCell'];\nvar editHook = {\n  setupTable: function ($xetable) {\n    var props = $xetable.props,\n        reactData = $xetable.reactData,\n        internalData = $xetable.internalData;\n    var refElem = $xetable.getRefMaps().refElem;\n\n    var _a = $xetable.getComputeMaps(),\n        computeMouseOpts = _a.computeMouseOpts,\n        computeEditOpts = _a.computeEditOpts,\n        computeCheckboxOpts = _a.computeCheckboxOpts,\n        computeTreeOpts = _a.computeTreeOpts;\n\n    var editMethods = {};\n    var editPrivateMethods = {};\n\n    var getEditColumnModel = function (row, column) {\n      var model = column.model,\n          editRender = column.editRender;\n\n      if (editRender) {\n        model.value = getCellValue(row, column);\n        model.update = false;\n      }\n    };\n\n    var setEditColumnModel = function (row, column) {\n      var model = column.model,\n          editRender = column.editRender;\n\n      if (editRender && model.update) {\n        setCellValue(row, column, model.value);\n        model.update = false;\n        model.value = null;\n      }\n    };\n\n    var removeCellSelectedClass = function () {\n      var el = refElem.value;\n\n      if (el) {\n        var cell = el.querySelector('.col--selected');\n\n        if (cell) {\n          removeClass(cell, 'col--selected');\n        }\n      }\n    };\n\n    function syncActivedCell() {\n      var editStore = reactData.editStore,\n          tableColumn = reactData.tableColumn;\n      var editOpts = computeEditOpts.value;\n      var actived = editStore.actived;\n      var row = actived.row,\n          column = actived.column;\n\n      if (row || column) {\n        if (editOpts.mode === 'row') {\n          tableColumn.forEach(function (column) {\n            return setEditColumnModel(row, column);\n          });\n        } else {\n          setEditColumnModel(row, column);\n        }\n      }\n    }\n\n    function insertTreeRow(newRecords, isAppend) {\n      var tableFullTreeData = internalData.tableFullTreeData,\n          afterFullData = internalData.afterFullData,\n          fullDataRowIdData = internalData.fullDataRowIdData,\n          fullAllDataRowIdData = internalData.fullAllDataRowIdData;\n      var treeOpts = computeTreeOpts.value;\n      var rowField = treeOpts.rowField,\n          parentField = treeOpts.parentField,\n          children = treeOpts.children,\n          mapChildren = treeOpts.mapChildren;\n      var funcName = isAppend ? 'push' : 'unshift';\n      newRecords.forEach(function (item) {\n        var parentRowId = item[parentField];\n        var rowid = getRowid($xetable, item);\n        var matchObj = parentRowId ? XEUtils.findTree(tableFullTreeData, function (item) {\n          return parentRowId === item[rowField];\n        }, {\n          children: mapChildren\n        }) : null;\n\n        if (matchObj) {\n          var parentRow = matchObj.item;\n          var parentRest = fullAllDataRowIdData[getRowid($xetable, parentRow)];\n          var parentLevel = parentRest ? parentRest.level : 0;\n          var parentChilds = parentRow[children];\n\n          if (!XEUtils.isArray(parentChilds)) {\n            parentChilds = parentRow[children] = [];\n          }\n\n          parentChilds[funcName](item);\n          var rest = {\n            row: item,\n            rowid: rowid,\n            seq: -1,\n            index: -1,\n            _index: -1,\n            $index: -1,\n            items: parentChilds,\n            parent: parent,\n            level: parentLevel + 1\n          };\n          fullDataRowIdData[rowid] = rest;\n          fullAllDataRowIdData[rowid] = rest;\n        } else {\n          if (process.env.NODE_ENV === 'development') {\n            if (parentRowId) {\n              warnLog('vxe.error.unableInsert');\n            }\n          }\n\n          afterFullData[funcName](item);\n          tableFullTreeData[funcName](item);\n          var rest = {\n            row: item,\n            rowid: rowid,\n            seq: -1,\n            index: -1,\n            _index: -1,\n            $index: -1,\n            items: tableFullTreeData,\n            parent: null,\n            level: 0\n          };\n          fullDataRowIdData[rowid] = rest;\n          fullAllDataRowIdData[rowid] = rest;\n        }\n      });\n    }\n\n    editMethods = {\n      /**\n       * 往表格中插入临时数据\n       *\n       * @param {*} records\n       */\n      insert: function (records) {\n        return editMethods.insertAt(records, null);\n      },\n\n      /**\n       * 往表格指定行中插入临时数据\n       * 如果 row 为空则从插入到顶部，如果为树结构，则插入到目标节点顶部\n       * 如果 row 为 -1 则从插入到底部，如果为树结构，则插入到目标节点底部\n       * 如果 row 为有效行则插入到该行的位置，如果为树结构，则有插入到效的目标节点该行的位置\n       * @param {Object/Array} records 新的数据\n       * @param {Row} row 指定行\n       */\n      insertAt: function (records, row) {\n        var _a;\n\n        var treeConfig = props.treeConfig;\n        var mergeList = reactData.mergeList,\n            editStore = reactData.editStore;\n        var tableFullTreeData = internalData.tableFullTreeData,\n            afterFullData = internalData.afterFullData,\n            tableFullData = internalData.tableFullData,\n            fullDataRowIdData = internalData.fullDataRowIdData,\n            fullAllDataRowIdData = internalData.fullAllDataRowIdData;\n        var treeOpts = computeTreeOpts.value;\n        var transform = treeOpts.transform,\n            rowField = treeOpts.rowField,\n            mapChildren = treeOpts.mapChildren;\n\n        if (!XEUtils.isArray(records)) {\n          records = [records];\n        }\n\n        var newRecords = records.map(function (record) {\n          return $xetable.defineField(Object.assign({}, record));\n        });\n\n        if (!row) {\n          // 如果为虚拟树\n          if (treeConfig && transform) {\n            insertTreeRow(newRecords, false);\n          } else {\n            afterFullData.unshift.apply(afterFullData, newRecords);\n            tableFullData.unshift.apply(tableFullData, newRecords); // 刷新单元格合并\n\n            mergeList.forEach(function (mergeItem) {\n              var mergeRowIndex = mergeItem.row;\n\n              if (mergeRowIndex > 0) {\n                mergeItem.row = mergeRowIndex + newRecords.length;\n              }\n            });\n          }\n        } else {\n          if (row === -1) {\n            // 如果为虚拟树\n            if (treeConfig && transform) {\n              insertTreeRow(newRecords, true);\n            } else {\n              afterFullData.push.apply(afterFullData, newRecords);\n              tableFullData.push.apply(tableFullData, newRecords); // 刷新单元格合并\n\n              mergeList.forEach(function (mergeItem) {\n                var mergeRowIndex = mergeItem.row,\n                    mergeRowspan = mergeItem.rowspan;\n\n                if (mergeRowIndex + mergeRowspan > afterFullData.length) {\n                  mergeItem.rowspan = mergeRowspan + newRecords.length;\n                }\n              });\n            }\n          } else {\n            // 如果为虚拟树\n            if (treeConfig && transform) {\n              var matchObj_1 = XEUtils.findTree(tableFullTreeData, function (item) {\n                return row[rowField] === item[rowField];\n              }, {\n                children: mapChildren\n              });\n\n              if (matchObj_1) {\n                var parentRow_1 = matchObj_1.parent;\n                var parentChilds_1 = matchObj_1.items;\n                var parentRest = fullAllDataRowIdData[getRowid($xetable, parentRow_1)];\n                var parentLevel_1 = parentRest ? parentRest.level : 0;\n                newRecords.forEach(function (item, i) {\n                  var rowid = getRowid($xetable, item);\n\n                  if (process.env.NODE_ENV === 'development') {\n                    if (item[treeOpts.parentField]) {\n                      if (parentRow_1 && item[treeOpts.parentField] !== parentRow_1[rowField]) {\n                        errLog('vxe.error.errProp', [treeOpts.parentField + \"=\" + item[treeOpts.parentField], treeOpts.parentField + \"=\" + parentRow_1[rowField]]);\n                      }\n                    }\n                  }\n\n                  if (parentRow_1) {\n                    item[treeOpts.parentField] = parentRow_1[rowField];\n                  }\n\n                  parentChilds_1.splice(matchObj_1.index + i, 0, item);\n                  var rest = {\n                    row: item,\n                    rowid: rowid,\n                    seq: -1,\n                    index: -1,\n                    _index: -1,\n                    $index: -1,\n                    items: parentChilds_1,\n                    parent: parentRow_1,\n                    level: parentLevel_1 + 1\n                  };\n                  fullDataRowIdData[rowid] = rest;\n                  fullAllDataRowIdData[rowid] = rest;\n                });\n              } else {\n                if (process.env.NODE_ENV === 'development') {\n                  warnLog('vxe.error.unableInsert');\n                }\n\n                insertTreeRow(newRecords, true);\n              }\n            } else {\n              if (treeConfig) {\n                throw new Error(getLog('vxe.error.noTree', ['insert']));\n              }\n\n              var afIndex_1 = -1; // 如果是可视索引\n\n              if (XEUtils.isNumber(row)) {\n                if (row < afterFullData.length) {\n                  afIndex_1 = row;\n                }\n              } else {\n                afIndex_1 = $xetable.findRowIndexOf(afterFullData, row);\n              }\n\n              if (afIndex_1 === -1) {\n                throw new Error(errLog('vxe.error.unableInsert'));\n              }\n\n              afterFullData.splice.apply(afterFullData, __spreadArray([afIndex_1, 0], newRecords));\n              tableFullData.splice.apply(tableFullData, __spreadArray([$xetable.findRowIndexOf(tableFullData, row), 0], newRecords)); // 刷新单元格合并\n\n              mergeList.forEach(function (mergeItem) {\n                var mergeRowIndex = mergeItem.row,\n                    mergeRowspan = mergeItem.rowspan;\n\n                if (mergeRowIndex > afIndex_1) {\n                  mergeItem.row = mergeRowIndex + newRecords.length;\n                } else if (mergeRowIndex + mergeRowspan > afIndex_1) {\n                  mergeItem.rowspan = mergeRowspan + newRecords.length;\n                }\n              });\n            }\n          }\n        }\n\n        (_a = editStore.insertList).unshift.apply(_a, newRecords);\n\n        $xetable.updateFooter();\n        $xetable.cacheRowMap();\n        $xetable.handleTableData(treeConfig && transform);\n\n        if (!(treeConfig && transform)) {\n          $xetable.updateAfterDataIndex();\n        }\n\n        $xetable.checkSelectionStatus();\n\n        if (reactData.scrollYLoad) {\n          $xetable.updateScrollYSpace();\n        }\n\n        return nextTick().then(function () {\n          $xetable.updateCellAreas();\n          return $xetable.recalculate();\n        }).then(function () {\n          return {\n            row: newRecords.length ? newRecords[newRecords.length - 1] : null,\n            rows: newRecords\n          };\n        });\n      },\n\n      /**\n       * 删除指定行数据\n       * 如果传 row 则删除一行\n       * 如果传 rows 则删除多行\n       * 如果为空则删除所有\n       */\n      remove: function (rows) {\n        var treeConfig = props.treeConfig;\n        var mergeList = reactData.mergeList,\n            editStore = reactData.editStore,\n            selection = reactData.selection;\n        var tableFullTreeData = internalData.tableFullTreeData,\n            afterFullData = internalData.afterFullData,\n            tableFullData = internalData.tableFullData;\n        var checkboxOpts = computeCheckboxOpts.value;\n        var treeOpts = computeTreeOpts.value;\n        var transform = treeOpts.transform;\n        var actived = editStore.actived,\n            removeList = editStore.removeList,\n            insertList = editStore.insertList;\n        var property = checkboxOpts.checkField;\n        var rest = [];\n\n        if (!rows) {\n          rows = tableFullData;\n        } else if (!XEUtils.isArray(rows)) {\n          rows = [rows];\n        } // 如果是新增，则保存记录\n\n\n        rows.forEach(function (row) {\n          if (!$xetable.isInsertByRow(row)) {\n            removeList.push(row);\n          }\n        }); // 如果绑定了多选属性，则更新状态\n\n        if (!property) {\n          rows.forEach(function (row) {\n            var sIndex = $xetable.findRowIndexOf(selection, row);\n\n            if (sIndex > -1) {\n              selection.splice(sIndex, 1);\n            }\n          });\n        } // 从数据源中移除\n\n\n        if (tableFullData === rows) {\n          rows = rest = tableFullData.slice(0);\n          internalData.tableFullData = [];\n          internalData.afterFullData = [];\n          $xetable.clearMergeCells();\n        } else {\n          // 如果为虚拟树\n          if (treeConfig && transform) {\n            rows.forEach(function (row) {\n              var rowid = getRowid($xetable, row);\n              var matchObj = XEUtils.findTree(tableFullTreeData, function (item) {\n                return rowid === getRowid($xetable, item);\n              }, treeOpts);\n\n              if (matchObj) {\n                var rItems = matchObj.items.splice(matchObj.index, 1);\n                rest.push(rItems[0]);\n              }\n\n              var afIndex = $xetable.findRowIndexOf(afterFullData, row);\n\n              if (afIndex > -1) {\n                afterFullData.splice(afIndex, 1);\n              }\n            });\n          } else {\n            rows.forEach(function (row) {\n              var tfIndex = $xetable.findRowIndexOf(tableFullData, row);\n\n              if (tfIndex > -1) {\n                var rItems = tableFullData.splice(tfIndex, 1);\n                rest.push(rItems[0]);\n              }\n\n              var afIndex = $xetable.findRowIndexOf(afterFullData, row);\n\n              if (afIndex > -1) {\n                // 刷新单元格合并\n                mergeList.forEach(function (mergeItem) {\n                  var mergeRowIndex = mergeItem.row,\n                      mergeRowspan = mergeItem.rowspan;\n\n                  if (mergeRowIndex > afIndex) {\n                    mergeItem.row = mergeRowIndex - 1;\n                  } else if (mergeRowIndex + mergeRowspan > afIndex) {\n                    mergeItem.rowspan = mergeRowspan - 1;\n                  }\n                });\n                afterFullData.splice(afIndex, 1);\n              }\n            });\n          }\n        } // 如果当前行被激活编辑，则清除激活状态\n\n\n        if (actived.row && $xetable.findRowIndexOf(rows, actived.row) > -1) {\n          editMethods.clearActived();\n        } // 从新增中移除已删除的数据\n\n\n        rows.forEach(function (row) {\n          var iIndex = $xetable.findRowIndexOf(insertList, row);\n\n          if (iIndex > -1) {\n            insertList.splice(iIndex, 1);\n          }\n        });\n        $xetable.updateFooter();\n        $xetable.cacheRowMap();\n        $xetable.handleTableData(treeConfig && transform);\n\n        if (!(treeConfig && transform)) {\n          $xetable.updateAfterDataIndex();\n        }\n\n        $xetable.checkSelectionStatus();\n\n        if (reactData.scrollYLoad) {\n          $xetable.updateScrollYSpace();\n        }\n\n        return nextTick().then(function () {\n          $xetable.updateCellAreas();\n          return $xetable.recalculate();\n        }).then(function () {\n          return {\n            row: rest.length ? rest[rest.length - 1] : null,\n            rows: rest\n          };\n        });\n      },\n\n      /**\n       * 删除复选框选中的数据\n       */\n      removeCheckboxRow: function () {\n        return editMethods.remove($xetable.getCheckboxRecords()).then(function (params) {\n          $xetable.clearCheckboxRow();\n          return params;\n        });\n      },\n\n      /**\n       * 删除单选框选中的数据\n       */\n      removeRadioRow: function () {\n        var radioRecord = $xetable.getRadioRecord();\n        return editMethods.remove(radioRecord || []).then(function (params) {\n          $xetable.clearRadioRow();\n          return params;\n        });\n      },\n\n      /**\n       * 删除当前行选中的数据\n       */\n      removeCurrentRow: function () {\n        var currentRecord = $xetable.getCurrentRecord();\n        return editMethods.remove(currentRecord || []).then(function (params) {\n          $xetable.clearCurrentRow();\n          return params;\n        });\n      },\n\n      /**\n       * 获取表格数据集，包含新增、删除、修改\n       */\n      getRecordset: function () {\n        return {\n          insertRecords: editMethods.getInsertRecords(),\n          removeRecords: editMethods.getRemoveRecords(),\n          updateRecords: editMethods.getUpdateRecords()\n        };\n      },\n\n      /**\n       * 获取新增的临时数据\n       */\n      getInsertRecords: function () {\n        var treeConfig = props.treeConfig;\n        var editStore = reactData.editStore;\n        var tableFullTreeData = internalData.tableFullTreeData,\n            tableFullData = internalData.tableFullData;\n        var treeOpts = computeTreeOpts.value;\n        var insertList = editStore.insertList;\n        var insertRecords = [];\n\n        if (insertList.length) {\n          // 如果为虚拟树\n          if (treeConfig && treeOpts.transform) {\n            insertList.forEach(function (row) {\n              var rowid = getRowid($xetable, row);\n              var matchObj = XEUtils.findTree(tableFullTreeData, function (item) {\n                return rowid === getRowid($xetable, item);\n              }, treeOpts);\n\n              if (matchObj) {\n                insertRecords.push(row);\n              }\n            });\n          } else {\n            insertList.forEach(function (row) {\n              if ($xetable.findRowIndexOf(tableFullData, row) > -1) {\n                insertRecords.push(row);\n              }\n            });\n          }\n        }\n\n        return insertRecords;\n      },\n\n      /**\n       * 获取已删除的数据\n       */\n      getRemoveRecords: function () {\n        var editStore = reactData.editStore;\n        return editStore.removeList;\n      },\n\n      /**\n       * 获取更新数据\n       * 只精准匹配 row 的更改\n       * 如果是树表格，子节点更改状态不会影响父节点的更新状态\n       */\n      getUpdateRecords: function () {\n        var keepSource = props.keepSource,\n            treeConfig = props.treeConfig;\n        var tableFullData = internalData.tableFullData;\n        var treeOpts = computeTreeOpts.value;\n\n        if (keepSource) {\n          syncActivedCell();\n\n          if (treeConfig) {\n            return XEUtils.filterTree(tableFullData, function (row) {\n              return $xetable.isUpdateByRow(row);\n            }, treeOpts);\n          }\n\n          return tableFullData.filter(function (row) {\n            return $xetable.isUpdateByRow(row);\n          });\n        }\n\n        return [];\n      },\n      getActiveRecord: function () {\n        var editStore = reactData.editStore;\n        var afterFullData = internalData.afterFullData;\n        var el = refElem.value;\n        var _a = editStore.actived,\n            args = _a.args,\n            row = _a.row;\n\n        if (args && $xetable.findRowIndexOf(afterFullData, row) > -1 && el.querySelectorAll('.vxe-body--column.col--actived').length) {\n          return Object.assign({}, args);\n        }\n\n        return null;\n      },\n\n      /**\n       * 获取选中的单元格\n       */\n      getSelectedCell: function () {\n        var editStore = reactData.editStore;\n        var _a = editStore.selected,\n            args = _a.args,\n            column = _a.column;\n\n        if (args && column) {\n          return Object.assign({}, args);\n        }\n\n        return null;\n      },\n\n      /**\n       * 清除激活的编辑\n       */\n      clearActived: function (evnt) {\n        var editStore = reactData.editStore;\n        var actived = editStore.actived;\n        var row = actived.row,\n            column = actived.column;\n\n        if (row || column) {\n          syncActivedCell();\n          actived.args = null;\n          actived.row = null;\n          actived.column = null;\n          $xetable.updateFooter();\n          $xetable.dispatchEvent('edit-closed', {\n            row: row,\n            rowIndex: $xetable.getRowIndex(row),\n            $rowIndex: $xetable.getVMRowIndex(row),\n            column: column,\n            columnIndex: $xetable.getColumnIndex(column),\n            $columnIndex: $xetable.getVMColumnIndex(column)\n          }, evnt || null);\n        }\n\n        return ($xetable.clearValidate ? $xetable.clearValidate() : nextTick()).then(function () {\n          return $xetable.recalculate();\n        });\n      },\n\n      /**\n       * 清除所选中源状态\n       */\n      clearSelected: function () {\n        var editStore = reactData.editStore;\n        var selected = editStore.selected;\n        selected.row = null;\n        selected.column = null;\n        removeCellSelectedClass();\n        return nextTick();\n      },\n\n      /**\n       * 判断行是否为激活编辑状态\n       * @param {Row} row 行对象\n       */\n      isActiveByRow: function (row) {\n        var editStore = reactData.editStore;\n        return editStore.actived.row === row;\n      },\n\n      /**\n       * 激活行编辑\n       */\n      setActiveRow: function (row) {\n        var visibleColumn = internalData.visibleColumn;\n        return $xetable.setActiveCell(row, XEUtils.find(visibleColumn, function (column) {\n          return isEnableConf(column.editRender);\n        }));\n      },\n\n      /**\n       * 激活单元格编辑\n       */\n      setActiveCell: function (row, fieldOrColumn) {\n        var editConfig = props.editConfig;\n        var column = XEUtils.isString(fieldOrColumn) ? $xetable.getColumnByField(fieldOrColumn) : fieldOrColumn;\n\n        if (row && column && isEnableConf(editConfig) && isEnableConf(column.editRender)) {\n          return $xetable.scrollToRow(row, column).then(function () {\n            var cell = $xetable.getCell(row, column);\n\n            if (cell) {\n              editPrivateMethods.handleActived({\n                row: row,\n                rowIndex: $xetable.getRowIndex(row),\n                column: column,\n                columnIndex: $xetable.getColumnIndex(column),\n                cell: cell,\n                $table: $xetable\n              });\n              internalData._lastCallTime = Date.now();\n            }\n\n            return nextTick();\n          });\n        }\n\n        return nextTick();\n      },\n\n      /**\n       * 只对 trigger=dblclick 有效，选中单元格\n       */\n      setSelectCell: function (row, fieldOrColumn) {\n        var tableData = reactData.tableData;\n        var visibleColumn = internalData.visibleColumn;\n        var editOpts = computeEditOpts.value;\n        var column = XEUtils.isString(fieldOrColumn) ? $xetable.getColumnByField(fieldOrColumn) : fieldOrColumn;\n\n        if (row && column && editOpts.trigger !== 'manual') {\n          var rowIndex = $xetable.findRowIndexOf(tableData, row);\n\n          if (rowIndex > -1 && column) {\n            var cell = $xetable.getCell(row, column);\n            var params = {\n              row: row,\n              rowIndex: rowIndex,\n              column: column,\n              columnIndex: visibleColumn.indexOf(column),\n              cell: cell\n            };\n            $xetable.handleSelected(params, {});\n          }\n        }\n\n        return nextTick();\n      }\n    };\n    editPrivateMethods = {\n      /**\n       * 处理激活编辑\n       */\n      handleActived: function (params, evnt) {\n        var editConfig = props.editConfig,\n            mouseConfig = props.mouseConfig;\n        var editStore = reactData.editStore,\n            tableColumn = reactData.tableColumn;\n        var editOpts = computeEditOpts.value;\n        var mode = editOpts.mode,\n            activeMethod = editOpts.activeMethod;\n        var actived = editStore.actived;\n        var row = params.row,\n            column = params.column;\n        var editRender = column.editRender;\n        var cell = params.cell || $xetable.getCell(row, column);\n        params.cell = cell;\n\n        if (isEnableConf(editConfig) && isEnableConf(editRender) && cell) {\n          if (actived.row !== row || (mode === 'cell' ? actived.column !== column : false)) {\n            // 判断是否禁用编辑\n            var type = 'edit-disabled';\n\n            if (!activeMethod || activeMethod(__assign(__assign({}, params), {\n              $table: $xetable\n            }))) {\n              if (mouseConfig) {\n                editMethods.clearSelected();\n\n                if ($xetable.clearCellAreas) {\n                  $xetable.clearCellAreas();\n                  $xetable.clearCopyCellArea();\n                }\n              }\n\n              $xetable.closeTooltip();\n              editMethods.clearActived(evnt);\n              type = 'edit-actived';\n              column.renderHeight = cell.offsetHeight;\n              actived.args = params;\n              actived.row = row;\n              actived.column = column;\n\n              if (mode === 'row') {\n                tableColumn.forEach(function (column) {\n                  return getEditColumnModel(row, column);\n                });\n              } else {\n                getEditColumnModel(row, column);\n              }\n\n              nextTick(function () {\n                editPrivateMethods.handleFocus(params, evnt);\n              });\n            }\n\n            $xetable.dispatchEvent(type, {\n              row: row,\n              rowIndex: $xetable.getRowIndex(row),\n              $rowIndex: $xetable.getVMRowIndex(row),\n              column: column,\n              columnIndex: $xetable.getColumnIndex(column),\n              $columnIndex: $xetable.getVMColumnIndex(column)\n            }, evnt);\n          } else {\n            var oldColumn = actived.column;\n\n            if (mouseConfig) {\n              editMethods.clearSelected();\n\n              if ($xetable.clearCellAreas) {\n                $xetable.clearCellAreas();\n                $xetable.clearCopyCellArea();\n              }\n            }\n\n            if (oldColumn !== column) {\n              var oldModel = oldColumn.model;\n\n              if (oldModel.update) {\n                setCellValue(row, oldColumn, oldModel.value);\n              }\n\n              if ($xetable.clearValidate) {\n                $xetable.clearValidate();\n              }\n            }\n\n            column.renderHeight = cell.offsetHeight;\n            actived.args = params;\n            actived.column = column;\n            setTimeout(function () {\n              editPrivateMethods.handleFocus(params, evnt);\n            });\n          }\n\n          $xetable.focus();\n        }\n\n        return nextTick();\n      },\n\n      /**\n       * 处理聚焦\n       */\n      handleFocus: function (params) {\n        var row = params.row,\n            column = params.column,\n            cell = params.cell;\n        var editRender = column.editRender;\n\n        if (isEnableConf(editRender)) {\n          var compRender = renderer.get(editRender.name);\n          var autofocus = editRender.autofocus,\n              autoselect = editRender.autoselect;\n          var inputElem // 如果指定了聚焦 class\n          = void 0; // 如果指定了聚焦 class\n\n          if (autofocus) {\n            inputElem = cell.querySelector(autofocus);\n          } // 渲染器的聚焦处理\n\n\n          if (!inputElem && compRender && compRender.autofocus) {\n            inputElem = cell.querySelector(compRender.autofocus);\n          }\n\n          if (inputElem) {\n            inputElem.focus();\n\n            if (autoselect) {\n              inputElem.select();\n            } else {\n              // 保持一致行为，光标移到末端\n              if (browse.msie) {\n                var textRange = inputElem.createTextRange();\n                textRange.collapse(false);\n                textRange.select();\n              }\n            }\n          } else {\n            // 显示到可视区中\n            $xetable.scrollToRow(row, column);\n          }\n        }\n      },\n\n      /**\n       * 处理选中源\n       */\n      handleSelected: function (params, evnt) {\n        var mouseConfig = props.mouseConfig;\n        var editStore = reactData.editStore;\n        var mouseOpts = computeMouseOpts.value;\n        var editOpts = computeEditOpts.value;\n        var actived = editStore.actived,\n            selected = editStore.selected;\n        var row = params.row,\n            column = params.column;\n        var isMouseSelected = mouseConfig && mouseOpts.selected;\n\n        var selectMethod = function () {\n          if (isMouseSelected && (selected.row !== row || selected.column !== column)) {\n            if (actived.row !== row || (editOpts.mode === 'cell' ? actived.column !== column : false)) {\n              editMethods.clearActived(evnt);\n              editMethods.clearSelected();\n\n              if ($xetable.clearCellAreas) {\n                $xetable.clearCellAreas();\n                $xetable.clearCopyCellArea();\n              }\n\n              selected.args = params;\n              selected.row = row;\n              selected.column = column;\n\n              if (isMouseSelected) {\n                editPrivateMethods.addCellSelectedClass();\n              }\n\n              $xetable.focus();\n\n              if (evnt) {\n                $xetable.dispatchEvent('cell-selected', params, evnt);\n              }\n            }\n          }\n\n          return nextTick();\n        };\n\n        return selectMethod();\n      },\n      addCellSelectedClass: function () {\n        var editStore = reactData.editStore;\n        var selected = editStore.selected;\n        var row = selected.row,\n            column = selected.column;\n        removeCellSelectedClass();\n\n        if (row && column) {\n          var cell = $xetable.getCell(row, column);\n\n          if (cell) {\n            addClass(cell, 'col--selected');\n          }\n        }\n      }\n    };\n    return __assign(__assign({}, editMethods), editPrivateMethods);\n  },\n  setupGrid: function ($xegrid) {\n    return $xegrid.extendTableMethods(tableEditMethodKeys);\n  }\n};\nexport default editHook;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vxe-table/es/edit/src/hook.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__spreadArray","to","from","il","j","nextTick","XEUtils","renderer","isEnableConf","getCellValue","setCellValue","getRowid","browse","removeClass","addClass","warnLog","errLog","getLog","tableEditMethodKeys","editHook","setupTable","$xetable","props","reactData","internalData","refElem","getRefMaps","_a","getComputeMaps","computeMouseOpts","computeEditOpts","computeCheckboxOpts","computeTreeOpts","editMethods","editPrivateMethods","getEditColumnModel","row","column","model","editRender","value","update","setEditColumnModel","removeCellSelectedClass","el","cell","querySelector","syncActivedCell","editStore","tableColumn","editOpts","actived","mode","forEach","insertTreeRow","newRecords","isAppend","tableFullTreeData","afterFullData","fullDataRowIdData","fullAllDataRowIdData","treeOpts","rowField","parentField","children","mapChildren","funcName","item","parentRowId","rowid","matchObj","findTree","parentRow","parentRest","parentLevel","level","parentChilds","isArray","rest","seq","index","_index","$index","items","parent","process","env","NODE_ENV","insert","records","insertAt","treeConfig","mergeList","tableFullData","transform","map","record","defineField","unshift","mergeItem","mergeRowIndex","push","mergeRowspan","rowspan","matchObj_1","parentRow_1","parentChilds_1","parentLevel_1","splice","Error","afIndex_1","isNumber","findRowIndexOf","insertList","updateFooter","cacheRowMap","handleTableData","updateAfterDataIndex","checkSelectionStatus","scrollYLoad","updateScrollYSpace","then","updateCellAreas","recalculate","rows","remove","selection","checkboxOpts","removeList","property","checkField","isInsertByRow","sIndex","slice","clearMergeCells","rItems","afIndex","tfIndex","clearActived","iIndex","removeCheckboxRow","getCheckboxRecords","params","clearCheckboxRow","removeRadioRow","radioRecord","getRadioRecord","clearRadioRow","removeCurrentRow","currentRecord","getCurrentRecord","clearCurrentRow","getRecordset","insertRecords","getInsertRecords","removeRecords","getRemoveRecords","updateRecords","getUpdateRecords","keepSource","filterTree","isUpdateByRow","filter","getActiveRecord","args","querySelectorAll","getSelectedCell","selected","evnt","dispatchEvent","rowIndex","getRowIndex","$rowIndex","getVMRowIndex","columnIndex","getColumnIndex","$columnIndex","getVMColumnIndex","clearValidate","clearSelected","isActiveByRow","setActiveRow","visibleColumn","setActiveCell","find","fieldOrColumn","editConfig","isString","getColumnByField","scrollToRow","getCell","handleActived","$table","_lastCallTime","Date","now","setSelectCell","tableData","trigger","indexOf","handleSelected","mouseConfig","activeMethod","type","clearCellAreas","clearCopyCellArea","closeTooltip","renderHeight","offsetHeight","handleFocus","oldColumn","oldModel","setTimeout","focus","compRender","get","name","autofocus","autoselect","inputElem","select","msie","textRange","createTextRange","collapse","mouseOpts","isMouseSelected","selectMethod","addCellSelectedClass","setupGrid","$xegrid","extendTableMethods"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport { nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { renderer } from '../../v-x-e-table';\nimport { isEnableConf } from '../../tools/utils';\nimport { getCellValue, setCellValue, getRowid } from '../../table/src/util';\nimport { browse, removeClass, addClass } from '../../tools/dom';\nimport { warnLog, errLog, getLog } from '../../tools/log';\nvar tableEditMethodKeys = ['insert', 'insertAt', 'remove', 'removeCheckboxRow', 'removeRadioRow', 'removeCurrentRow', 'getRecordset', 'getInsertRecords', 'getRemoveRecords', 'getUpdateRecords', 'getActiveRecord', 'getSelectedCell', 'clearActived', 'clearSelected', 'isActiveByRow', 'setActiveRow', 'setActiveCell', 'setSelectCell'];\nvar editHook = {\n    setupTable: function ($xetable) {\n        var props = $xetable.props, reactData = $xetable.reactData, internalData = $xetable.internalData;\n        var refElem = $xetable.getRefMaps().refElem;\n        var _a = $xetable.getComputeMaps(), computeMouseOpts = _a.computeMouseOpts, computeEditOpts = _a.computeEditOpts, computeCheckboxOpts = _a.computeCheckboxOpts, computeTreeOpts = _a.computeTreeOpts;\n        var editMethods = {};\n        var editPrivateMethods = {};\n        var getEditColumnModel = function (row, column) {\n            var model = column.model, editRender = column.editRender;\n            if (editRender) {\n                model.value = getCellValue(row, column);\n                model.update = false;\n            }\n        };\n        var setEditColumnModel = function (row, column) {\n            var model = column.model, editRender = column.editRender;\n            if (editRender && model.update) {\n                setCellValue(row, column, model.value);\n                model.update = false;\n                model.value = null;\n            }\n        };\n        var removeCellSelectedClass = function () {\n            var el = refElem.value;\n            if (el) {\n                var cell = el.querySelector('.col--selected');\n                if (cell) {\n                    removeClass(cell, 'col--selected');\n                }\n            }\n        };\n        function syncActivedCell() {\n            var editStore = reactData.editStore, tableColumn = reactData.tableColumn;\n            var editOpts = computeEditOpts.value;\n            var actived = editStore.actived;\n            var row = actived.row, column = actived.column;\n            if (row || column) {\n                if (editOpts.mode === 'row') {\n                    tableColumn.forEach(function (column) { return setEditColumnModel(row, column); });\n                }\n                else {\n                    setEditColumnModel(row, column);\n                }\n            }\n        }\n        function insertTreeRow(newRecords, isAppend) {\n            var tableFullTreeData = internalData.tableFullTreeData, afterFullData = internalData.afterFullData, fullDataRowIdData = internalData.fullDataRowIdData, fullAllDataRowIdData = internalData.fullAllDataRowIdData;\n            var treeOpts = computeTreeOpts.value;\n            var rowField = treeOpts.rowField, parentField = treeOpts.parentField, children = treeOpts.children, mapChildren = treeOpts.mapChildren;\n            var funcName = isAppend ? 'push' : 'unshift';\n            newRecords.forEach(function (item) {\n                var parentRowId = item[parentField];\n                var rowid = getRowid($xetable, item);\n                var matchObj = parentRowId ? XEUtils.findTree(tableFullTreeData, function (item) { return parentRowId === item[rowField]; }, { children: mapChildren }) : null;\n                if (matchObj) {\n                    var parentRow = matchObj.item;\n                    var parentRest = fullAllDataRowIdData[getRowid($xetable, parentRow)];\n                    var parentLevel = parentRest ? parentRest.level : 0;\n                    var parentChilds = parentRow[children];\n                    if (!XEUtils.isArray(parentChilds)) {\n                        parentChilds = parentRow[children] = [];\n                    }\n                    parentChilds[funcName](item);\n                    var rest = { row: item, rowid: rowid, seq: -1, index: -1, _index: -1, $index: -1, items: parentChilds, parent: parent, level: parentLevel + 1 };\n                    fullDataRowIdData[rowid] = rest;\n                    fullAllDataRowIdData[rowid] = rest;\n                }\n                else {\n                    if (process.env.NODE_ENV === 'development') {\n                        if (parentRowId) {\n                            warnLog('vxe.error.unableInsert');\n                        }\n                    }\n                    afterFullData[funcName](item);\n                    tableFullTreeData[funcName](item);\n                    var rest = { row: item, rowid: rowid, seq: -1, index: -1, _index: -1, $index: -1, items: tableFullTreeData, parent: null, level: 0 };\n                    fullDataRowIdData[rowid] = rest;\n                    fullAllDataRowIdData[rowid] = rest;\n                }\n            });\n        }\n        editMethods = {\n            /**\n             * 往表格中插入临时数据\n             *\n             * @param {*} records\n             */\n            insert: function (records) {\n                return editMethods.insertAt(records, null);\n            },\n            /**\n             * 往表格指定行中插入临时数据\n             * 如果 row 为空则从插入到顶部，如果为树结构，则插入到目标节点顶部\n             * 如果 row 为 -1 则从插入到底部，如果为树结构，则插入到目标节点底部\n             * 如果 row 为有效行则插入到该行的位置，如果为树结构，则有插入到效的目标节点该行的位置\n             * @param {Object/Array} records 新的数据\n             * @param {Row} row 指定行\n             */\n            insertAt: function (records, row) {\n                var _a;\n                var treeConfig = props.treeConfig;\n                var mergeList = reactData.mergeList, editStore = reactData.editStore;\n                var tableFullTreeData = internalData.tableFullTreeData, afterFullData = internalData.afterFullData, tableFullData = internalData.tableFullData, fullDataRowIdData = internalData.fullDataRowIdData, fullAllDataRowIdData = internalData.fullAllDataRowIdData;\n                var treeOpts = computeTreeOpts.value;\n                var transform = treeOpts.transform, rowField = treeOpts.rowField, mapChildren = treeOpts.mapChildren;\n                if (!XEUtils.isArray(records)) {\n                    records = [records];\n                }\n                var newRecords = records.map(function (record) { return $xetable.defineField(Object.assign({}, record)); });\n                if (!row) {\n                    // 如果为虚拟树\n                    if (treeConfig && transform) {\n                        insertTreeRow(newRecords, false);\n                    }\n                    else {\n                        afterFullData.unshift.apply(afterFullData, newRecords);\n                        tableFullData.unshift.apply(tableFullData, newRecords);\n                        // 刷新单元格合并\n                        mergeList.forEach(function (mergeItem) {\n                            var mergeRowIndex = mergeItem.row;\n                            if (mergeRowIndex > 0) {\n                                mergeItem.row = mergeRowIndex + newRecords.length;\n                            }\n                        });\n                    }\n                }\n                else {\n                    if (row === -1) {\n                        // 如果为虚拟树\n                        if (treeConfig && transform) {\n                            insertTreeRow(newRecords, true);\n                        }\n                        else {\n                            afterFullData.push.apply(afterFullData, newRecords);\n                            tableFullData.push.apply(tableFullData, newRecords);\n                            // 刷新单元格合并\n                            mergeList.forEach(function (mergeItem) {\n                                var mergeRowIndex = mergeItem.row, mergeRowspan = mergeItem.rowspan;\n                                if (mergeRowIndex + mergeRowspan > afterFullData.length) {\n                                    mergeItem.rowspan = mergeRowspan + newRecords.length;\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        // 如果为虚拟树\n                        if (treeConfig && transform) {\n                            var matchObj_1 = XEUtils.findTree(tableFullTreeData, function (item) { return row[rowField] === item[rowField]; }, { children: mapChildren });\n                            if (matchObj_1) {\n                                var parentRow_1 = matchObj_1.parent;\n                                var parentChilds_1 = matchObj_1.items;\n                                var parentRest = fullAllDataRowIdData[getRowid($xetable, parentRow_1)];\n                                var parentLevel_1 = parentRest ? parentRest.level : 0;\n                                newRecords.forEach(function (item, i) {\n                                    var rowid = getRowid($xetable, item);\n                                    if (process.env.NODE_ENV === 'development') {\n                                        if (item[treeOpts.parentField]) {\n                                            if (parentRow_1 && item[treeOpts.parentField] !== parentRow_1[rowField]) {\n                                                errLog('vxe.error.errProp', [treeOpts.parentField + \"=\" + item[treeOpts.parentField], treeOpts.parentField + \"=\" + parentRow_1[rowField]]);\n                                            }\n                                        }\n                                    }\n                                    if (parentRow_1) {\n                                        item[treeOpts.parentField] = parentRow_1[rowField];\n                                    }\n                                    parentChilds_1.splice(matchObj_1.index + i, 0, item);\n                                    var rest = { row: item, rowid: rowid, seq: -1, index: -1, _index: -1, $index: -1, items: parentChilds_1, parent: parentRow_1, level: parentLevel_1 + 1 };\n                                    fullDataRowIdData[rowid] = rest;\n                                    fullAllDataRowIdData[rowid] = rest;\n                                });\n                            }\n                            else {\n                                if (process.env.NODE_ENV === 'development') {\n                                    warnLog('vxe.error.unableInsert');\n                                }\n                                insertTreeRow(newRecords, true);\n                            }\n                        }\n                        else {\n                            if (treeConfig) {\n                                throw new Error(getLog('vxe.error.noTree', ['insert']));\n                            }\n                            var afIndex_1 = -1;\n                            // 如果是可视索引\n                            if (XEUtils.isNumber(row)) {\n                                if (row < afterFullData.length) {\n                                    afIndex_1 = row;\n                                }\n                            }\n                            else {\n                                afIndex_1 = $xetable.findRowIndexOf(afterFullData, row);\n                            }\n                            if (afIndex_1 === -1) {\n                                throw new Error(errLog('vxe.error.unableInsert'));\n                            }\n                            afterFullData.splice.apply(afterFullData, __spreadArray([afIndex_1, 0], newRecords));\n                            tableFullData.splice.apply(tableFullData, __spreadArray([$xetable.findRowIndexOf(tableFullData, row), 0], newRecords));\n                            // 刷新单元格合并\n                            mergeList.forEach(function (mergeItem) {\n                                var mergeRowIndex = mergeItem.row, mergeRowspan = mergeItem.rowspan;\n                                if (mergeRowIndex > afIndex_1) {\n                                    mergeItem.row = mergeRowIndex + newRecords.length;\n                                }\n                                else if (mergeRowIndex + mergeRowspan > afIndex_1) {\n                                    mergeItem.rowspan = mergeRowspan + newRecords.length;\n                                }\n                            });\n                        }\n                    }\n                }\n                (_a = editStore.insertList).unshift.apply(_a, newRecords);\n                $xetable.updateFooter();\n                $xetable.cacheRowMap();\n                $xetable.handleTableData(treeConfig && transform);\n                if (!(treeConfig && transform)) {\n                    $xetable.updateAfterDataIndex();\n                }\n                $xetable.checkSelectionStatus();\n                if (reactData.scrollYLoad) {\n                    $xetable.updateScrollYSpace();\n                }\n                return nextTick().then(function () {\n                    $xetable.updateCellAreas();\n                    return $xetable.recalculate();\n                }).then(function () {\n                    return {\n                        row: newRecords.length ? newRecords[newRecords.length - 1] : null,\n                        rows: newRecords\n                    };\n                });\n            },\n            /**\n             * 删除指定行数据\n             * 如果传 row 则删除一行\n             * 如果传 rows 则删除多行\n             * 如果为空则删除所有\n             */\n            remove: function (rows) {\n                var treeConfig = props.treeConfig;\n                var mergeList = reactData.mergeList, editStore = reactData.editStore, selection = reactData.selection;\n                var tableFullTreeData = internalData.tableFullTreeData, afterFullData = internalData.afterFullData, tableFullData = internalData.tableFullData;\n                var checkboxOpts = computeCheckboxOpts.value;\n                var treeOpts = computeTreeOpts.value;\n                var transform = treeOpts.transform;\n                var actived = editStore.actived, removeList = editStore.removeList, insertList = editStore.insertList;\n                var property = checkboxOpts.checkField;\n                var rest = [];\n                if (!rows) {\n                    rows = tableFullData;\n                }\n                else if (!XEUtils.isArray(rows)) {\n                    rows = [rows];\n                }\n                // 如果是新增，则保存记录\n                rows.forEach(function (row) {\n                    if (!$xetable.isInsertByRow(row)) {\n                        removeList.push(row);\n                    }\n                });\n                // 如果绑定了多选属性，则更新状态\n                if (!property) {\n                    rows.forEach(function (row) {\n                        var sIndex = $xetable.findRowIndexOf(selection, row);\n                        if (sIndex > -1) {\n                            selection.splice(sIndex, 1);\n                        }\n                    });\n                }\n                // 从数据源中移除\n                if (tableFullData === rows) {\n                    rows = rest = tableFullData.slice(0);\n                    internalData.tableFullData = [];\n                    internalData.afterFullData = [];\n                    $xetable.clearMergeCells();\n                }\n                else {\n                    // 如果为虚拟树\n                    if (treeConfig && transform) {\n                        rows.forEach(function (row) {\n                            var rowid = getRowid($xetable, row);\n                            var matchObj = XEUtils.findTree(tableFullTreeData, function (item) { return rowid === getRowid($xetable, item); }, treeOpts);\n                            if (matchObj) {\n                                var rItems = matchObj.items.splice(matchObj.index, 1);\n                                rest.push(rItems[0]);\n                            }\n                            var afIndex = $xetable.findRowIndexOf(afterFullData, row);\n                            if (afIndex > -1) {\n                                afterFullData.splice(afIndex, 1);\n                            }\n                        });\n                    }\n                    else {\n                        rows.forEach(function (row) {\n                            var tfIndex = $xetable.findRowIndexOf(tableFullData, row);\n                            if (tfIndex > -1) {\n                                var rItems = tableFullData.splice(tfIndex, 1);\n                                rest.push(rItems[0]);\n                            }\n                            var afIndex = $xetable.findRowIndexOf(afterFullData, row);\n                            if (afIndex > -1) {\n                                // 刷新单元格合并\n                                mergeList.forEach(function (mergeItem) {\n                                    var mergeRowIndex = mergeItem.row, mergeRowspan = mergeItem.rowspan;\n                                    if (mergeRowIndex > afIndex) {\n                                        mergeItem.row = mergeRowIndex - 1;\n                                    }\n                                    else if (mergeRowIndex + mergeRowspan > afIndex) {\n                                        mergeItem.rowspan = mergeRowspan - 1;\n                                    }\n                                });\n                                afterFullData.splice(afIndex, 1);\n                            }\n                        });\n                    }\n                }\n                // 如果当前行被激活编辑，则清除激活状态\n                if (actived.row && $xetable.findRowIndexOf(rows, actived.row) > -1) {\n                    editMethods.clearActived();\n                }\n                // 从新增中移除已删除的数据\n                rows.forEach(function (row) {\n                    var iIndex = $xetable.findRowIndexOf(insertList, row);\n                    if (iIndex > -1) {\n                        insertList.splice(iIndex, 1);\n                    }\n                });\n                $xetable.updateFooter();\n                $xetable.cacheRowMap();\n                $xetable.handleTableData(treeConfig && transform);\n                if (!(treeConfig && transform)) {\n                    $xetable.updateAfterDataIndex();\n                }\n                $xetable.checkSelectionStatus();\n                if (reactData.scrollYLoad) {\n                    $xetable.updateScrollYSpace();\n                }\n                return nextTick().then(function () {\n                    $xetable.updateCellAreas();\n                    return $xetable.recalculate();\n                }).then(function () {\n                    return { row: rest.length ? rest[rest.length - 1] : null, rows: rest };\n                });\n            },\n            /**\n             * 删除复选框选中的数据\n             */\n            removeCheckboxRow: function () {\n                return editMethods.remove($xetable.getCheckboxRecords()).then(function (params) {\n                    $xetable.clearCheckboxRow();\n                    return params;\n                });\n            },\n            /**\n             * 删除单选框选中的数据\n             */\n            removeRadioRow: function () {\n                var radioRecord = $xetable.getRadioRecord();\n                return editMethods.remove(radioRecord || []).then(function (params) {\n                    $xetable.clearRadioRow();\n                    return params;\n                });\n            },\n            /**\n             * 删除当前行选中的数据\n             */\n            removeCurrentRow: function () {\n                var currentRecord = $xetable.getCurrentRecord();\n                return editMethods.remove(currentRecord || []).then(function (params) {\n                    $xetable.clearCurrentRow();\n                    return params;\n                });\n            },\n            /**\n             * 获取表格数据集，包含新增、删除、修改\n             */\n            getRecordset: function () {\n                return {\n                    insertRecords: editMethods.getInsertRecords(),\n                    removeRecords: editMethods.getRemoveRecords(),\n                    updateRecords: editMethods.getUpdateRecords()\n                };\n            },\n            /**\n             * 获取新增的临时数据\n             */\n            getInsertRecords: function () {\n                var treeConfig = props.treeConfig;\n                var editStore = reactData.editStore;\n                var tableFullTreeData = internalData.tableFullTreeData, tableFullData = internalData.tableFullData;\n                var treeOpts = computeTreeOpts.value;\n                var insertList = editStore.insertList;\n                var insertRecords = [];\n                if (insertList.length) {\n                    // 如果为虚拟树\n                    if (treeConfig && treeOpts.transform) {\n                        insertList.forEach(function (row) {\n                            var rowid = getRowid($xetable, row);\n                            var matchObj = XEUtils.findTree(tableFullTreeData, function (item) { return rowid === getRowid($xetable, item); }, treeOpts);\n                            if (matchObj) {\n                                insertRecords.push(row);\n                            }\n                        });\n                    }\n                    else {\n                        insertList.forEach(function (row) {\n                            if ($xetable.findRowIndexOf(tableFullData, row) > -1) {\n                                insertRecords.push(row);\n                            }\n                        });\n                    }\n                }\n                return insertRecords;\n            },\n            /**\n             * 获取已删除的数据\n             */\n            getRemoveRecords: function () {\n                var editStore = reactData.editStore;\n                return editStore.removeList;\n            },\n            /**\n             * 获取更新数据\n             * 只精准匹配 row 的更改\n             * 如果是树表格，子节点更改状态不会影响父节点的更新状态\n             */\n            getUpdateRecords: function () {\n                var keepSource = props.keepSource, treeConfig = props.treeConfig;\n                var tableFullData = internalData.tableFullData;\n                var treeOpts = computeTreeOpts.value;\n                if (keepSource) {\n                    syncActivedCell();\n                    if (treeConfig) {\n                        return XEUtils.filterTree(tableFullData, function (row) { return $xetable.isUpdateByRow(row); }, treeOpts);\n                    }\n                    return tableFullData.filter(function (row) { return $xetable.isUpdateByRow(row); });\n                }\n                return [];\n            },\n            getActiveRecord: function () {\n                var editStore = reactData.editStore;\n                var afterFullData = internalData.afterFullData;\n                var el = refElem.value;\n                var _a = editStore.actived, args = _a.args, row = _a.row;\n                if (args && $xetable.findRowIndexOf(afterFullData, row) > -1 && el.querySelectorAll('.vxe-body--column.col--actived').length) {\n                    return Object.assign({}, args);\n                }\n                return null;\n            },\n            /**\n             * 获取选中的单元格\n             */\n            getSelectedCell: function () {\n                var editStore = reactData.editStore;\n                var _a = editStore.selected, args = _a.args, column = _a.column;\n                if (args && column) {\n                    return Object.assign({}, args);\n                }\n                return null;\n            },\n            /**\n             * 清除激活的编辑\n             */\n            clearActived: function (evnt) {\n                var editStore = reactData.editStore;\n                var actived = editStore.actived;\n                var row = actived.row, column = actived.column;\n                if (row || column) {\n                    syncActivedCell();\n                    actived.args = null;\n                    actived.row = null;\n                    actived.column = null;\n                    $xetable.updateFooter();\n                    $xetable.dispatchEvent('edit-closed', {\n                        row: row,\n                        rowIndex: $xetable.getRowIndex(row),\n                        $rowIndex: $xetable.getVMRowIndex(row),\n                        column: column,\n                        columnIndex: $xetable.getColumnIndex(column),\n                        $columnIndex: $xetable.getVMColumnIndex(column)\n                    }, evnt || null);\n                }\n                return ($xetable.clearValidate ? $xetable.clearValidate() : nextTick()).then(function () { return $xetable.recalculate(); });\n            },\n            /**\n             * 清除所选中源状态\n             */\n            clearSelected: function () {\n                var editStore = reactData.editStore;\n                var selected = editStore.selected;\n                selected.row = null;\n                selected.column = null;\n                removeCellSelectedClass();\n                return nextTick();\n            },\n            /**\n             * 判断行是否为激活编辑状态\n             * @param {Row} row 行对象\n             */\n            isActiveByRow: function (row) {\n                var editStore = reactData.editStore;\n                return editStore.actived.row === row;\n            },\n            /**\n             * 激活行编辑\n             */\n            setActiveRow: function (row) {\n                var visibleColumn = internalData.visibleColumn;\n                return $xetable.setActiveCell(row, XEUtils.find(visibleColumn, function (column) { return isEnableConf(column.editRender); }));\n            },\n            /**\n             * 激活单元格编辑\n             */\n            setActiveCell: function (row, fieldOrColumn) {\n                var editConfig = props.editConfig;\n                var column = XEUtils.isString(fieldOrColumn) ? $xetable.getColumnByField(fieldOrColumn) : fieldOrColumn;\n                if (row && column && isEnableConf(editConfig) && isEnableConf(column.editRender)) {\n                    return $xetable.scrollToRow(row, column).then(function () {\n                        var cell = $xetable.getCell(row, column);\n                        if (cell) {\n                            editPrivateMethods.handleActived({ row: row, rowIndex: $xetable.getRowIndex(row), column: column, columnIndex: $xetable.getColumnIndex(column), cell: cell, $table: $xetable });\n                            internalData._lastCallTime = Date.now();\n                        }\n                        return nextTick();\n                    });\n                }\n                return nextTick();\n            },\n            /**\n             * 只对 trigger=dblclick 有效，选中单元格\n             */\n            setSelectCell: function (row, fieldOrColumn) {\n                var tableData = reactData.tableData;\n                var visibleColumn = internalData.visibleColumn;\n                var editOpts = computeEditOpts.value;\n                var column = XEUtils.isString(fieldOrColumn) ? $xetable.getColumnByField(fieldOrColumn) : fieldOrColumn;\n                if (row && column && editOpts.trigger !== 'manual') {\n                    var rowIndex = $xetable.findRowIndexOf(tableData, row);\n                    if (rowIndex > -1 && column) {\n                        var cell = $xetable.getCell(row, column);\n                        var params = { row: row, rowIndex: rowIndex, column: column, columnIndex: visibleColumn.indexOf(column), cell: cell };\n                        $xetable.handleSelected(params, {});\n                    }\n                }\n                return nextTick();\n            }\n        };\n        editPrivateMethods = {\n            /**\n             * 处理激活编辑\n             */\n            handleActived: function (params, evnt) {\n                var editConfig = props.editConfig, mouseConfig = props.mouseConfig;\n                var editStore = reactData.editStore, tableColumn = reactData.tableColumn;\n                var editOpts = computeEditOpts.value;\n                var mode = editOpts.mode, activeMethod = editOpts.activeMethod;\n                var actived = editStore.actived;\n                var row = params.row, column = params.column;\n                var editRender = column.editRender;\n                var cell = (params.cell || $xetable.getCell(row, column));\n                params.cell = cell;\n                if (isEnableConf(editConfig) && isEnableConf(editRender) && cell) {\n                    if (actived.row !== row || (mode === 'cell' ? actived.column !== column : false)) {\n                        // 判断是否禁用编辑\n                        var type = 'edit-disabled';\n                        if (!activeMethod || activeMethod(__assign(__assign({}, params), { $table: $xetable }))) {\n                            if (mouseConfig) {\n                                editMethods.clearSelected();\n                                if ($xetable.clearCellAreas) {\n                                    $xetable.clearCellAreas();\n                                    $xetable.clearCopyCellArea();\n                                }\n                            }\n                            $xetable.closeTooltip();\n                            editMethods.clearActived(evnt);\n                            type = 'edit-actived';\n                            column.renderHeight = cell.offsetHeight;\n                            actived.args = params;\n                            actived.row = row;\n                            actived.column = column;\n                            if (mode === 'row') {\n                                tableColumn.forEach(function (column) { return getEditColumnModel(row, column); });\n                            }\n                            else {\n                                getEditColumnModel(row, column);\n                            }\n                            nextTick(function () {\n                                editPrivateMethods.handleFocus(params, evnt);\n                            });\n                        }\n                        $xetable.dispatchEvent(type, {\n                            row: row,\n                            rowIndex: $xetable.getRowIndex(row),\n                            $rowIndex: $xetable.getVMRowIndex(row),\n                            column: column,\n                            columnIndex: $xetable.getColumnIndex(column),\n                            $columnIndex: $xetable.getVMColumnIndex(column)\n                        }, evnt);\n                    }\n                    else {\n                        var oldColumn = actived.column;\n                        if (mouseConfig) {\n                            editMethods.clearSelected();\n                            if ($xetable.clearCellAreas) {\n                                $xetable.clearCellAreas();\n                                $xetable.clearCopyCellArea();\n                            }\n                        }\n                        if (oldColumn !== column) {\n                            var oldModel = oldColumn.model;\n                            if (oldModel.update) {\n                                setCellValue(row, oldColumn, oldModel.value);\n                            }\n                            if ($xetable.clearValidate) {\n                                $xetable.clearValidate();\n                            }\n                        }\n                        column.renderHeight = cell.offsetHeight;\n                        actived.args = params;\n                        actived.column = column;\n                        setTimeout(function () {\n                            editPrivateMethods.handleFocus(params, evnt);\n                        });\n                    }\n                    $xetable.focus();\n                }\n                return nextTick();\n            },\n            /**\n             * 处理聚焦\n             */\n            handleFocus: function (params) {\n                var row = params.row, column = params.column, cell = params.cell;\n                var editRender = column.editRender;\n                if (isEnableConf(editRender)) {\n                    var compRender = renderer.get(editRender.name);\n                    var autofocus = editRender.autofocus, autoselect = editRender.autoselect;\n                    var inputElem \n                    // 如果指定了聚焦 class\n                    = void 0;\n                    // 如果指定了聚焦 class\n                    if (autofocus) {\n                        inputElem = cell.querySelector(autofocus);\n                    }\n                    // 渲染器的聚焦处理\n                    if (!inputElem && compRender && compRender.autofocus) {\n                        inputElem = cell.querySelector(compRender.autofocus);\n                    }\n                    if (inputElem) {\n                        inputElem.focus();\n                        if (autoselect) {\n                            inputElem.select();\n                        }\n                        else {\n                            // 保持一致行为，光标移到末端\n                            if (browse.msie) {\n                                var textRange = inputElem.createTextRange();\n                                textRange.collapse(false);\n                                textRange.select();\n                            }\n                        }\n                    }\n                    else {\n                        // 显示到可视区中\n                        $xetable.scrollToRow(row, column);\n                    }\n                }\n            },\n            /**\n             * 处理选中源\n             */\n            handleSelected: function (params, evnt) {\n                var mouseConfig = props.mouseConfig;\n                var editStore = reactData.editStore;\n                var mouseOpts = computeMouseOpts.value;\n                var editOpts = computeEditOpts.value;\n                var actived = editStore.actived, selected = editStore.selected;\n                var row = params.row, column = params.column;\n                var isMouseSelected = mouseConfig && mouseOpts.selected;\n                var selectMethod = function () {\n                    if (isMouseSelected && (selected.row !== row || selected.column !== column)) {\n                        if (actived.row !== row || (editOpts.mode === 'cell' ? actived.column !== column : false)) {\n                            editMethods.clearActived(evnt);\n                            editMethods.clearSelected();\n                            if ($xetable.clearCellAreas) {\n                                $xetable.clearCellAreas();\n                                $xetable.clearCopyCellArea();\n                            }\n                            selected.args = params;\n                            selected.row = row;\n                            selected.column = column;\n                            if (isMouseSelected) {\n                                editPrivateMethods.addCellSelectedClass();\n                            }\n                            $xetable.focus();\n                            if (evnt) {\n                                $xetable.dispatchEvent('cell-selected', params, evnt);\n                            }\n                        }\n                    }\n                    return nextTick();\n                };\n                return selectMethod();\n            },\n            addCellSelectedClass: function () {\n                var editStore = reactData.editStore;\n                var selected = editStore.selected;\n                var row = selected.row, column = selected.column;\n                removeCellSelectedClass();\n                if (row && column) {\n                    var cell = $xetable.getCell(row, column);\n                    if (cell) {\n                        addClass(cell, 'col--selected');\n                    }\n                }\n            }\n        };\n        return __assign(__assign({}, editMethods), editPrivateMethods);\n    },\n    setupGrid: function ($xegrid) {\n        return $xegrid.extendTableMethods(tableEditMethodKeys);\n    }\n};\nexport default editHook;\n"]},"metadata":{},"sourceType":"module"}