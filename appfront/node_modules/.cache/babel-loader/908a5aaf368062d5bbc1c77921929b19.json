{"ast":null,"code":"/**\n * source by `json2mq`\n * https://github.com/akiran/json2mq.git\n */\nvar camel2hyphen = function camel2hyphen(str) {\n  return str.replace(/[A-Z]/g, function (match) {\n    return '-' + match.toLowerCase();\n  }).toLowerCase();\n};\n\nvar isDimension = function isDimension(feature) {\n  var re = /[height|width]$/;\n  return re.test(feature);\n};\n\nvar obj2mq = function obj2mq(obj) {\n  var mq = '';\n  var features = Object.keys(obj);\n  features.forEach(function (feature, index) {\n    var value = obj[feature];\n    feature = camel2hyphen(feature); // Add px to dimension features\n\n    if (isDimension(feature) && typeof value === 'number') {\n      value = value + 'px';\n    }\n\n    if (value === true) {\n      mq += feature;\n    } else if (value === false) {\n      mq += 'not ' + feature;\n    } else {\n      mq += '(' + feature + ': ' + value + ')';\n    }\n\n    if (index < features.length - 1) {\n      mq += ' and ';\n    }\n  });\n  return mq;\n};\n\nexport default function (query) {\n  var mq = '';\n\n  if (typeof query === 'string') {\n    return query;\n  } // Handling array of media queries\n\n\n  if (query instanceof Array) {\n    query.forEach(function (q, index) {\n      mq += obj2mq(q);\n\n      if (index < query.length - 1) {\n        mq += ', ';\n      }\n    });\n    return mq;\n  } // Handling single media query\n\n\n  return obj2mq(query);\n}","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/node_modules/ant-design-vue/es/_util/json2mq.js"],"names":["camel2hyphen","str","replace","match","toLowerCase","isDimension","feature","re","test","obj2mq","obj","mq","features","Object","keys","forEach","index","value","length","query","Array","q"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,YAAY,GAAG,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AAC5C,SAAOA,GAAG,CAACC,OAAJ,CAAY,QAAZ,EAAsB,UAAUC,KAAV,EAAiB;AAC5C,WAAO,MAAMA,KAAK,CAACC,WAAN,EAAb;AACD,GAFM,EAEJA,WAFI,EAAP;AAGD,CAJD;;AAMA,IAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBC,OAArB,EAA8B;AAC9C,MAAIC,EAAE,GAAG,iBAAT;AACA,SAAOA,EAAE,CAACC,IAAH,CAAQF,OAAR,CAAP;AACD,CAHD;;AAKA,IAAIG,MAAM,GAAG,SAASA,MAAT,CAAgBC,GAAhB,EAAqB;AAChC,MAAIC,EAAE,GAAG,EAAT;AACA,MAAIC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYJ,GAAZ,CAAf;AACAE,EAAAA,QAAQ,CAACG,OAAT,CAAiB,UAAUT,OAAV,EAAmBU,KAAnB,EAA0B;AACzC,QAAIC,KAAK,GAAGP,GAAG,CAACJ,OAAD,CAAf;AACAA,IAAAA,OAAO,GAAGN,YAAY,CAACM,OAAD,CAAtB,CAFyC,CAER;;AAEjC,QAAID,WAAW,CAACC,OAAD,CAAX,IAAwB,OAAOW,KAAP,KAAiB,QAA7C,EAAuD;AACrDA,MAAAA,KAAK,GAAGA,KAAK,GAAG,IAAhB;AACD;;AAED,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBN,MAAAA,EAAE,IAAIL,OAAN;AACD,KAFD,MAEO,IAAIW,KAAK,KAAK,KAAd,EAAqB;AAC1BN,MAAAA,EAAE,IAAI,SAASL,OAAf;AACD,KAFM,MAEA;AACLK,MAAAA,EAAE,IAAI,MAAML,OAAN,GAAgB,IAAhB,GAAuBW,KAAvB,GAA+B,GAArC;AACD;;AAED,QAAID,KAAK,GAAGJ,QAAQ,CAACM,MAAT,GAAkB,CAA9B,EAAiC;AAC/BP,MAAAA,EAAE,IAAI,OAAN;AACD;AACF,GAnBD;AAoBA,SAAOA,EAAP;AACD,CAxBD;;AA0BA,eAAe,UAAUQ,KAAV,EAAiB;AAC9B,MAAIR,EAAE,GAAG,EAAT;;AAEA,MAAI,OAAOQ,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAP;AACD,GAL6B,CAK5B;;;AAGF,MAAIA,KAAK,YAAYC,KAArB,EAA4B;AAC1BD,IAAAA,KAAK,CAACJ,OAAN,CAAc,UAAUM,CAAV,EAAaL,KAAb,EAAoB;AAChCL,MAAAA,EAAE,IAAIF,MAAM,CAACY,CAAD,CAAZ;;AAEA,UAAIL,KAAK,GAAGG,KAAK,CAACD,MAAN,GAAe,CAA3B,EAA8B;AAC5BP,QAAAA,EAAE,IAAI,IAAN;AACD;AACF,KAND;AAOA,WAAOA,EAAP;AACD,GAjB6B,CAiB5B;;;AAGF,SAAOF,MAAM,CAACU,KAAD,CAAb;AACD","sourcesContent":["/**\n * source by `json2mq`\n * https://github.com/akiran/json2mq.git\n */\nvar camel2hyphen = function camel2hyphen(str) {\n  return str.replace(/[A-Z]/g, function (match) {\n    return '-' + match.toLowerCase();\n  }).toLowerCase();\n};\n\nvar isDimension = function isDimension(feature) {\n  var re = /[height|width]$/;\n  return re.test(feature);\n};\n\nvar obj2mq = function obj2mq(obj) {\n  var mq = '';\n  var features = Object.keys(obj);\n  features.forEach(function (feature, index) {\n    var value = obj[feature];\n    feature = camel2hyphen(feature); // Add px to dimension features\n\n    if (isDimension(feature) && typeof value === 'number') {\n      value = value + 'px';\n    }\n\n    if (value === true) {\n      mq += feature;\n    } else if (value === false) {\n      mq += 'not ' + feature;\n    } else {\n      mq += '(' + feature + ': ' + value + ')';\n    }\n\n    if (index < features.length - 1) {\n      mq += ' and ';\n    }\n  });\n  return mq;\n};\n\nexport default function (query) {\n  var mq = '';\n\n  if (typeof query === 'string') {\n    return query;\n  } // Handling array of media queries\n\n\n  if (query instanceof Array) {\n    query.forEach(function (q, index) {\n      mq += obj2mq(q);\n\n      if (index < query.length - 1) {\n        mq += ', ';\n      }\n    });\n    return mq;\n  } // Handling single media query\n\n\n  return obj2mq(query);\n}"]},"metadata":{},"sourceType":"module"}