{"ast":null,"code":"var getAllColumns = function (columns, parentColumn) {\n  var result = [];\n  columns.forEach(function (column) {\n    column.parentId = parentColumn ? parentColumn.id : null;\n\n    if (column.visible) {\n      if (column.children && column.children.length && column.children.some(function (column) {\n        return column.visible;\n      })) {\n        result.push(column);\n        result.push.apply(result, getAllColumns(column.children, column));\n      } else {\n        result.push(column);\n      }\n    }\n  });\n  return result;\n};\n\nexport var convertToRows = function (originColumns) {\n  var maxLevel = 1;\n\n  var traverse = function (column, parent) {\n    if (parent) {\n      column.level = parent.level + 1;\n\n      if (maxLevel < column.level) {\n        maxLevel = column.level;\n      }\n    }\n\n    if (column.children && column.children.length && column.children.some(function (column) {\n      return column.visible;\n    })) {\n      var colSpan_1 = 0;\n      column.children.forEach(function (subColumn) {\n        if (subColumn.visible) {\n          traverse(subColumn, column);\n          colSpan_1 += subColumn.colSpan;\n        }\n      });\n      column.colSpan = colSpan_1;\n    } else {\n      column.colSpan = 1;\n    }\n  };\n\n  originColumns.forEach(function (column) {\n    column.level = 1;\n    traverse(column);\n  });\n  var rows = [];\n\n  for (var i = 0; i < maxLevel; i++) {\n    rows.push([]);\n  }\n\n  var allColumns = getAllColumns(originColumns);\n  allColumns.forEach(function (column) {\n    if (column.children && column.children.length && column.children.some(function (column) {\n      return column.visible;\n    })) {\n      column.rowSpan = 1;\n    } else {\n      column.rowSpan = maxLevel - column.level + 1;\n    }\n\n    rows[column.level - 1].push(column);\n  });\n  return rows;\n};","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vxe-table/es/header/src/util.js"],"names":["getAllColumns","columns","parentColumn","result","forEach","column","parentId","id","visible","children","length","some","push","apply","convertToRows","originColumns","maxLevel","traverse","parent","level","colSpan_1","subColumn","colSpan","rows","i","allColumns","rowSpan"],"mappings":"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","sourcesContent":["var getAllColumns = function (columns, parentColumn) {\n    var result = [];\n    columns.forEach(function (column) {\n        column.parentId = parentColumn ? parentColumn.id : null;\n        if (column.visible) {\n            if (column.children && column.children.length && column.children.some(function (column) { return column.visible; })) {\n                result.push(column);\n                result.push.apply(result, getAllColumns(column.children, column));\n            }\n            else {\n                result.push(column);\n            }\n        }\n    });\n    return result;\n};\nexport var convertToRows = function (originColumns) {\n    var maxLevel = 1;\n    var traverse = function (column, parent) {\n        if (parent) {\n            column.level = parent.level + 1;\n            if (maxLevel < column.level) {\n                maxLevel = column.level;\n            }\n        }\n        if (column.children && column.children.length && column.children.some(function (column) { return column.visible; })) {\n            var colSpan_1 = 0;\n            column.children.forEach(function (subColumn) {\n                if (subColumn.visible) {\n                    traverse(subColumn, column);\n                    colSpan_1 += subColumn.colSpan;\n                }\n            });\n            column.colSpan = colSpan_1;\n        }\n        else {\n            column.colSpan = 1;\n        }\n    };\n    originColumns.forEach(function (column) {\n        column.level = 1;\n        traverse(column);\n    });\n    var rows = [];\n    for (var i = 0; i < maxLevel; i++) {\n        rows.push([]);\n    }\n    var allColumns = getAllColumns(originColumns);\n    allColumns.forEach(function (column) {\n        if (column.children && column.children.length && column.children.some(function (column) { return column.visible; })) {\n            column.rowSpan = 1;\n        }\n        else {\n            column.rowSpan = maxLevel - column.level + 1;\n        }\n        rows[column.level - 1].push(column);\n    });\n    return rows;\n};\n"]},"metadata":{},"sourceType":"module"}