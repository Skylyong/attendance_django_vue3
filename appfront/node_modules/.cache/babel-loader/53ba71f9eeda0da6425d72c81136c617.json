{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nimport { inject } from 'vue';\nimport PropTypes from '../../../../_util/vue-types';\nimport { createRef } from '../../util';\nimport generateSelector, { selectorPropTypes } from '../../Base/BaseSelector';\nimport SearchInput from '../../SearchInput';\nimport Selection from './Selection';\nimport { getComponent, getSlot } from '../../../../_util/props-util';\nimport BaseMixin from '../../../../_util/BaseMixin';\nvar TREE_SELECT_EMPTY_VALUE_KEY = 'RC_TREE_SELECT_EMPTY_VALUE_KEY';\nvar Selector = generateSelector('multiple'); // export const multipleSelectorContextTypes = {\n//   onMultipleSelectorRemove: PropTypes.func.isRequired,\n// }\n\nvar MultipleSelector = {\n  name: 'MultipleSelector',\n  mixins: [BaseMixin],\n  inheritAttrs: false,\n  props: _extends(_extends(_extends({}, selectorPropTypes()), SearchInput.props), {\n    selectorValueList: PropTypes.array,\n    disabled: PropTypes.looseBool,\n    labelInValue: PropTypes.looseBool,\n    maxTagCount: PropTypes.number,\n    maxTagPlaceholder: PropTypes.any\n  }),\n  setup: function setup() {\n    return {\n      vcTreeSelect: inject('vcTreeSelect', {})\n    };\n  },\n  created: function created() {\n    this.inputRef = createRef();\n  },\n  methods: {\n    onPlaceholderClick: function onPlaceholderClick() {\n      this.inputRef.current.focus();\n    },\n    focus: function focus() {\n      this.inputRef.current.focus();\n    },\n    blur: function blur() {\n      this.inputRef.current.blur();\n    },\n    _renderPlaceholder: function _renderPlaceholder() {\n      var _this$$props = this.$props,\n          prefixCls = _this$$props.prefixCls,\n          placeholder = _this$$props.placeholder,\n          searchPlaceholder = _this$$props.searchPlaceholder,\n          searchValue = _this$$props.searchValue,\n          selectorValueList = _this$$props.selectorValueList;\n      var currentPlaceholder = placeholder || searchPlaceholder;\n      if (!currentPlaceholder) return null;\n      var hidden = searchValue || selectorValueList.length; // [Legacy] Not remove the placeholder\n\n      return _createVNode(\"span\", {\n        \"style\": {\n          display: hidden ? 'none' : 'block'\n        },\n        \"onClick\": this.onPlaceholderClick,\n        \"class\": \"\".concat(prefixCls, \"-selection-placeholder\")\n      }, [currentPlaceholder]);\n    },\n    onChoiceAnimationLeave: function onChoiceAnimationLeave() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this.__emit.apply(this, ['choiceAnimationLeave'].concat(args));\n    },\n    renderSelection: function renderSelection() {\n      var _this = this;\n\n      var _this$$props2 = this.$props,\n          selectorValueList = _this$$props2.selectorValueList,\n          labelInValue = _this$$props2.labelInValue,\n          maxTagCount = _this$$props2.maxTagCount;\n      var children = getSlot(this);\n      var onMultipleSelectorRemove = this.vcTreeSelect.onMultipleSelectorRemove; // Check if `maxTagCount` is set\n\n      var myValueList = selectorValueList;\n\n      if (maxTagCount >= 0) {\n        myValueList = selectorValueList.slice(0, maxTagCount);\n      } // Selector node list\n\n\n      var selectedValueNodes = myValueList.map(function (_ref) {\n        var label = _ref.label,\n            value = _ref.value;\n        return _createVNode(Selection, _objectSpread(_objectSpread({}, _extends(_extends({}, _this.$props), {\n          label: label,\n          value: value,\n          onRemove: onMultipleSelectorRemove\n        })), {}, {\n          \"key\": value || TREE_SELECT_EMPTY_VALUE_KEY\n        }), {\n          default: function _default() {\n            return [children];\n          }\n        });\n      }); // Rest node count\n\n      if (maxTagCount >= 0 && maxTagCount < selectorValueList.length) {\n        var content = \"+ \".concat(selectorValueList.length - maxTagCount, \" ...\");\n        var maxTagPlaceholder = getComponent(this, 'maxTagPlaceholder', {}, false);\n\n        if (typeof maxTagPlaceholder === 'string') {\n          content = maxTagPlaceholder;\n        } else if (typeof maxTagPlaceholder === 'function') {\n          var restValueList = selectorValueList.slice(maxTagCount);\n          content = maxTagPlaceholder(labelInValue ? restValueList : restValueList.map(function (_ref2) {\n            var value = _ref2.value;\n            return value;\n          }));\n        }\n\n        var restNodeSelect = _createVNode(Selection, _objectSpread(_objectSpread({}, _extends(_extends({}, this.$props), {\n          label: content,\n          value: null\n        })), {}, {\n          \"key\": \"rc-tree-select-internal-max-tag-counter\"\n        }), {\n          default: function _default() {\n            return [children];\n          }\n        });\n\n        selectedValueNodes.push(restNodeSelect);\n      }\n\n      selectedValueNodes.push(_createVNode(SearchInput, _objectSpread(_objectSpread(_objectSpread({\n        \"key\": \"SearchInput\"\n      }, this.$props), this.$attrs), {}, {\n        \"ref\": this.inputRef\n      }), {\n        default: function _default() {\n          return [children];\n        }\n      }));\n      return selectedValueNodes;\n    }\n  },\n  render: function render() {\n    var _this2 = this;\n\n    return _createVNode(Selector, _extends(_extends(_extends({}, this.$props), this.$attrs), {\n      tabindex: -1,\n      showArrow: false,\n      renderSelection: this.renderSelection,\n      renderPlaceholder: this._renderPlaceholder\n    }), {\n      default: function _default() {\n        return [getSlot(_this2)];\n      }\n    });\n  }\n};\nexport default MultipleSelector;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/node_modules/ant-design-vue/es/vc-tree-select/src/Selector/MultipleSelector/index.js"],"names":["_objectSpread","_extends","createVNode","_createVNode","inject","PropTypes","createRef","generateSelector","selectorPropTypes","SearchInput","Selection","getComponent","getSlot","BaseMixin","TREE_SELECT_EMPTY_VALUE_KEY","Selector","MultipleSelector","name","mixins","inheritAttrs","props","selectorValueList","array","disabled","looseBool","labelInValue","maxTagCount","number","maxTagPlaceholder","any","setup","vcTreeSelect","created","inputRef","methods","onPlaceholderClick","current","focus","blur","_renderPlaceholder","_this$$props","$props","prefixCls","placeholder","searchPlaceholder","searchValue","currentPlaceholder","hidden","length","display","concat","onChoiceAnimationLeave","_len","arguments","args","Array","_key","__emit","apply","renderSelection","_this","_this$$props2","children","onMultipleSelectorRemove","myValueList","slice","selectedValueNodes","map","_ref","label","value","onRemove","default","_default","content","restValueList","_ref2","restNodeSelect","push","$attrs","render","_this2","tabindex","showArrow","renderPlaceholder"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nimport { inject } from 'vue';\nimport PropTypes from '../../../../_util/vue-types';\nimport { createRef } from '../../util';\nimport generateSelector, { selectorPropTypes } from '../../Base/BaseSelector';\nimport SearchInput from '../../SearchInput';\nimport Selection from './Selection';\nimport { getComponent, getSlot } from '../../../../_util/props-util';\nimport BaseMixin from '../../../../_util/BaseMixin';\nvar TREE_SELECT_EMPTY_VALUE_KEY = 'RC_TREE_SELECT_EMPTY_VALUE_KEY';\nvar Selector = generateSelector('multiple'); // export const multipleSelectorContextTypes = {\n//   onMultipleSelectorRemove: PropTypes.func.isRequired,\n// }\n\nvar MultipleSelector = {\n  name: 'MultipleSelector',\n  mixins: [BaseMixin],\n  inheritAttrs: false,\n  props: _extends(_extends(_extends({}, selectorPropTypes()), SearchInput.props), {\n    selectorValueList: PropTypes.array,\n    disabled: PropTypes.looseBool,\n    labelInValue: PropTypes.looseBool,\n    maxTagCount: PropTypes.number,\n    maxTagPlaceholder: PropTypes.any\n  }),\n  setup: function setup() {\n    return {\n      vcTreeSelect: inject('vcTreeSelect', {})\n    };\n  },\n  created: function created() {\n    this.inputRef = createRef();\n  },\n  methods: {\n    onPlaceholderClick: function onPlaceholderClick() {\n      this.inputRef.current.focus();\n    },\n    focus: function focus() {\n      this.inputRef.current.focus();\n    },\n    blur: function blur() {\n      this.inputRef.current.blur();\n    },\n    _renderPlaceholder: function _renderPlaceholder() {\n      var _this$$props = this.$props,\n          prefixCls = _this$$props.prefixCls,\n          placeholder = _this$$props.placeholder,\n          searchPlaceholder = _this$$props.searchPlaceholder,\n          searchValue = _this$$props.searchValue,\n          selectorValueList = _this$$props.selectorValueList;\n      var currentPlaceholder = placeholder || searchPlaceholder;\n      if (!currentPlaceholder) return null;\n      var hidden = searchValue || selectorValueList.length; // [Legacy] Not remove the placeholder\n\n      return _createVNode(\"span\", {\n        \"style\": {\n          display: hidden ? 'none' : 'block'\n        },\n        \"onClick\": this.onPlaceholderClick,\n        \"class\": \"\".concat(prefixCls, \"-selection-placeholder\")\n      }, [currentPlaceholder]);\n    },\n    onChoiceAnimationLeave: function onChoiceAnimationLeave() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this.__emit.apply(this, ['choiceAnimationLeave'].concat(args));\n    },\n    renderSelection: function renderSelection() {\n      var _this = this;\n\n      var _this$$props2 = this.$props,\n          selectorValueList = _this$$props2.selectorValueList,\n          labelInValue = _this$$props2.labelInValue,\n          maxTagCount = _this$$props2.maxTagCount;\n      var children = getSlot(this);\n      var onMultipleSelectorRemove = this.vcTreeSelect.onMultipleSelectorRemove; // Check if `maxTagCount` is set\n\n      var myValueList = selectorValueList;\n\n      if (maxTagCount >= 0) {\n        myValueList = selectorValueList.slice(0, maxTagCount);\n      } // Selector node list\n\n\n      var selectedValueNodes = myValueList.map(function (_ref) {\n        var label = _ref.label,\n            value = _ref.value;\n        return _createVNode(Selection, _objectSpread(_objectSpread({}, _extends(_extends({}, _this.$props), {\n          label: label,\n          value: value,\n          onRemove: onMultipleSelectorRemove\n        })), {}, {\n          \"key\": value || TREE_SELECT_EMPTY_VALUE_KEY\n        }), {\n          default: function _default() {\n            return [children];\n          }\n        });\n      }); // Rest node count\n\n      if (maxTagCount >= 0 && maxTagCount < selectorValueList.length) {\n        var content = \"+ \".concat(selectorValueList.length - maxTagCount, \" ...\");\n        var maxTagPlaceholder = getComponent(this, 'maxTagPlaceholder', {}, false);\n\n        if (typeof maxTagPlaceholder === 'string') {\n          content = maxTagPlaceholder;\n        } else if (typeof maxTagPlaceholder === 'function') {\n          var restValueList = selectorValueList.slice(maxTagCount);\n          content = maxTagPlaceholder(labelInValue ? restValueList : restValueList.map(function (_ref2) {\n            var value = _ref2.value;\n            return value;\n          }));\n        }\n\n        var restNodeSelect = _createVNode(Selection, _objectSpread(_objectSpread({}, _extends(_extends({}, this.$props), {\n          label: content,\n          value: null\n        })), {}, {\n          \"key\": \"rc-tree-select-internal-max-tag-counter\"\n        }), {\n          default: function _default() {\n            return [children];\n          }\n        });\n\n        selectedValueNodes.push(restNodeSelect);\n      }\n\n      selectedValueNodes.push(_createVNode(SearchInput, _objectSpread(_objectSpread(_objectSpread({\n        \"key\": \"SearchInput\"\n      }, this.$props), this.$attrs), {}, {\n        \"ref\": this.inputRef\n      }), {\n        default: function _default() {\n          return [children];\n        }\n      }));\n      return selectedValueNodes;\n    }\n  },\n  render: function render() {\n    var _this2 = this;\n\n    return _createVNode(Selector, _extends(_extends(_extends({}, this.$props), this.$attrs), {\n      tabindex: -1,\n      showArrow: false,\n      renderSelection: this.renderSelection,\n      renderPlaceholder: this._renderPlaceholder\n    }), {\n      default: function _default() {\n        return [getSlot(_this2)];\n      }\n    });\n  }\n};\nexport default MultipleSelector;"]},"metadata":{},"sourceType":"module"}