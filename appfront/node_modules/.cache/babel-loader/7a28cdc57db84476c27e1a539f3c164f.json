{"ast":null,"code":"var keys = require('./keys');\n/**\r\n  * 接收一个函数作为累加器，数组中的每个值（从左到右）开始合并，最终为一个值。\r\n  *\r\n  * @param {Array} array 数组\r\n  * @param {Function} callback 方法\r\n  * @param {Object} initialValue 初始值\r\n  * @return {Number}\r\n  */\n\n\nfunction reduce(array, callback, initialValue) {\n  if (array) {\n    var len, reduceMethod;\n    var index = 0;\n    var context = null;\n    var previous = initialValue;\n    var isInitialVal = arguments.length > 2;\n    var keyList = keys(array);\n\n    if (array.length && array.reduce) {\n      reduceMethod = function () {\n        return callback.apply(context, arguments);\n      };\n\n      if (isInitialVal) {\n        return array.reduce(reduceMethod, previous);\n      }\n\n      return array.reduce(reduceMethod);\n    }\n\n    if (isInitialVal) {\n      index = 1;\n      previous = array[keyList[0]];\n    }\n\n    for (len = keyList.length; index < len; index++) {\n      previous = callback.call(context, previous, array[keyList[index]], index, array);\n    }\n\n    return previous;\n  }\n}\n\nmodule.exports = reduce;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/xe-utils/reduce.js"],"names":["keys","require","reduce","array","callback","initialValue","len","reduceMethod","index","context","previous","isInitialVal","arguments","length","keyList","apply","call","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAiBC,KAAjB,EAAwBC,QAAxB,EAAkCC,YAAlC,EAAgD;AAC9C,MAAIF,KAAJ,EAAW;AACT,QAAIG,GAAJ,EAASC,YAAT;AACA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,OAAO,GAAG,IAAd;AACA,QAAIC,QAAQ,GAAGL,YAAf;AACA,QAAIM,YAAY,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAtC;AACA,QAAIC,OAAO,GAAGd,IAAI,CAACG,KAAD,CAAlB;;AACA,QAAIA,KAAK,CAACU,MAAN,IAAgBV,KAAK,CAACD,MAA1B,EAAkC;AAChCK,MAAAA,YAAY,GAAG,YAAY;AACzB,eAAOH,QAAQ,CAACW,KAAT,CAAeN,OAAf,EAAwBG,SAAxB,CAAP;AACD,OAFD;;AAGA,UAAID,YAAJ,EAAkB;AAChB,eAAOR,KAAK,CAACD,MAAN,CAAaK,YAAb,EAA2BG,QAA3B,CAAP;AACD;;AACD,aAAOP,KAAK,CAACD,MAAN,CAAaK,YAAb,CAAP;AACD;;AACD,QAAII,YAAJ,EAAkB;AAChBH,MAAAA,KAAK,GAAG,CAAR;AACAE,MAAAA,QAAQ,GAAGP,KAAK,CAACW,OAAO,CAAC,CAAD,CAAR,CAAhB;AACD;;AACD,SAAKR,GAAG,GAAGQ,OAAO,CAACD,MAAnB,EAA2BL,KAAK,GAAGF,GAAnC,EAAwCE,KAAK,EAA7C,EAAiD;AAC/CE,MAAAA,QAAQ,GAAGN,QAAQ,CAACY,IAAT,CAAcP,OAAd,EAAuBC,QAAvB,EAAiCP,KAAK,CAACW,OAAO,CAACN,KAAD,CAAR,CAAtC,EAAwDA,KAAxD,EAA+DL,KAA/D,CAAX;AACD;;AACD,WAAOO,QAAP;AACD;AACF;;AAEDO,MAAM,CAACC,OAAP,GAAiBhB,MAAjB","sourcesContent":["var keys = require('./keys')\r\n\r\n/**\r\n  * 接收一个函数作为累加器，数组中的每个值（从左到右）开始合并，最终为一个值。\r\n  *\r\n  * @param {Array} array 数组\r\n  * @param {Function} callback 方法\r\n  * @param {Object} initialValue 初始值\r\n  * @return {Number}\r\n  */\r\nfunction reduce (array, callback, initialValue) {\r\n  if (array) {\r\n    var len, reduceMethod\r\n    var index = 0\r\n    var context = null\r\n    var previous = initialValue\r\n    var isInitialVal = arguments.length > 2\r\n    var keyList = keys(array)\r\n    if (array.length && array.reduce) {\r\n      reduceMethod = function () {\r\n        return callback.apply(context, arguments)\r\n      }\r\n      if (isInitialVal) {\r\n        return array.reduce(reduceMethod, previous)\r\n      }\r\n      return array.reduce(reduceMethod)\r\n    }\r\n    if (isInitialVal) {\r\n      index = 1\r\n      previous = array[keyList[0]]\r\n    }\r\n    for (len = keyList.length; index < len; index++) {\r\n      previous = callback.call(context, previous, array[keyList[index]], index, array)\r\n    }\r\n    return previous\r\n  }\r\n}\r\n\r\nmodule.exports = reduce\r\n"]},"metadata":{},"sourceType":"script"}