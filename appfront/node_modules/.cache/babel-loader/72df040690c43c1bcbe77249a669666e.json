{"ast":null,"code":"import { isObject, isPromise, isFunction, getRootScrollTop, setRootScrollTop } from \"../utils\";\n\nfunction isEmptyValue(value) {\n  if (Array.isArray(value)) {\n    return !value.length;\n  }\n\n  if (value === 0) {\n    return false;\n  }\n\n  return !value;\n}\n\nfunction runSyncRule(value, rule) {\n  if (rule.required && isEmptyValue(value)) {\n    return false;\n  }\n\n  if (rule.pattern && !rule.pattern.test(String(value))) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction runRuleValidator(value, rule) {\n  return new Promise(resolve => {\n    const returnVal = rule.validator(value, rule);\n\n    if (isPromise(returnVal)) {\n      returnVal.then(resolve);\n      return;\n    }\n\n    resolve(returnVal);\n  });\n}\n\nfunction getRuleMessage(value, rule) {\n  const {\n    message\n  } = rule;\n\n  if (isFunction(message)) {\n    return message(value, rule);\n  }\n\n  return message || \"\";\n}\n\nfunction startComposing({\n  target\n}) {\n  target.composing = true;\n}\n\nfunction endComposing({\n  target\n}) {\n  if (target.composing) {\n    target.composing = false;\n    target.dispatchEvent(new Event(\"input\"));\n  }\n}\n\nfunction resizeTextarea(input, autosize) {\n  const scrollTop = getRootScrollTop();\n  input.style.height = \"auto\";\n  let height = input.scrollHeight;\n\n  if (isObject(autosize)) {\n    const {\n      maxHeight,\n      minHeight\n    } = autosize;\n\n    if (maxHeight !== void 0) {\n      height = Math.min(height, maxHeight);\n    }\n\n    if (minHeight !== void 0) {\n      height = Math.max(height, minHeight);\n    }\n  }\n\n  if (height) {\n    input.style.height = `${height}px`;\n    setRootScrollTop(scrollTop);\n  }\n}\n\nfunction mapInputType(type) {\n  if (type === \"number\") {\n    return {\n      type: \"text\",\n      inputmode: \"decimal\"\n    };\n  }\n\n  if (type === \"digit\") {\n    return {\n      type: \"tel\",\n      inputmode: \"numeric\"\n    };\n  }\n\n  return {\n    type\n  };\n}\n\nfunction getStringLength(str) {\n  return [...str].length;\n}\n\nfunction cutString(str, maxlength) {\n  return [...str].slice(0, maxlength).join(\"\");\n}\n\nexport { cutString, endComposing, getRuleMessage, getStringLength, mapInputType, resizeTextarea, runRuleValidator, runSyncRule, startComposing };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/field/utils.js"],"names":["isObject","isPromise","isFunction","getRootScrollTop","setRootScrollTop","isEmptyValue","value","Array","isArray","length","runSyncRule","rule","required","pattern","test","String","runRuleValidator","Promise","resolve","returnVal","validator","then","getRuleMessage","message","startComposing","target","composing","endComposing","dispatchEvent","Event","resizeTextarea","input","autosize","scrollTop","style","height","scrollHeight","maxHeight","minHeight","Math","min","max","mapInputType","type","inputmode","getStringLength","str","cutString","maxlength","slice","join"],"mappings":"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","sourcesContent":["import {\n  isObject,\n  isPromise,\n  isFunction,\n  getRootScrollTop,\n  setRootScrollTop\n} from \"../utils\";\nfunction isEmptyValue(value) {\n  if (Array.isArray(value)) {\n    return !value.length;\n  }\n  if (value === 0) {\n    return false;\n  }\n  return !value;\n}\nfunction runSyncRule(value, rule) {\n  if (rule.required && isEmptyValue(value)) {\n    return false;\n  }\n  if (rule.pattern && !rule.pattern.test(String(value))) {\n    return false;\n  }\n  return true;\n}\nfunction runRuleValidator(value, rule) {\n  return new Promise((resolve) => {\n    const returnVal = rule.validator(value, rule);\n    if (isPromise(returnVal)) {\n      returnVal.then(resolve);\n      return;\n    }\n    resolve(returnVal);\n  });\n}\nfunction getRuleMessage(value, rule) {\n  const { message } = rule;\n  if (isFunction(message)) {\n    return message(value, rule);\n  }\n  return message || \"\";\n}\nfunction startComposing({ target }) {\n  target.composing = true;\n}\nfunction endComposing({ target }) {\n  if (target.composing) {\n    target.composing = false;\n    target.dispatchEvent(new Event(\"input\"));\n  }\n}\nfunction resizeTextarea(input, autosize) {\n  const scrollTop = getRootScrollTop();\n  input.style.height = \"auto\";\n  let height = input.scrollHeight;\n  if (isObject(autosize)) {\n    const { maxHeight, minHeight } = autosize;\n    if (maxHeight !== void 0) {\n      height = Math.min(height, maxHeight);\n    }\n    if (minHeight !== void 0) {\n      height = Math.max(height, minHeight);\n    }\n  }\n  if (height) {\n    input.style.height = `${height}px`;\n    setRootScrollTop(scrollTop);\n  }\n}\nfunction mapInputType(type) {\n  if (type === \"number\") {\n    return {\n      type: \"text\",\n      inputmode: \"decimal\"\n    };\n  }\n  if (type === \"digit\") {\n    return {\n      type: \"tel\",\n      inputmode: \"numeric\"\n    };\n  }\n  return { type };\n}\nfunction getStringLength(str) {\n  return [...str].length;\n}\nfunction cutString(str, maxlength) {\n  return [...str].slice(0, maxlength).join(\"\");\n}\nexport {\n  cutString,\n  endComposing,\n  getRuleMessage,\n  getStringLength,\n  mapInputType,\n  resizeTextarea,\n  runRuleValidator,\n  runSyncRule,\n  startComposing\n};\n"]},"metadata":{},"sourceType":"module"}