{"ast":null,"code":"import { createNamespace, isFunction } from \"../utils\";\nconst [name, bem, t] = createNamespace(\"uploader\");\n\nconst toArray = item => Array.isArray(item) ? item : [item];\n\nfunction readFileContent(file, resultType) {\n  return new Promise(resolve => {\n    if (resultType === \"file\") {\n      resolve();\n      return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onload = event => {\n      resolve(event.target.result);\n    };\n\n    if (resultType === \"dataUrl\") {\n      reader.readAsDataURL(file);\n    } else if (resultType === \"text\") {\n      reader.readAsText(file);\n    }\n  });\n}\n\nfunction isOversize(items, maxSize) {\n  return toArray(items).some(item => {\n    if (item.file) {\n      if (isFunction(maxSize)) {\n        return maxSize(item.file);\n      }\n\n      return item.file.size > maxSize;\n    }\n\n    return false;\n  });\n}\n\nfunction filterFiles(items, maxSize) {\n  const valid = [];\n  const invalid = [];\n  items.forEach(item => {\n    if (isOversize(item, maxSize)) {\n      invalid.push(item);\n    } else {\n      valid.push(item);\n    }\n  });\n  return {\n    valid,\n    invalid\n  };\n}\n\nconst IMAGE_REGEXP = /\\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg)/i;\n\nconst isImageUrl = url => IMAGE_REGEXP.test(url);\n\nfunction isImageFile(item) {\n  if (item.isImage) {\n    return true;\n  }\n\n  if (item.file && item.file.type) {\n    return item.file.type.indexOf(\"image\") === 0;\n  }\n\n  if (item.url) {\n    return isImageUrl(item.url);\n  }\n\n  if (typeof item.content === \"string\") {\n    return item.content.indexOf(\"data:image\") === 0;\n  }\n\n  return false;\n}\n\nexport { bem, filterFiles, isImageFile, isImageUrl, isOversize, name, readFileContent, t, toArray };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/uploader/utils.js"],"names":["createNamespace","isFunction","name","bem","t","toArray","item","Array","isArray","readFileContent","file","resultType","Promise","resolve","reader","FileReader","onload","event","target","result","readAsDataURL","readAsText","isOversize","items","maxSize","some","size","filterFiles","valid","invalid","forEach","push","IMAGE_REGEXP","isImageUrl","url","test","isImageFile","isImage","type","indexOf","content"],"mappings":"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","sourcesContent":["import { createNamespace, isFunction } from \"../utils\";\nconst [name, bem, t] = createNamespace(\"uploader\");\nconst toArray = (item) => Array.isArray(item) ? item : [item];\nfunction readFileContent(file, resultType) {\n  return new Promise((resolve) => {\n    if (resultType === \"file\") {\n      resolve();\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      resolve(event.target.result);\n    };\n    if (resultType === \"dataUrl\") {\n      reader.readAsDataURL(file);\n    } else if (resultType === \"text\") {\n      reader.readAsText(file);\n    }\n  });\n}\nfunction isOversize(items, maxSize) {\n  return toArray(items).some((item) => {\n    if (item.file) {\n      if (isFunction(maxSize)) {\n        return maxSize(item.file);\n      }\n      return item.file.size > maxSize;\n    }\n    return false;\n  });\n}\nfunction filterFiles(items, maxSize) {\n  const valid = [];\n  const invalid = [];\n  items.forEach((item) => {\n    if (isOversize(item, maxSize)) {\n      invalid.push(item);\n    } else {\n      valid.push(item);\n    }\n  });\n  return { valid, invalid };\n}\nconst IMAGE_REGEXP = /\\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg)/i;\nconst isImageUrl = (url) => IMAGE_REGEXP.test(url);\nfunction isImageFile(item) {\n  if (item.isImage) {\n    return true;\n  }\n  if (item.file && item.file.type) {\n    return item.file.type.indexOf(\"image\") === 0;\n  }\n  if (item.url) {\n    return isImageUrl(item.url);\n  }\n  if (typeof item.content === \"string\") {\n    return item.content.indexOf(\"data:image\") === 0;\n  }\n  return false;\n}\nexport {\n  bem,\n  filterFiles,\n  isImageFile,\n  isImageUrl,\n  isOversize,\n  name,\n  readFileContent,\n  t,\n  toArray\n};\n"]},"metadata":{},"sourceType":"module"}