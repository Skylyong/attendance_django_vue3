{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createTextVNode(\"用户名：\");\n\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\"密码：\");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"p\", null, [_hoisted_1, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.userName = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.userName]])]), _createElementVNode(\"p\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.passWord = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $data.passWord]])]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.login())\n  }, \"登录\")]);\n}","map":{"version":3,"mappings":";;iDAEO;;iDACA;;;uBAFPA,oBAIM,KAJN,EAIM,IAJN,EAIM,CAHFC,oBAAiD,GAAjD,EAAiD,IAAjD,EAAiD,6BAA1CA,oBAAsC,OAAtC,EAAsC;AAA/BC,QAAI,EAAC,MAA0B;+DAAVC,iBAAQC;AAAE,GAAtC;;AAAA,oBAA4BD,iBAAc,CAAjD,CAGE,EAFFF,oBAAgD,GAAhD,EAAgD,IAAhD,EAAgD,6BAA1CA,oBAAsC,OAAtC,EAAsC;AAA/BC,QAAI,EAAC,MAA0B;+DAAVC,iBAAQC;AAAE,GAAtC;;AAAA,oBAA4BD,iBAAc,CAAhD,CAEE,EADFF,oBAAoC,QAApC,EAAoC;AAA3BI,WAAK,sCAAEC,YAAF;AAAsB,GAApC,EAAyB,IAAzB,CACE,CAJN","names":["_createElementBlock","_createElementVNode","type","$data","$event","onClick","_ctx"],"sourceRoot":"","sources":["/Users/lyong/Desktop/myproj/appfront/src/views/login.vue"],"sourcesContent":["<template>\n<div>\n    <p>用户名：<input type='text' v-model=\"userName\"></p>\n    <p>密码：<input type='text' v-model=\"passWord\"></p>\n    <button @click=\"login()\">登录</button>\n</div>\n</template>\n<script>\n export default {\n    data() {\n        return {\n          userName:'root',\n          passWord:'root'\n        }\n    },\n     login(){\n        const self = this;\n        axios.get('https://easy-mock.com/mock/5c7cd0f89d0184e94358d/museum/login').then(response=>{\n          var res =response.data.data,\n              len = res.length,\n              userNameArr= [],\n              passWordArr= [],\n              ses= window.sessionStorage; \n          // 拿到所有的username\n          for(var i=0; i<len; i++){\n            userNameArr.push(res[i].username);\n            passWordArr.push(res[i].password);\n          }\n          console.log(userNameArr, passWordArr);\n          if(userNameArr.indexOf(this.userName) === -1){\n              alert('账号不存在！');\n          }else{\n            var index = userNameArr.indexOf(this.userName);\n            if(passWordArr[index] === this.passWord){\n              // 把token放在sessionStorage中\n              ses.setItem('data', res[index].token);\n              this.$parent.$data.userTitle = res[index].usertitle;\n              //验证成功进入首页\n              this.startHacking ('登录成功！');\n              //跳转到首页\n              this.$router.push('/index');\n              // console.log(this.$router);\n            }else{\n              alert('密码错误！')\n            }\n          }\n        }).catch(err=>{\n          console.log('连接数据库失败！')\n        })\n      }\n}\n</script>"]},"metadata":{},"sourceType":"module"}