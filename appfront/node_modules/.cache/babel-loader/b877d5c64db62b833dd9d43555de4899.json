{"ast":null,"code":"var helperCreateTreeFunc = require('./helperCreateTreeFunc');\n\nvar map = require('./map');\n\nfunction mapTreeItem(parent, obj, iterate, context, path, node, parseChildren, opts) {\n  var paths, nodes, rest;\n  var mapChildren = opts.mapChildren || parseChildren;\n  return map(obj, function (item, index) {\n    paths = path.concat(['' + index]);\n    nodes = node.concat([item]);\n    rest = iterate.call(context, item, index, obj, paths, parent, nodes);\n\n    if (rest && item && parseChildren && item[parseChildren]) {\n      rest[mapChildren] = mapTreeItem(item, item[parseChildren], iterate, context, paths, nodes, parseChildren, opts);\n    }\n\n    return rest;\n  });\n}\n/**\r\n  * 从树结构中指定方法后的返回值组成的新数组\r\n  *\r\n  * @param {Object} obj 对象/数组\r\n  * @param {Function} iterate(item, index, items, path, parent, nodes) 回调\r\n  * @param {Object} options {children: 'children'}\r\n  * @param {Object} context 上下文\r\n  * @return {Object/Array}\r\n  */\n\n\nvar mapTree = helperCreateTreeFunc(mapTreeItem);\nmodule.exports = mapTree;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/xe-utils/mapTree.js"],"names":["helperCreateTreeFunc","require","map","mapTreeItem","parent","obj","iterate","context","path","node","parseChildren","opts","paths","nodes","rest","mapChildren","item","index","concat","call","mapTree","module","exports"],"mappings":"AAAA,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAIC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAjB;;AAEA,SAASE,WAAT,CAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,OAAnC,EAA4CC,OAA5C,EAAqDC,IAArD,EAA2DC,IAA3D,EAAiEC,aAAjE,EAAgFC,IAAhF,EAAsF;AACpF,MAAIC,KAAJ,EAAWC,KAAX,EAAkBC,IAAlB;AACA,MAAIC,WAAW,GAAGJ,IAAI,CAACI,WAAL,IAAoBL,aAAtC;AACA,SAAOR,GAAG,CAACG,GAAD,EAAM,UAAUW,IAAV,EAAgBC,KAAhB,EAAuB;AACrCL,IAAAA,KAAK,GAAGJ,IAAI,CAACU,MAAL,CAAY,CAAC,KAAKD,KAAN,CAAZ,CAAR;AACAJ,IAAAA,KAAK,GAAGJ,IAAI,CAACS,MAAL,CAAY,CAACF,IAAD,CAAZ,CAAR;AACAF,IAAAA,IAAI,GAAGR,OAAO,CAACa,IAAR,CAAaZ,OAAb,EAAsBS,IAAtB,EAA4BC,KAA5B,EAAmCZ,GAAnC,EAAwCO,KAAxC,EAA+CR,MAA/C,EAAuDS,KAAvD,CAAP;;AACA,QAAIC,IAAI,IAAIE,IAAR,IAAgBN,aAAhB,IAAiCM,IAAI,CAACN,aAAD,CAAzC,EAA0D;AACxDI,MAAAA,IAAI,CAACC,WAAD,CAAJ,GAAoBZ,WAAW,CAACa,IAAD,EAAOA,IAAI,CAACN,aAAD,CAAX,EAA4BJ,OAA5B,EAAqCC,OAArC,EAA8CK,KAA9C,EAAqDC,KAArD,EAA4DH,aAA5D,EAA2EC,IAA3E,CAA/B;AACD;;AACD,WAAOG,IAAP;AACD,GARS,CAAV;AASD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIM,OAAO,GAAGpB,oBAAoB,CAACG,WAAD,CAAlC;AAEAkB,MAAM,CAACC,OAAP,GAAiBF,OAAjB","sourcesContent":["var helperCreateTreeFunc = require('./helperCreateTreeFunc')\r\n\r\nvar map = require('./map')\r\n\r\nfunction mapTreeItem (parent, obj, iterate, context, path, node, parseChildren, opts) {\r\n  var paths, nodes, rest\r\n  var mapChildren = opts.mapChildren || parseChildren\r\n  return map(obj, function (item, index) {\r\n    paths = path.concat(['' + index])\r\n    nodes = node.concat([item])\r\n    rest = iterate.call(context, item, index, obj, paths, parent, nodes)\r\n    if (rest && item && parseChildren && item[parseChildren]) {\r\n      rest[mapChildren] = mapTreeItem(item, item[parseChildren], iterate, context, paths, nodes, parseChildren, opts)\r\n    }\r\n    return rest\r\n  })\r\n}\r\n\r\n/**\r\n  * 从树结构中指定方法后的返回值组成的新数组\r\n  *\r\n  * @param {Object} obj 对象/数组\r\n  * @param {Function} iterate(item, index, items, path, parent, nodes) 回调\r\n  * @param {Object} options {children: 'children'}\r\n  * @param {Object} context 上下文\r\n  * @return {Object/Array}\r\n  */\r\nvar mapTree = helperCreateTreeFunc(mapTreeItem)\r\n\r\nmodule.exports = mapTree\r\n"]},"metadata":{},"sourceType":"script"}