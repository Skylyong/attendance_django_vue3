{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\";\nimport { ref, watch, reactive, computed, onMounted, onActivated, onDeactivated, onBeforeUnmount, defineComponent, nextTick } from \"vue\";\nimport { clamp, isHidden, truthProp, numericProp, windowWidth, windowHeight, preventDefault, createNamespace, makeNumericProp } from \"../utils\";\nimport { doubleRaf, useChildren, usePageVisibility } from \"@vant/use\";\nimport { useTouch } from \"../composables/use-touch\";\nimport { useExpose } from \"../composables/use-expose\";\nimport { onPopupReopen } from \"../composables/on-popup-reopen\";\nconst [name, bem] = createNamespace(\"swipe\");\nconst swipeProps = {\n  loop: truthProp,\n  width: numericProp,\n  height: numericProp,\n  vertical: Boolean,\n  autoplay: makeNumericProp(0),\n  duration: makeNumericProp(500),\n  touchable: truthProp,\n  lazyRender: Boolean,\n  initialSwipe: makeNumericProp(0),\n  indicatorColor: String,\n  showIndicators: truthProp,\n  stopPropagation: truthProp\n};\nconst SWIPE_KEY = Symbol(name);\nvar stdin_default = defineComponent({\n  name,\n  props: swipeProps,\n  emits: [\"change\"],\n\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const root = ref();\n    const state = reactive({\n      rect: null,\n      width: 0,\n      height: 0,\n      offset: 0,\n      active: 0,\n      swiping: false\n    });\n    const touch = useTouch();\n    const {\n      children,\n      linkChildren\n    } = useChildren(SWIPE_KEY);\n    const count = computed(() => children.length);\n    const size = computed(() => state[props.vertical ? \"height\" : \"width\"]);\n    const delta = computed(() => props.vertical ? touch.deltaY.value : touch.deltaX.value);\n    const minOffset = computed(() => {\n      if (state.rect) {\n        const base = props.vertical ? state.rect.height : state.rect.width;\n        return base - size.value * count.value;\n      }\n\n      return 0;\n    });\n    const maxCount = computed(() => Math.ceil(Math.abs(minOffset.value) / size.value));\n    const trackSize = computed(() => count.value * size.value);\n    const activeIndicator = computed(() => (state.active + count.value) % count.value);\n    const isCorrectDirection = computed(() => {\n      const expect = props.vertical ? \"vertical\" : \"horizontal\";\n      return touch.direction.value === expect;\n    });\n    const trackStyle = computed(() => {\n      const style = {\n        transitionDuration: `${state.swiping ? 0 : props.duration}ms`,\n        transform: `translate${props.vertical ? \"Y\" : \"X\"}(${state.offset}px)`\n      };\n\n      if (size.value) {\n        const mainAxis = props.vertical ? \"height\" : \"width\";\n        const crossAxis = props.vertical ? \"width\" : \"height\";\n        style[mainAxis] = `${trackSize.value}px`;\n        style[crossAxis] = props[crossAxis] ? `${props[crossAxis]}px` : \"\";\n      }\n\n      return style;\n    });\n\n    const getTargetActive = pace => {\n      const {\n        active\n      } = state;\n\n      if (pace) {\n        if (props.loop) {\n          return clamp(active + pace, -1, count.value);\n        }\n\n        return clamp(active + pace, 0, maxCount.value);\n      }\n\n      return active;\n    };\n\n    const getTargetOffset = (targetActive, offset = 0) => {\n      let currentPosition = targetActive * size.value;\n\n      if (!props.loop) {\n        currentPosition = Math.min(currentPosition, -minOffset.value);\n      }\n\n      let targetOffset = offset - currentPosition;\n\n      if (!props.loop) {\n        targetOffset = clamp(targetOffset, minOffset.value, 0);\n      }\n\n      return targetOffset;\n    };\n\n    const move = ({\n      pace = 0,\n      offset = 0,\n      emitChange\n    }) => {\n      if (count.value <= 1) {\n        return;\n      }\n\n      const {\n        active\n      } = state;\n      const targetActive = getTargetActive(pace);\n      const targetOffset = getTargetOffset(targetActive, offset);\n\n      if (props.loop) {\n        if (children[0] && targetOffset !== minOffset.value) {\n          const outRightBound = targetOffset < minOffset.value;\n          children[0].setOffset(outRightBound ? trackSize.value : 0);\n        }\n\n        if (children[count.value - 1] && targetOffset !== 0) {\n          const outLeftBound = targetOffset > 0;\n          children[count.value - 1].setOffset(outLeftBound ? -trackSize.value : 0);\n        }\n      }\n\n      state.active = targetActive;\n      state.offset = targetOffset;\n\n      if (emitChange && targetActive !== active) {\n        emit(\"change\", activeIndicator.value);\n      }\n    };\n\n    const correctPosition = () => {\n      state.swiping = true;\n\n      if (state.active <= -1) {\n        move({\n          pace: count.value\n        });\n      } else if (state.active >= count.value) {\n        move({\n          pace: -count.value\n        });\n      }\n    };\n\n    const prev = () => {\n      correctPosition();\n      touch.reset();\n      doubleRaf(() => {\n        state.swiping = false;\n        move({\n          pace: -1,\n          emitChange: true\n        });\n      });\n    };\n\n    const next = () => {\n      correctPosition();\n      touch.reset();\n      doubleRaf(() => {\n        state.swiping = false;\n        move({\n          pace: 1,\n          emitChange: true\n        });\n      });\n    };\n\n    let autoplayTimer;\n\n    const stopAutoplay = () => clearTimeout(autoplayTimer);\n\n    const autoplay = () => {\n      stopAutoplay();\n\n      if (props.autoplay > 0 && count.value > 1) {\n        autoplayTimer = setTimeout(() => {\n          next();\n          autoplay();\n        }, +props.autoplay);\n      }\n    };\n\n    const initialize = (active = +props.initialSwipe) => {\n      if (!root.value) {\n        return;\n      }\n\n      const cb = () => {\n        var _a, _b;\n\n        if (!isHidden(root)) {\n          const rect = {\n            width: root.value.offsetWidth,\n            height: root.value.offsetHeight\n          };\n          state.rect = rect;\n          state.width = +((_a = props.width) != null ? _a : rect.width);\n          state.height = +((_b = props.height) != null ? _b : rect.height);\n        }\n\n        if (count.value) {\n          active = Math.min(count.value - 1, active);\n        }\n\n        state.active = active;\n        state.swiping = true;\n        state.offset = getTargetOffset(active);\n        children.forEach(swipe => {\n          swipe.setOffset(0);\n        });\n        autoplay();\n      };\n\n      if (isHidden(root)) {\n        nextTick().then(cb);\n      } else {\n        cb();\n      }\n    };\n\n    const resize = () => initialize(state.active);\n\n    let touchStartTime;\n\n    const onTouchStart = event => {\n      if (!props.touchable) return;\n      touch.start(event);\n      touchStartTime = Date.now();\n      stopAutoplay();\n      correctPosition();\n    };\n\n    const onTouchMove = event => {\n      if (props.touchable && state.swiping) {\n        touch.move(event);\n\n        if (isCorrectDirection.value) {\n          preventDefault(event, props.stopPropagation);\n          move({\n            offset: delta.value\n          });\n        }\n      }\n    };\n\n    const onTouchEnd = () => {\n      if (!props.touchable || !state.swiping) {\n        return;\n      }\n\n      const duration = Date.now() - touchStartTime;\n      const speed = delta.value / duration;\n      const shouldSwipe = Math.abs(speed) > 0.25 || Math.abs(delta.value) > size.value / 2;\n\n      if (shouldSwipe && isCorrectDirection.value) {\n        const offset = props.vertical ? touch.offsetY.value : touch.offsetX.value;\n        let pace = 0;\n\n        if (props.loop) {\n          pace = offset > 0 ? delta.value > 0 ? -1 : 1 : 0;\n        } else {\n          pace = -Math[delta.value > 0 ? \"ceil\" : \"floor\"](delta.value / size.value);\n        }\n\n        move({\n          pace,\n          emitChange: true\n        });\n      } else if (delta.value) {\n        move({\n          pace: 0\n        });\n      }\n\n      state.swiping = false;\n      autoplay();\n    };\n\n    const swipeTo = (index, options = {}) => {\n      correctPosition();\n      touch.reset();\n      doubleRaf(() => {\n        let targetIndex;\n\n        if (props.loop && index === count.value) {\n          targetIndex = state.active === 0 ? 0 : index;\n        } else {\n          targetIndex = index % count.value;\n        }\n\n        if (options.immediate) {\n          doubleRaf(() => {\n            state.swiping = false;\n          });\n        } else {\n          state.swiping = false;\n        }\n\n        move({\n          pace: targetIndex - state.active,\n          emitChange: true\n        });\n      });\n    };\n\n    const renderDot = (_, index) => {\n      const active = index === activeIndicator.value;\n      const style = active ? {\n        backgroundColor: props.indicatorColor\n      } : void 0;\n      return _createVNode(\"i\", {\n        \"style\": style,\n        \"class\": bem(\"indicator\", {\n          active\n        })\n      }, null);\n    };\n\n    const renderIndicator = () => {\n      if (slots.indicator) {\n        return slots.indicator({\n          active: activeIndicator.value,\n          total: count.value\n        });\n      }\n\n      if (props.showIndicators && count.value > 1) {\n        return _createVNode(\"div\", {\n          \"class\": bem(\"indicators\", {\n            vertical: props.vertical\n          })\n        }, [Array(count.value).fill(\"\").map(renderDot)]);\n      }\n    };\n\n    useExpose({\n      prev,\n      next,\n      state,\n      resize,\n      swipeTo\n    });\n    linkChildren({\n      size,\n      props,\n      count,\n      activeIndicator\n    });\n    watch(() => props.initialSwipe, value => initialize(+value));\n    watch(count, () => initialize(state.active));\n    watch(() => props.autoplay, autoplay);\n    watch([windowWidth, windowHeight], resize);\n    watch(usePageVisibility(), visible => {\n      if (visible === \"visible\") {\n        autoplay();\n      } else {\n        stopAutoplay();\n      }\n    });\n    onMounted(initialize);\n    onActivated(() => initialize(state.active));\n    onPopupReopen(() => initialize(state.active));\n    onDeactivated(stopAutoplay);\n    onBeforeUnmount(stopAutoplay);\n    return () => {\n      var _a;\n\n      return _createVNode(\"div\", {\n        \"ref\": root,\n        \"class\": bem()\n      }, [_createVNode(\"div\", {\n        \"style\": trackStyle.value,\n        \"class\": bem(\"track\", {\n          vertical: props.vertical\n        }),\n        \"onTouchstart\": onTouchStart,\n        \"onTouchmove\": onTouchMove,\n        \"onTouchend\": onTouchEnd,\n        \"onTouchcancel\": onTouchEnd\n      }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]), renderIndicator()]);\n    };\n  }\n\n});\nexport { SWIPE_KEY, stdin_default as default };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/swipe/Swipe.js"],"names":["createVNode","_createVNode","ref","watch","reactive","computed","onMounted","onActivated","onDeactivated","onBeforeUnmount","defineComponent","nextTick","clamp","isHidden","truthProp","numericProp","windowWidth","windowHeight","preventDefault","createNamespace","makeNumericProp","doubleRaf","useChildren","usePageVisibility","useTouch","useExpose","onPopupReopen","name","bem","swipeProps","loop","width","height","vertical","Boolean","autoplay","duration","touchable","lazyRender","initialSwipe","indicatorColor","String","showIndicators","stopPropagation","SWIPE_KEY","Symbol","stdin_default","props","emits","setup","emit","slots","root","state","rect","offset","active","swiping","touch","children","linkChildren","count","length","size","delta","deltaY","value","deltaX","minOffset","base","maxCount","Math","ceil","abs","trackSize","activeIndicator","isCorrectDirection","expect","direction","trackStyle","style","transitionDuration","transform","mainAxis","crossAxis","getTargetActive","pace","getTargetOffset","targetActive","currentPosition","min","targetOffset","move","emitChange","outRightBound","setOffset","outLeftBound","correctPosition","prev","reset","next","autoplayTimer","stopAutoplay","clearTimeout","setTimeout","initialize","cb","_a","_b","offsetWidth","offsetHeight","forEach","swipe","then","resize","touchStartTime","onTouchStart","event","start","Date","now","onTouchMove","onTouchEnd","speed","shouldSwipe","offsetY","offsetX","swipeTo","index","options","targetIndex","immediate","renderDot","_","backgroundColor","renderIndicator","indicator","total","Array","fill","map","visible","default","call"],"mappings":"AAAA,SAASA,WAAW,IAAIC,YAAxB,QAA4C,KAA5C;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,QAArB,EAA+BC,QAA/B,EAAyCC,SAAzC,EAAoDC,WAApD,EAAiEC,aAAjE,EAAgFC,eAAhF,EAAiGC,eAAjG,EAAkHC,QAAlH,QAAkI,KAAlI;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,WAAlD,EAA+DC,YAA/D,EAA6EC,cAA7E,EAA6FC,eAA7F,EAA8GC,eAA9G,QAAqI,UAArI;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,iBAAjC,QAA0D,WAA1D;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,MAAM,CAACC,IAAD,EAAOC,GAAP,IAAcT,eAAe,CAAC,OAAD,CAAnC;AACA,MAAMU,UAAU,GAAG;AACjBC,EAAAA,IAAI,EAAEhB,SADW;AAEjBiB,EAAAA,KAAK,EAAEhB,WAFU;AAGjBiB,EAAAA,MAAM,EAAEjB,WAHS;AAIjBkB,EAAAA,QAAQ,EAAEC,OAJO;AAKjBC,EAAAA,QAAQ,EAAEf,eAAe,CAAC,CAAD,CALR;AAMjBgB,EAAAA,QAAQ,EAAEhB,eAAe,CAAC,GAAD,CANR;AAOjBiB,EAAAA,SAAS,EAAEvB,SAPM;AAQjBwB,EAAAA,UAAU,EAAEJ,OARK;AASjBK,EAAAA,YAAY,EAAEnB,eAAe,CAAC,CAAD,CATZ;AAUjBoB,EAAAA,cAAc,EAAEC,MAVC;AAWjBC,EAAAA,cAAc,EAAE5B,SAXC;AAYjB6B,EAAAA,eAAe,EAAE7B;AAZA,CAAnB;AAcA,MAAM8B,SAAS,GAAGC,MAAM,CAAClB,IAAD,CAAxB;AACA,IAAImB,aAAa,GAAGpC,eAAe,CAAC;AAClCiB,EAAAA,IADkC;AAElCoB,EAAAA,KAAK,EAAElB,UAF2B;AAGlCmB,EAAAA,KAAK,EAAE,CAAC,QAAD,CAH2B;;AAIlCC,EAAAA,KAAK,CAACF,KAAD,EAAQ;AACXG,IAAAA,IADW;AAEXC,IAAAA;AAFW,GAAR,EAGF;AACD,UAAMC,IAAI,GAAGlD,GAAG,EAAhB;AACA,UAAMmD,KAAK,GAAGjD,QAAQ,CAAC;AACrBkD,MAAAA,IAAI,EAAE,IADe;AAErBvB,MAAAA,KAAK,EAAE,CAFc;AAGrBC,MAAAA,MAAM,EAAE,CAHa;AAIrBuB,MAAAA,MAAM,EAAE,CAJa;AAKrBC,MAAAA,MAAM,EAAE,CALa;AAMrBC,MAAAA,OAAO,EAAE;AANY,KAAD,CAAtB;AAQA,UAAMC,KAAK,GAAGlC,QAAQ,EAAtB;AACA,UAAM;AACJmC,MAAAA,QADI;AAEJC,MAAAA;AAFI,QAGFtC,WAAW,CAACsB,SAAD,CAHf;AAIA,UAAMiB,KAAK,GAAGxD,QAAQ,CAAC,MAAMsD,QAAQ,CAACG,MAAhB,CAAtB;AACA,UAAMC,IAAI,GAAG1D,QAAQ,CAAC,MAAMgD,KAAK,CAACN,KAAK,CAACd,QAAN,GAAiB,QAAjB,GAA4B,OAA7B,CAAZ,CAArB;AACA,UAAM+B,KAAK,GAAG3D,QAAQ,CAAC,MAAM0C,KAAK,CAACd,QAAN,GAAiByB,KAAK,CAACO,MAAN,CAAaC,KAA9B,GAAsCR,KAAK,CAACS,MAAN,CAAaD,KAA1D,CAAtB;AACA,UAAME,SAAS,GAAG/D,QAAQ,CAAC,MAAM;AAC/B,UAAIgD,KAAK,CAACC,IAAV,EAAgB;AACd,cAAMe,IAAI,GAAGtB,KAAK,CAACd,QAAN,GAAiBoB,KAAK,CAACC,IAAN,CAAWtB,MAA5B,GAAqCqB,KAAK,CAACC,IAAN,CAAWvB,KAA7D;AACA,eAAOsC,IAAI,GAAGN,IAAI,CAACG,KAAL,GAAaL,KAAK,CAACK,KAAjC;AACD;;AACD,aAAO,CAAP;AACD,KANyB,CAA1B;AAOA,UAAMI,QAAQ,GAAGjE,QAAQ,CAAC,MAAMkE,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASL,SAAS,CAACF,KAAnB,IAA4BH,IAAI,CAACG,KAA3C,CAAP,CAAzB;AACA,UAAMQ,SAAS,GAAGrE,QAAQ,CAAC,MAAMwD,KAAK,CAACK,KAAN,GAAcH,IAAI,CAACG,KAA1B,CAA1B;AACA,UAAMS,eAAe,GAAGtE,QAAQ,CAAC,MAAM,CAACgD,KAAK,CAACG,MAAN,GAAeK,KAAK,CAACK,KAAtB,IAA+BL,KAAK,CAACK,KAA5C,CAAhC;AACA,UAAMU,kBAAkB,GAAGvE,QAAQ,CAAC,MAAM;AACxC,YAAMwE,MAAM,GAAG9B,KAAK,CAACd,QAAN,GAAiB,UAAjB,GAA8B,YAA7C;AACA,aAAOyB,KAAK,CAACoB,SAAN,CAAgBZ,KAAhB,KAA0BW,MAAjC;AACD,KAHkC,CAAnC;AAIA,UAAME,UAAU,GAAG1E,QAAQ,CAAC,MAAM;AAChC,YAAM2E,KAAK,GAAG;AACZC,QAAAA,kBAAkB,EAAG,GAAE5B,KAAK,CAACI,OAAN,GAAgB,CAAhB,GAAoBV,KAAK,CAACX,QAAS,IAD9C;AAEZ8C,QAAAA,SAAS,EAAG,YAAWnC,KAAK,CAACd,QAAN,GAAiB,GAAjB,GAAuB,GAAI,IAAGoB,KAAK,CAACE,MAAO;AAFtD,OAAd;;AAIA,UAAIQ,IAAI,CAACG,KAAT,EAAgB;AACd,cAAMiB,QAAQ,GAAGpC,KAAK,CAACd,QAAN,GAAiB,QAAjB,GAA4B,OAA7C;AACA,cAAMmD,SAAS,GAAGrC,KAAK,CAACd,QAAN,GAAiB,OAAjB,GAA2B,QAA7C;AACA+C,QAAAA,KAAK,CAACG,QAAD,CAAL,GAAmB,GAAET,SAAS,CAACR,KAAM,IAArC;AACAc,QAAAA,KAAK,CAACI,SAAD,CAAL,GAAmBrC,KAAK,CAACqC,SAAD,CAAL,GAAoB,GAAErC,KAAK,CAACqC,SAAD,CAAY,IAAvC,GAA6C,EAAhE;AACD;;AACD,aAAOJ,KAAP;AACD,KAZ0B,CAA3B;;AAaA,UAAMK,eAAe,GAAIC,IAAD,IAAU;AAChC,YAAM;AACJ9B,QAAAA;AADI,UAEFH,KAFJ;;AAGA,UAAIiC,IAAJ,EAAU;AACR,YAAIvC,KAAK,CAACjB,IAAV,EAAgB;AACd,iBAAOlB,KAAK,CAAC4C,MAAM,GAAG8B,IAAV,EAAgB,CAAC,CAAjB,EAAoBzB,KAAK,CAACK,KAA1B,CAAZ;AACD;;AACD,eAAOtD,KAAK,CAAC4C,MAAM,GAAG8B,IAAV,EAAgB,CAAhB,EAAmBhB,QAAQ,CAACJ,KAA5B,CAAZ;AACD;;AACD,aAAOV,MAAP;AACD,KAXD;;AAYA,UAAM+B,eAAe,GAAG,CAACC,YAAD,EAAejC,MAAM,GAAG,CAAxB,KAA8B;AACpD,UAAIkC,eAAe,GAAGD,YAAY,GAAGzB,IAAI,CAACG,KAA1C;;AACA,UAAI,CAACnB,KAAK,CAACjB,IAAX,EAAiB;AACf2D,QAAAA,eAAe,GAAGlB,IAAI,CAACmB,GAAL,CAASD,eAAT,EAA0B,CAACrB,SAAS,CAACF,KAArC,CAAlB;AACD;;AACD,UAAIyB,YAAY,GAAGpC,MAAM,GAAGkC,eAA5B;;AACA,UAAI,CAAC1C,KAAK,CAACjB,IAAX,EAAiB;AACf6D,QAAAA,YAAY,GAAG/E,KAAK,CAAC+E,YAAD,EAAevB,SAAS,CAACF,KAAzB,EAAgC,CAAhC,CAApB;AACD;;AACD,aAAOyB,YAAP;AACD,KAVD;;AAWA,UAAMC,IAAI,GAAG,CAAC;AACZN,MAAAA,IAAI,GAAG,CADK;AAEZ/B,MAAAA,MAAM,GAAG,CAFG;AAGZsC,MAAAA;AAHY,KAAD,KAIP;AACJ,UAAIhC,KAAK,CAACK,KAAN,IAAe,CAAnB,EAAsB;AACpB;AACD;;AACD,YAAM;AACJV,QAAAA;AADI,UAEFH,KAFJ;AAGA,YAAMmC,YAAY,GAAGH,eAAe,CAACC,IAAD,CAApC;AACA,YAAMK,YAAY,GAAGJ,eAAe,CAACC,YAAD,EAAejC,MAAf,CAApC;;AACA,UAAIR,KAAK,CAACjB,IAAV,EAAgB;AACd,YAAI6B,QAAQ,CAAC,CAAD,CAAR,IAAegC,YAAY,KAAKvB,SAAS,CAACF,KAA9C,EAAqD;AACnD,gBAAM4B,aAAa,GAAGH,YAAY,GAAGvB,SAAS,CAACF,KAA/C;AACAP,UAAAA,QAAQ,CAAC,CAAD,CAAR,CAAYoC,SAAZ,CAAsBD,aAAa,GAAGpB,SAAS,CAACR,KAAb,GAAqB,CAAxD;AACD;;AACD,YAAIP,QAAQ,CAACE,KAAK,CAACK,KAAN,GAAc,CAAf,CAAR,IAA6ByB,YAAY,KAAK,CAAlD,EAAqD;AACnD,gBAAMK,YAAY,GAAGL,YAAY,GAAG,CAApC;AACAhC,UAAAA,QAAQ,CAACE,KAAK,CAACK,KAAN,GAAc,CAAf,CAAR,CAA0B6B,SAA1B,CAAoCC,YAAY,GAAG,CAACtB,SAAS,CAACR,KAAd,GAAsB,CAAtE;AACD;AACF;;AACDb,MAAAA,KAAK,CAACG,MAAN,GAAegC,YAAf;AACAnC,MAAAA,KAAK,CAACE,MAAN,GAAeoC,YAAf;;AACA,UAAIE,UAAU,IAAIL,YAAY,KAAKhC,MAAnC,EAA2C;AACzCN,QAAAA,IAAI,CAAC,QAAD,EAAWyB,eAAe,CAACT,KAA3B,CAAJ;AACD;AACF,KA5BD;;AA6BA,UAAM+B,eAAe,GAAG,MAAM;AAC5B5C,MAAAA,KAAK,CAACI,OAAN,GAAgB,IAAhB;;AACA,UAAIJ,KAAK,CAACG,MAAN,IAAgB,CAAC,CAArB,EAAwB;AACtBoC,QAAAA,IAAI,CAAC;AACHN,UAAAA,IAAI,EAAEzB,KAAK,CAACK;AADT,SAAD,CAAJ;AAGD,OAJD,MAIO,IAAIb,KAAK,CAACG,MAAN,IAAgBK,KAAK,CAACK,KAA1B,EAAiC;AACtC0B,QAAAA,IAAI,CAAC;AACHN,UAAAA,IAAI,EAAE,CAACzB,KAAK,CAACK;AADV,SAAD,CAAJ;AAGD;AACF,KAXD;;AAYA,UAAMgC,IAAI,GAAG,MAAM;AACjBD,MAAAA,eAAe;AACfvC,MAAAA,KAAK,CAACyC,KAAN;AACA9E,MAAAA,SAAS,CAAC,MAAM;AACdgC,QAAAA,KAAK,CAACI,OAAN,GAAgB,KAAhB;AACAmC,QAAAA,IAAI,CAAC;AACHN,UAAAA,IAAI,EAAE,CAAC,CADJ;AAEHO,UAAAA,UAAU,EAAE;AAFT,SAAD,CAAJ;AAID,OANQ,CAAT;AAOD,KAVD;;AAWA,UAAMO,IAAI,GAAG,MAAM;AACjBH,MAAAA,eAAe;AACfvC,MAAAA,KAAK,CAACyC,KAAN;AACA9E,MAAAA,SAAS,CAAC,MAAM;AACdgC,QAAAA,KAAK,CAACI,OAAN,GAAgB,KAAhB;AACAmC,QAAAA,IAAI,CAAC;AACHN,UAAAA,IAAI,EAAE,CADH;AAEHO,UAAAA,UAAU,EAAE;AAFT,SAAD,CAAJ;AAID,OANQ,CAAT;AAOD,KAVD;;AAWA,QAAIQ,aAAJ;;AACA,UAAMC,YAAY,GAAG,MAAMC,YAAY,CAACF,aAAD,CAAvC;;AACA,UAAMlE,QAAQ,GAAG,MAAM;AACrBmE,MAAAA,YAAY;;AACZ,UAAIvD,KAAK,CAACZ,QAAN,GAAiB,CAAjB,IAAsB0B,KAAK,CAACK,KAAN,GAAc,CAAxC,EAA2C;AACzCmC,QAAAA,aAAa,GAAGG,UAAU,CAAC,MAAM;AAC/BJ,UAAAA,IAAI;AACJjE,UAAAA,QAAQ;AACT,SAHyB,EAGvB,CAACY,KAAK,CAACZ,QAHgB,CAA1B;AAID;AACF,KARD;;AASA,UAAMsE,UAAU,GAAG,CAACjD,MAAM,GAAG,CAACT,KAAK,CAACR,YAAjB,KAAkC;AACnD,UAAI,CAACa,IAAI,CAACc,KAAV,EAAiB;AACf;AACD;;AACD,YAAMwC,EAAE,GAAG,MAAM;AACf,YAAIC,EAAJ,EAAQC,EAAR;;AACA,YAAI,CAAC/F,QAAQ,CAACuC,IAAD,CAAb,EAAqB;AACnB,gBAAME,IAAI,GAAG;AACXvB,YAAAA,KAAK,EAAEqB,IAAI,CAACc,KAAL,CAAW2C,WADP;AAEX7E,YAAAA,MAAM,EAAEoB,IAAI,CAACc,KAAL,CAAW4C;AAFR,WAAb;AAIAzD,UAAAA,KAAK,CAACC,IAAN,GAAaA,IAAb;AACAD,UAAAA,KAAK,CAACtB,KAAN,GAAc,EAAE,CAAC4E,EAAE,GAAG5D,KAAK,CAAChB,KAAZ,KAAsB,IAAtB,GAA6B4E,EAA7B,GAAkCrD,IAAI,CAACvB,KAAzC,CAAd;AACAsB,UAAAA,KAAK,CAACrB,MAAN,GAAe,EAAE,CAAC4E,EAAE,GAAG7D,KAAK,CAACf,MAAZ,KAAuB,IAAvB,GAA8B4E,EAA9B,GAAmCtD,IAAI,CAACtB,MAA1C,CAAf;AACD;;AACD,YAAI6B,KAAK,CAACK,KAAV,EAAiB;AACfV,UAAAA,MAAM,GAAGe,IAAI,CAACmB,GAAL,CAAS7B,KAAK,CAACK,KAAN,GAAc,CAAvB,EAA0BV,MAA1B,CAAT;AACD;;AACDH,QAAAA,KAAK,CAACG,MAAN,GAAeA,MAAf;AACAH,QAAAA,KAAK,CAACI,OAAN,GAAgB,IAAhB;AACAJ,QAAAA,KAAK,CAACE,MAAN,GAAegC,eAAe,CAAC/B,MAAD,CAA9B;AACAG,QAAAA,QAAQ,CAACoD,OAAT,CAAkBC,KAAD,IAAW;AAC1BA,UAAAA,KAAK,CAACjB,SAAN,CAAgB,CAAhB;AACD,SAFD;AAGA5D,QAAAA,QAAQ;AACT,OArBD;;AAsBA,UAAItB,QAAQ,CAACuC,IAAD,CAAZ,EAAoB;AAClBzC,QAAAA,QAAQ,GAAGsG,IAAX,CAAgBP,EAAhB;AACD,OAFD,MAEO;AACLA,QAAAA,EAAE;AACH;AACF,KA/BD;;AAgCA,UAAMQ,MAAM,GAAG,MAAMT,UAAU,CAACpD,KAAK,CAACG,MAAP,CAA/B;;AACA,QAAI2D,cAAJ;;AACA,UAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,UAAI,CAACtE,KAAK,CAACV,SAAX,EACE;AACFqB,MAAAA,KAAK,CAAC4D,KAAN,CAAYD,KAAZ;AACAF,MAAAA,cAAc,GAAGI,IAAI,CAACC,GAAL,EAAjB;AACAlB,MAAAA,YAAY;AACZL,MAAAA,eAAe;AAChB,KAPD;;AAQA,UAAMwB,WAAW,GAAIJ,KAAD,IAAW;AAC7B,UAAItE,KAAK,CAACV,SAAN,IAAmBgB,KAAK,CAACI,OAA7B,EAAsC;AACpCC,QAAAA,KAAK,CAACkC,IAAN,CAAWyB,KAAX;;AACA,YAAIzC,kBAAkB,CAACV,KAAvB,EAA8B;AAC5BhD,UAAAA,cAAc,CAACmG,KAAD,EAAQtE,KAAK,CAACJ,eAAd,CAAd;AACAiD,UAAAA,IAAI,CAAC;AACHrC,YAAAA,MAAM,EAAES,KAAK,CAACE;AADX,WAAD,CAAJ;AAGD;AACF;AACF,KAVD;;AAWA,UAAMwD,UAAU,GAAG,MAAM;AACvB,UAAI,CAAC3E,KAAK,CAACV,SAAP,IAAoB,CAACgB,KAAK,CAACI,OAA/B,EAAwC;AACtC;AACD;;AACD,YAAMrB,QAAQ,GAAGmF,IAAI,CAACC,GAAL,KAAaL,cAA9B;AACA,YAAMQ,KAAK,GAAG3D,KAAK,CAACE,KAAN,GAAc9B,QAA5B;AACA,YAAMwF,WAAW,GAAGrD,IAAI,CAACE,GAAL,CAASkD,KAAT,IAAkB,IAAlB,IAA0BpD,IAAI,CAACE,GAAL,CAAST,KAAK,CAACE,KAAf,IAAwBH,IAAI,CAACG,KAAL,GAAa,CAAnF;;AACA,UAAI0D,WAAW,IAAIhD,kBAAkB,CAACV,KAAtC,EAA6C;AAC3C,cAAMX,MAAM,GAAGR,KAAK,CAACd,QAAN,GAAiByB,KAAK,CAACmE,OAAN,CAAc3D,KAA/B,GAAuCR,KAAK,CAACoE,OAAN,CAAc5D,KAApE;AACA,YAAIoB,IAAI,GAAG,CAAX;;AACA,YAAIvC,KAAK,CAACjB,IAAV,EAAgB;AACdwD,UAAAA,IAAI,GAAG/B,MAAM,GAAG,CAAT,GAAaS,KAAK,CAACE,KAAN,GAAc,CAAd,GAAkB,CAAC,CAAnB,GAAuB,CAApC,GAAwC,CAA/C;AACD,SAFD,MAEO;AACLoB,UAAAA,IAAI,GAAG,CAACf,IAAI,CAACP,KAAK,CAACE,KAAN,GAAc,CAAd,GAAkB,MAAlB,GAA2B,OAA5B,CAAJ,CAAyCF,KAAK,CAACE,KAAN,GAAcH,IAAI,CAACG,KAA5D,CAAR;AACD;;AACD0B,QAAAA,IAAI,CAAC;AACHN,UAAAA,IADG;AAEHO,UAAAA,UAAU,EAAE;AAFT,SAAD,CAAJ;AAID,OAZD,MAYO,IAAI7B,KAAK,CAACE,KAAV,EAAiB;AACtB0B,QAAAA,IAAI,CAAC;AACHN,UAAAA,IAAI,EAAE;AADH,SAAD,CAAJ;AAGD;;AACDjC,MAAAA,KAAK,CAACI,OAAN,GAAgB,KAAhB;AACAtB,MAAAA,QAAQ;AACT,KA1BD;;AA2BA,UAAM4F,OAAO,GAAG,CAACC,KAAD,EAAQC,OAAO,GAAG,EAAlB,KAAyB;AACvChC,MAAAA,eAAe;AACfvC,MAAAA,KAAK,CAACyC,KAAN;AACA9E,MAAAA,SAAS,CAAC,MAAM;AACd,YAAI6G,WAAJ;;AACA,YAAInF,KAAK,CAACjB,IAAN,IAAckG,KAAK,KAAKnE,KAAK,CAACK,KAAlC,EAAyC;AACvCgE,UAAAA,WAAW,GAAG7E,KAAK,CAACG,MAAN,KAAiB,CAAjB,GAAqB,CAArB,GAAyBwE,KAAvC;AACD,SAFD,MAEO;AACLE,UAAAA,WAAW,GAAGF,KAAK,GAAGnE,KAAK,CAACK,KAA5B;AACD;;AACD,YAAI+D,OAAO,CAACE,SAAZ,EAAuB;AACrB9G,UAAAA,SAAS,CAAC,MAAM;AACdgC,YAAAA,KAAK,CAACI,OAAN,GAAgB,KAAhB;AACD,WAFQ,CAAT;AAGD,SAJD,MAIO;AACLJ,UAAAA,KAAK,CAACI,OAAN,GAAgB,KAAhB;AACD;;AACDmC,QAAAA,IAAI,CAAC;AACHN,UAAAA,IAAI,EAAE4C,WAAW,GAAG7E,KAAK,CAACG,MADvB;AAEHqC,UAAAA,UAAU,EAAE;AAFT,SAAD,CAAJ;AAID,OAlBQ,CAAT;AAmBD,KAtBD;;AAuBA,UAAMuC,SAAS,GAAG,CAACC,CAAD,EAAIL,KAAJ,KAAc;AAC9B,YAAMxE,MAAM,GAAGwE,KAAK,KAAKrD,eAAe,CAACT,KAAzC;AACA,YAAMc,KAAK,GAAGxB,MAAM,GAAG;AACrB8E,QAAAA,eAAe,EAAEvF,KAAK,CAACP;AADF,OAAH,GAEhB,KAAK,CAFT;AAGA,aAAOvC,YAAY,CAAC,GAAD,EAAM;AACvB,iBAAS+E,KADc;AAEvB,iBAASpD,GAAG,CAAC,WAAD,EAAc;AACxB4B,UAAAA;AADwB,SAAd;AAFW,OAAN,EAKhB,IALgB,CAAnB;AAMD,KAXD;;AAYA,UAAM+E,eAAe,GAAG,MAAM;AAC5B,UAAIpF,KAAK,CAACqF,SAAV,EAAqB;AACnB,eAAOrF,KAAK,CAACqF,SAAN,CAAgB;AACrBhF,UAAAA,MAAM,EAAEmB,eAAe,CAACT,KADH;AAErBuE,UAAAA,KAAK,EAAE5E,KAAK,CAACK;AAFQ,SAAhB,CAAP;AAID;;AACD,UAAInB,KAAK,CAACL,cAAN,IAAwBmB,KAAK,CAACK,KAAN,GAAc,CAA1C,EAA6C;AAC3C,eAAOjE,YAAY,CAAC,KAAD,EAAQ;AACzB,mBAAS2B,GAAG,CAAC,YAAD,EAAe;AACzBK,YAAAA,QAAQ,EAAEc,KAAK,CAACd;AADS,WAAf;AADa,SAAR,EAIhB,CAACyG,KAAK,CAAC7E,KAAK,CAACK,KAAP,CAAL,CAAmByE,IAAnB,CAAwB,EAAxB,EAA4BC,GAA5B,CAAgCR,SAAhC,CAAD,CAJgB,CAAnB;AAKD;AACF,KAdD;;AAeA3G,IAAAA,SAAS,CAAC;AACRyE,MAAAA,IADQ;AAERE,MAAAA,IAFQ;AAGR/C,MAAAA,KAHQ;AAIR6D,MAAAA,MAJQ;AAKRa,MAAAA;AALQ,KAAD,CAAT;AAOAnE,IAAAA,YAAY,CAAC;AACXG,MAAAA,IADW;AAEXhB,MAAAA,KAFW;AAGXc,MAAAA,KAHW;AAIXc,MAAAA;AAJW,KAAD,CAAZ;AAMAxE,IAAAA,KAAK,CAAC,MAAM4C,KAAK,CAACR,YAAb,EAA4B2B,KAAD,IAAWuC,UAAU,CAAC,CAACvC,KAAF,CAAhD,CAAL;AACA/D,IAAAA,KAAK,CAAC0D,KAAD,EAAQ,MAAM4C,UAAU,CAACpD,KAAK,CAACG,MAAP,CAAxB,CAAL;AACArD,IAAAA,KAAK,CAAC,MAAM4C,KAAK,CAACZ,QAAb,EAAuBA,QAAvB,CAAL;AACAhC,IAAAA,KAAK,CAAC,CAACa,WAAD,EAAcC,YAAd,CAAD,EAA8BiG,MAA9B,CAAL;AACA/G,IAAAA,KAAK,CAACoB,iBAAiB,EAAlB,EAAuBsH,OAAD,IAAa;AACtC,UAAIA,OAAO,KAAK,SAAhB,EAA2B;AACzB1G,QAAAA,QAAQ;AACT,OAFD,MAEO;AACLmE,QAAAA,YAAY;AACb;AACF,KANI,CAAL;AAOAhG,IAAAA,SAAS,CAACmG,UAAD,CAAT;AACAlG,IAAAA,WAAW,CAAC,MAAMkG,UAAU,CAACpD,KAAK,CAACG,MAAP,CAAjB,CAAX;AACA9B,IAAAA,aAAa,CAAC,MAAM+E,UAAU,CAACpD,KAAK,CAACG,MAAP,CAAjB,CAAb;AACAhD,IAAAA,aAAa,CAAC8F,YAAD,CAAb;AACA7F,IAAAA,eAAe,CAAC6F,YAAD,CAAf;AACA,WAAO,MAAM;AACX,UAAIK,EAAJ;;AACA,aAAO1G,YAAY,CAAC,KAAD,EAAQ;AACzB,eAAOmD,IADkB;AAEzB,iBAASxB,GAAG;AAFa,OAAR,EAGhB,CAAC3B,YAAY,CAAC,KAAD,EAAQ;AACtB,iBAAS8E,UAAU,CAACb,KADE;AAEtB,iBAAStC,GAAG,CAAC,OAAD,EAAU;AACpBK,UAAAA,QAAQ,EAAEc,KAAK,CAACd;AADI,SAAV,CAFU;AAKtB,wBAAgBmF,YALM;AAMtB,uBAAeK,WANO;AAOtB,sBAAcC,UAPQ;AAQtB,yBAAiBA;AARK,OAAR,EASb,CAAC,CAACf,EAAE,GAAGxD,KAAK,CAAC2F,OAAZ,KAAwB,IAAxB,GAA+B,KAAK,CAApC,GAAwCnC,EAAE,CAACoC,IAAH,CAAQ5F,KAAR,CAAzC,CATa,CAAb,EAS2DoF,eAAe,EAT1E,CAHgB,CAAnB;AAaD,KAfD;AAgBD;;AApUiC,CAAD,CAAnC;AAsUA,SACE3F,SADF,EAEEE,aAAa,IAAIgG,OAFnB","sourcesContent":["import { createVNode as _createVNode } from \"vue\";\nimport { ref, watch, reactive, computed, onMounted, onActivated, onDeactivated, onBeforeUnmount, defineComponent, nextTick } from \"vue\";\nimport { clamp, isHidden, truthProp, numericProp, windowWidth, windowHeight, preventDefault, createNamespace, makeNumericProp } from \"../utils\";\nimport { doubleRaf, useChildren, usePageVisibility } from \"@vant/use\";\nimport { useTouch } from \"../composables/use-touch\";\nimport { useExpose } from \"../composables/use-expose\";\nimport { onPopupReopen } from \"../composables/on-popup-reopen\";\nconst [name, bem] = createNamespace(\"swipe\");\nconst swipeProps = {\n  loop: truthProp,\n  width: numericProp,\n  height: numericProp,\n  vertical: Boolean,\n  autoplay: makeNumericProp(0),\n  duration: makeNumericProp(500),\n  touchable: truthProp,\n  lazyRender: Boolean,\n  initialSwipe: makeNumericProp(0),\n  indicatorColor: String,\n  showIndicators: truthProp,\n  stopPropagation: truthProp\n};\nconst SWIPE_KEY = Symbol(name);\nvar stdin_default = defineComponent({\n  name,\n  props: swipeProps,\n  emits: [\"change\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const root = ref();\n    const state = reactive({\n      rect: null,\n      width: 0,\n      height: 0,\n      offset: 0,\n      active: 0,\n      swiping: false\n    });\n    const touch = useTouch();\n    const {\n      children,\n      linkChildren\n    } = useChildren(SWIPE_KEY);\n    const count = computed(() => children.length);\n    const size = computed(() => state[props.vertical ? \"height\" : \"width\"]);\n    const delta = computed(() => props.vertical ? touch.deltaY.value : touch.deltaX.value);\n    const minOffset = computed(() => {\n      if (state.rect) {\n        const base = props.vertical ? state.rect.height : state.rect.width;\n        return base - size.value * count.value;\n      }\n      return 0;\n    });\n    const maxCount = computed(() => Math.ceil(Math.abs(minOffset.value) / size.value));\n    const trackSize = computed(() => count.value * size.value);\n    const activeIndicator = computed(() => (state.active + count.value) % count.value);\n    const isCorrectDirection = computed(() => {\n      const expect = props.vertical ? \"vertical\" : \"horizontal\";\n      return touch.direction.value === expect;\n    });\n    const trackStyle = computed(() => {\n      const style = {\n        transitionDuration: `${state.swiping ? 0 : props.duration}ms`,\n        transform: `translate${props.vertical ? \"Y\" : \"X\"}(${state.offset}px)`\n      };\n      if (size.value) {\n        const mainAxis = props.vertical ? \"height\" : \"width\";\n        const crossAxis = props.vertical ? \"width\" : \"height\";\n        style[mainAxis] = `${trackSize.value}px`;\n        style[crossAxis] = props[crossAxis] ? `${props[crossAxis]}px` : \"\";\n      }\n      return style;\n    });\n    const getTargetActive = (pace) => {\n      const {\n        active\n      } = state;\n      if (pace) {\n        if (props.loop) {\n          return clamp(active + pace, -1, count.value);\n        }\n        return clamp(active + pace, 0, maxCount.value);\n      }\n      return active;\n    };\n    const getTargetOffset = (targetActive, offset = 0) => {\n      let currentPosition = targetActive * size.value;\n      if (!props.loop) {\n        currentPosition = Math.min(currentPosition, -minOffset.value);\n      }\n      let targetOffset = offset - currentPosition;\n      if (!props.loop) {\n        targetOffset = clamp(targetOffset, minOffset.value, 0);\n      }\n      return targetOffset;\n    };\n    const move = ({\n      pace = 0,\n      offset = 0,\n      emitChange\n    }) => {\n      if (count.value <= 1) {\n        return;\n      }\n      const {\n        active\n      } = state;\n      const targetActive = getTargetActive(pace);\n      const targetOffset = getTargetOffset(targetActive, offset);\n      if (props.loop) {\n        if (children[0] && targetOffset !== minOffset.value) {\n          const outRightBound = targetOffset < minOffset.value;\n          children[0].setOffset(outRightBound ? trackSize.value : 0);\n        }\n        if (children[count.value - 1] && targetOffset !== 0) {\n          const outLeftBound = targetOffset > 0;\n          children[count.value - 1].setOffset(outLeftBound ? -trackSize.value : 0);\n        }\n      }\n      state.active = targetActive;\n      state.offset = targetOffset;\n      if (emitChange && targetActive !== active) {\n        emit(\"change\", activeIndicator.value);\n      }\n    };\n    const correctPosition = () => {\n      state.swiping = true;\n      if (state.active <= -1) {\n        move({\n          pace: count.value\n        });\n      } else if (state.active >= count.value) {\n        move({\n          pace: -count.value\n        });\n      }\n    };\n    const prev = () => {\n      correctPosition();\n      touch.reset();\n      doubleRaf(() => {\n        state.swiping = false;\n        move({\n          pace: -1,\n          emitChange: true\n        });\n      });\n    };\n    const next = () => {\n      correctPosition();\n      touch.reset();\n      doubleRaf(() => {\n        state.swiping = false;\n        move({\n          pace: 1,\n          emitChange: true\n        });\n      });\n    };\n    let autoplayTimer;\n    const stopAutoplay = () => clearTimeout(autoplayTimer);\n    const autoplay = () => {\n      stopAutoplay();\n      if (props.autoplay > 0 && count.value > 1) {\n        autoplayTimer = setTimeout(() => {\n          next();\n          autoplay();\n        }, +props.autoplay);\n      }\n    };\n    const initialize = (active = +props.initialSwipe) => {\n      if (!root.value) {\n        return;\n      }\n      const cb = () => {\n        var _a, _b;\n        if (!isHidden(root)) {\n          const rect = {\n            width: root.value.offsetWidth,\n            height: root.value.offsetHeight\n          };\n          state.rect = rect;\n          state.width = +((_a = props.width) != null ? _a : rect.width);\n          state.height = +((_b = props.height) != null ? _b : rect.height);\n        }\n        if (count.value) {\n          active = Math.min(count.value - 1, active);\n        }\n        state.active = active;\n        state.swiping = true;\n        state.offset = getTargetOffset(active);\n        children.forEach((swipe) => {\n          swipe.setOffset(0);\n        });\n        autoplay();\n      };\n      if (isHidden(root)) {\n        nextTick().then(cb);\n      } else {\n        cb();\n      }\n    };\n    const resize = () => initialize(state.active);\n    let touchStartTime;\n    const onTouchStart = (event) => {\n      if (!props.touchable)\n        return;\n      touch.start(event);\n      touchStartTime = Date.now();\n      stopAutoplay();\n      correctPosition();\n    };\n    const onTouchMove = (event) => {\n      if (props.touchable && state.swiping) {\n        touch.move(event);\n        if (isCorrectDirection.value) {\n          preventDefault(event, props.stopPropagation);\n          move({\n            offset: delta.value\n          });\n        }\n      }\n    };\n    const onTouchEnd = () => {\n      if (!props.touchable || !state.swiping) {\n        return;\n      }\n      const duration = Date.now() - touchStartTime;\n      const speed = delta.value / duration;\n      const shouldSwipe = Math.abs(speed) > 0.25 || Math.abs(delta.value) > size.value / 2;\n      if (shouldSwipe && isCorrectDirection.value) {\n        const offset = props.vertical ? touch.offsetY.value : touch.offsetX.value;\n        let pace = 0;\n        if (props.loop) {\n          pace = offset > 0 ? delta.value > 0 ? -1 : 1 : 0;\n        } else {\n          pace = -Math[delta.value > 0 ? \"ceil\" : \"floor\"](delta.value / size.value);\n        }\n        move({\n          pace,\n          emitChange: true\n        });\n      } else if (delta.value) {\n        move({\n          pace: 0\n        });\n      }\n      state.swiping = false;\n      autoplay();\n    };\n    const swipeTo = (index, options = {}) => {\n      correctPosition();\n      touch.reset();\n      doubleRaf(() => {\n        let targetIndex;\n        if (props.loop && index === count.value) {\n          targetIndex = state.active === 0 ? 0 : index;\n        } else {\n          targetIndex = index % count.value;\n        }\n        if (options.immediate) {\n          doubleRaf(() => {\n            state.swiping = false;\n          });\n        } else {\n          state.swiping = false;\n        }\n        move({\n          pace: targetIndex - state.active,\n          emitChange: true\n        });\n      });\n    };\n    const renderDot = (_, index) => {\n      const active = index === activeIndicator.value;\n      const style = active ? {\n        backgroundColor: props.indicatorColor\n      } : void 0;\n      return _createVNode(\"i\", {\n        \"style\": style,\n        \"class\": bem(\"indicator\", {\n          active\n        })\n      }, null);\n    };\n    const renderIndicator = () => {\n      if (slots.indicator) {\n        return slots.indicator({\n          active: activeIndicator.value,\n          total: count.value\n        });\n      }\n      if (props.showIndicators && count.value > 1) {\n        return _createVNode(\"div\", {\n          \"class\": bem(\"indicators\", {\n            vertical: props.vertical\n          })\n        }, [Array(count.value).fill(\"\").map(renderDot)]);\n      }\n    };\n    useExpose({\n      prev,\n      next,\n      state,\n      resize,\n      swipeTo\n    });\n    linkChildren({\n      size,\n      props,\n      count,\n      activeIndicator\n    });\n    watch(() => props.initialSwipe, (value) => initialize(+value));\n    watch(count, () => initialize(state.active));\n    watch(() => props.autoplay, autoplay);\n    watch([windowWidth, windowHeight], resize);\n    watch(usePageVisibility(), (visible) => {\n      if (visible === \"visible\") {\n        autoplay();\n      } else {\n        stopAutoplay();\n      }\n    });\n    onMounted(initialize);\n    onActivated(() => initialize(state.active));\n    onPopupReopen(() => initialize(state.active));\n    onDeactivated(stopAutoplay);\n    onBeforeUnmount(stopAutoplay);\n    return () => {\n      var _a;\n      return _createVNode(\"div\", {\n        \"ref\": root,\n        \"class\": bem()\n      }, [_createVNode(\"div\", {\n        \"style\": trackStyle.value,\n        \"class\": bem(\"track\", {\n          vertical: props.vertical\n        }),\n        \"onTouchstart\": onTouchStart,\n        \"onTouchmove\": onTouchMove,\n        \"onTouchend\": onTouchEnd,\n        \"onTouchcancel\": onTouchEnd\n      }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]), renderIndicator()]);\n    };\n  }\n});\nexport {\n  SWIPE_KEY,\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}