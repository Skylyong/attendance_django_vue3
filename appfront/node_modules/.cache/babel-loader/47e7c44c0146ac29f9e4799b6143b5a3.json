{"ast":null,"code":"import { createNamespace } from \"../utils\";\nconst [name, bem, t] = createNamespace(\"calendar\");\n\nconst formatMonthTitle = date => t(\"monthTitle\", date.getFullYear(), date.getMonth() + 1);\n\nfunction compareMonth(date1, date2) {\n  const year1 = date1.getFullYear();\n  const year2 = date2.getFullYear();\n\n  if (year1 === year2) {\n    const month1 = date1.getMonth();\n    const month2 = date2.getMonth();\n    return month1 === month2 ? 0 : month1 > month2 ? 1 : -1;\n  }\n\n  return year1 > year2 ? 1 : -1;\n}\n\nfunction compareDay(day1, day2) {\n  const compareMonthResult = compareMonth(day1, day2);\n\n  if (compareMonthResult === 0) {\n    const date1 = day1.getDate();\n    const date2 = day2.getDate();\n    return date1 === date2 ? 0 : date1 > date2 ? 1 : -1;\n  }\n\n  return compareMonthResult;\n}\n\nconst cloneDate = date => new Date(date);\n\nconst cloneDates = dates => Array.isArray(dates) ? dates.map(cloneDate) : cloneDate(dates);\n\nfunction getDayByOffset(date, offset) {\n  const cloned = cloneDate(date);\n  cloned.setDate(cloned.getDate() + offset);\n  return cloned;\n}\n\nconst getPrevDay = date => getDayByOffset(date, -1);\n\nconst getNextDay = date => getDayByOffset(date, 1);\n\nconst getToday = () => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return today;\n};\n\nfunction calcDateNum(date) {\n  const day1 = date[0].getTime();\n  const day2 = date[1].getTime();\n  return (day2 - day1) / (1e3 * 60 * 60 * 24) + 1;\n}\n\nexport { bem, calcDateNum, cloneDate, cloneDates, compareDay, compareMonth, formatMonthTitle, getDayByOffset, getNextDay, getPrevDay, getToday, name, t };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/calendar/utils.js"],"names":["createNamespace","name","bem","t","formatMonthTitle","date","getFullYear","getMonth","compareMonth","date1","date2","year1","year2","month1","month2","compareDay","day1","day2","compareMonthResult","getDate","cloneDate","Date","cloneDates","dates","Array","isArray","map","getDayByOffset","offset","cloned","setDate","getPrevDay","getNextDay","getToday","today","setHours","calcDateNum","getTime"],"mappings":"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","sourcesContent":["import { createNamespace } from \"../utils\";\nconst [name, bem, t] = createNamespace(\"calendar\");\nconst formatMonthTitle = (date) => t(\"monthTitle\", date.getFullYear(), date.getMonth() + 1);\nfunction compareMonth(date1, date2) {\n  const year1 = date1.getFullYear();\n  const year2 = date2.getFullYear();\n  if (year1 === year2) {\n    const month1 = date1.getMonth();\n    const month2 = date2.getMonth();\n    return month1 === month2 ? 0 : month1 > month2 ? 1 : -1;\n  }\n  return year1 > year2 ? 1 : -1;\n}\nfunction compareDay(day1, day2) {\n  const compareMonthResult = compareMonth(day1, day2);\n  if (compareMonthResult === 0) {\n    const date1 = day1.getDate();\n    const date2 = day2.getDate();\n    return date1 === date2 ? 0 : date1 > date2 ? 1 : -1;\n  }\n  return compareMonthResult;\n}\nconst cloneDate = (date) => new Date(date);\nconst cloneDates = (dates) => Array.isArray(dates) ? dates.map(cloneDate) : cloneDate(dates);\nfunction getDayByOffset(date, offset) {\n  const cloned = cloneDate(date);\n  cloned.setDate(cloned.getDate() + offset);\n  return cloned;\n}\nconst getPrevDay = (date) => getDayByOffset(date, -1);\nconst getNextDay = (date) => getDayByOffset(date, 1);\nconst getToday = () => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return today;\n};\nfunction calcDateNum(date) {\n  const day1 = date[0].getTime();\n  const day2 = date[1].getTime();\n  return (day2 - day1) / (1e3 * 60 * 60 * 24) + 1;\n}\nexport {\n  bem,\n  calcDateNum,\n  cloneDate,\n  cloneDates,\n  compareDay,\n  compareMonth,\n  formatMonthTitle,\n  getDayByOffset,\n  getNextDay,\n  getPrevDay,\n  getToday,\n  name,\n  t\n};\n"]},"metadata":{},"sourceType":"module"}