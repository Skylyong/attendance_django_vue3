{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\";\nimport { defineComponent } from \"vue\";\nimport { numericProp, getSizeStyle, makeStringProp, createNamespace } from \"../utils\";\nimport { Network } from \"./Network\";\nconst [name, bem] = createNamespace(\"empty\");\nconst PRESET_IMAGES = [\"error\", \"search\", \"default\"];\nconst emptyProps = {\n  image: makeStringProp(\"default\"),\n  imageSize: numericProp,\n  description: String\n};\nvar stdin_default = defineComponent({\n  name,\n  props: emptyProps,\n\n  setup(props, {\n    slots\n  }) {\n    const renderImage = () => {\n      if (slots.image) {\n        return slots.image();\n      }\n\n      let {\n        image\n      } = props;\n\n      if (image === \"network\") {\n        return Network;\n      }\n\n      if (PRESET_IMAGES.includes(image)) {\n        image = `https://img.yzcdn.cn/vant/empty-image-${image}.png`;\n      }\n\n      return _createVNode(\"img\", {\n        \"src\": image\n      }, null);\n    };\n\n    const renderDescription = () => {\n      const description = slots.description ? slots.description() : props.description;\n\n      if (description) {\n        return _createVNode(\"p\", {\n          \"class\": bem(\"description\")\n        }, [description]);\n      }\n    };\n\n    const renderBottom = () => {\n      if (slots.default) {\n        return _createVNode(\"div\", {\n          \"class\": bem(\"bottom\")\n        }, [slots.default()]);\n      }\n    };\n\n    return () => _createVNode(\"div\", {\n      \"class\": bem()\n    }, [_createVNode(\"div\", {\n      \"class\": bem(\"image\"),\n      \"style\": getSizeStyle(props.imageSize)\n    }, [renderImage()]), renderDescription(), renderBottom()]);\n  }\n\n});\nexport { stdin_default as default };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/empty/Empty.js"],"names":["createVNode","_createVNode","defineComponent","numericProp","getSizeStyle","makeStringProp","createNamespace","Network","name","bem","PRESET_IMAGES","emptyProps","image","imageSize","description","String","stdin_default","props","setup","slots","renderImage","includes","renderDescription","renderBottom","default"],"mappings":"AAAA,SAASA,WAAW,IAAIC,YAAxB,QAA4C,KAA5C;AACA,SAASC,eAAT,QAAgC,KAAhC;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,cAApC,EAAoDC,eAApD,QAA2E,UAA3E;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,MAAM,CAACC,IAAD,EAAOC,GAAP,IAAcH,eAAe,CAAC,OAAD,CAAnC;AACA,MAAMI,aAAa,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,CAAtB;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,KAAK,EAAEP,cAAc,CAAC,SAAD,CADJ;AAEjBQ,EAAAA,SAAS,EAAEV,WAFM;AAGjBW,EAAAA,WAAW,EAAEC;AAHI,CAAnB;AAKA,IAAIC,aAAa,GAAGd,eAAe,CAAC;AAClCM,EAAAA,IADkC;AAElCS,EAAAA,KAAK,EAAEN,UAF2B;;AAGlCO,EAAAA,KAAK,CAACD,KAAD,EAAQ;AACXE,IAAAA;AADW,GAAR,EAEF;AACD,UAAMC,WAAW,GAAG,MAAM;AACxB,UAAID,KAAK,CAACP,KAAV,EAAiB;AACf,eAAOO,KAAK,CAACP,KAAN,EAAP;AACD;;AACD,UAAI;AACFA,QAAAA;AADE,UAEAK,KAFJ;;AAGA,UAAIL,KAAK,KAAK,SAAd,EAAyB;AACvB,eAAOL,OAAP;AACD;;AACD,UAAIG,aAAa,CAACW,QAAd,CAAuBT,KAAvB,CAAJ,EAAmC;AACjCA,QAAAA,KAAK,GAAI,yCAAwCA,KAAM,MAAvD;AACD;;AACD,aAAOX,YAAY,CAAC,KAAD,EAAQ;AACzB,eAAOW;AADkB,OAAR,EAEhB,IAFgB,CAAnB;AAGD,KAhBD;;AAiBA,UAAMU,iBAAiB,GAAG,MAAM;AAC9B,YAAMR,WAAW,GAAGK,KAAK,CAACL,WAAN,GAAoBK,KAAK,CAACL,WAAN,EAApB,GAA0CG,KAAK,CAACH,WAApE;;AACA,UAAIA,WAAJ,EAAiB;AACf,eAAOb,YAAY,CAAC,GAAD,EAAM;AACvB,mBAASQ,GAAG,CAAC,aAAD;AADW,SAAN,EAEhB,CAACK,WAAD,CAFgB,CAAnB;AAGD;AACF,KAPD;;AAQA,UAAMS,YAAY,GAAG,MAAM;AACzB,UAAIJ,KAAK,CAACK,OAAV,EAAmB;AACjB,eAAOvB,YAAY,CAAC,KAAD,EAAQ;AACzB,mBAASQ,GAAG,CAAC,QAAD;AADa,SAAR,EAEhB,CAACU,KAAK,CAACK,OAAN,EAAD,CAFgB,CAAnB;AAGD;AACF,KAND;;AAOA,WAAO,MAAMvB,YAAY,CAAC,KAAD,EAAQ;AAC/B,eAASQ,GAAG;AADmB,KAAR,EAEtB,CAACR,YAAY,CAAC,KAAD,EAAQ;AACtB,eAASQ,GAAG,CAAC,OAAD,CADU;AAEtB,eAASL,YAAY,CAACa,KAAK,CAACJ,SAAP;AAFC,KAAR,EAGb,CAACO,WAAW,EAAZ,CAHa,CAAb,EAGkBE,iBAAiB,EAHnC,EAGuCC,YAAY,EAHnD,CAFsB,CAAzB;AAMD;;AA5CiC,CAAD,CAAnC;AA8CA,SACEP,aAAa,IAAIQ,OADnB","sourcesContent":["import { createVNode as _createVNode } from \"vue\";\nimport { defineComponent } from \"vue\";\nimport { numericProp, getSizeStyle, makeStringProp, createNamespace } from \"../utils\";\nimport { Network } from \"./Network\";\nconst [name, bem] = createNamespace(\"empty\");\nconst PRESET_IMAGES = [\"error\", \"search\", \"default\"];\nconst emptyProps = {\n  image: makeStringProp(\"default\"),\n  imageSize: numericProp,\n  description: String\n};\nvar stdin_default = defineComponent({\n  name,\n  props: emptyProps,\n  setup(props, {\n    slots\n  }) {\n    const renderImage = () => {\n      if (slots.image) {\n        return slots.image();\n      }\n      let {\n        image\n      } = props;\n      if (image === \"network\") {\n        return Network;\n      }\n      if (PRESET_IMAGES.includes(image)) {\n        image = `https://img.yzcdn.cn/vant/empty-image-${image}.png`;\n      }\n      return _createVNode(\"img\", {\n        \"src\": image\n      }, null);\n    };\n    const renderDescription = () => {\n      const description = slots.description ? slots.description() : props.description;\n      if (description) {\n        return _createVNode(\"p\", {\n          \"class\": bem(\"description\")\n        }, [description]);\n      }\n    };\n    const renderBottom = () => {\n      if (slots.default) {\n        return _createVNode(\"div\", {\n          \"class\": bem(\"bottom\")\n        }, [slots.default()]);\n      }\n    };\n    return () => _createVNode(\"div\", {\n      \"class\": bem()\n    }, [_createVNode(\"div\", {\n      \"class\": bem(\"image\"),\n      \"style\": getSizeStyle(props.imageSize)\n    }, [renderImage()]), renderDescription(), renderBottom()]);\n  }\n});\nexport {\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}