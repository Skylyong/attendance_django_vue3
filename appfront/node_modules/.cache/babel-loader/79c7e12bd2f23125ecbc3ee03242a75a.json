{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_a_table = _resolveComponent(\"a-table\");\n\n  return _openBlock(), _createBlock(_component_a_table, {\n    columns: _ctx.columns,\n    \"row-key\": record => record.login.uuid,\n    \"data-source\": _ctx.dataSource,\n    pagination: _ctx.pagination,\n    loading: _ctx.loading,\n    onChange: _ctx.handleTableChange\n  }, {\n    bodyCell: _withCtx(({\n      column,\n      text\n    }) => [column.dataIndex === 'name' ? (_openBlock(), _createElementBlock(_Fragment, {\n      key: 0\n    }, [_createTextVNode(_toDisplayString(text.first) + \" \" + _toDisplayString(text.last), 1\n    /* TEXT */\n    )], 2112\n    /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */\n    )) : _createCommentVNode(\"v-if\", true)]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"columns\", \"row-key\", \"data-source\", \"pagination\", \"loading\", \"onChange\"]);\n}","map":{"version":3,"mappings":";;;;uBACEA,aAWUC,kBAXV,EAWU;AAVPC,WAAO,EAAEC,YAUF;AATP,eAASC,MAAM,IAAIA,MAAM,CAACC,KAAP,CAAaC,IASzB;AARP,mBAAaH,eAQN;AAPPI,cAAU,EAAEJ,eAOL;AANPK,WAAO,EAAEL,YAMF;AALPM,YAAM,EAAEN;AAKD,GAXV;AAQaO,YAAQ,WACjB,CAAwF;AADnEC,YACmE;AAD3DC;AAC2D,KAAxF,KADiC,CACjBD,MAAM,CAACE,SAAP,KAAgB,wBAAhCC,oBAAwFC,SAAxF,EAAwF;AAAAC;AAAA,KAAxF,EAAwF,mCAAxCJ,IAAI,CAACK,SAAQ,MAACC,iBAAGN,IAAI,CAACO,IAAR,GAAY;AAAA;KAAc,CAAxF;;AAAA,0CADiC,CAAhB;;;;GARrB;;AAAA","names":["_createBlock","_component_a_table","columns","_ctx","record","login","uuid","pagination","loading","onChange","bodyCell","column","text","dataIndex","_createElementBlock","_Fragment","key","first","_toDisplayString","last"],"sourceRoot":"","sources":["/Users/lyong/Desktop/myproj/src/components/worker/workerDetailData.vue"],"sourcesContent":["<template>\n  <a-table\n    :columns=\"columns\"\n    :row-key=\"record => record.login.uuid\"\n    :data-source=\"dataSource\"\n    :pagination=\"pagination\"\n    :loading=\"loading\"\n    @change=\"handleTableChange\"\n  >\n    <template #bodyCell=\"{ column, text }\">\n      <template v-if=\"column.dataIndex === 'name'\">{{ text.first }} {{ text.last }}</template>\n    </template>\n  </a-table>\n</template>\n\n<script>\nimport { usePagination } from 'vue-request';\nimport { computed, defineComponent } from 'vue';\nimport axios from 'axios';\nconst columns = [{\n  title: '姓名',\n  dataIndex: 'name',\n  sorter: true,\n  width: '10%',\n},\n{\n  title: '科室',\n  dataIndex: 'name',\n  sorter: true,\n  width: '10%',\n} \n,\n{\n  title: '开始时间',\n  dataIndex: 'name',\n  sorter: true,\n  width: '10%',\n} ,\n{\n  title: '结束时间',\n  dataIndex: 'name',\n  sorter: true,\n  width: '10%',\n} \n,\n{\n  title: '申请时长',\n  dataIndex: 'name',\n  sorter: true,\n  width: '10%',\n}\n,\n{\n  title: '申请类型',\n  dataIndex: 'name',\n  filters: [{\n    text: '公休',\n    value: '公休',\n  }, {\n    text: '值班加班',\n    value: '公休',\n  }],\n  sorter: true,\n  width: '10%',\n}\n,\n{\n  title: '申请原因',\n  dataIndex: 'name',\n  sorter: true,\n  width: '10%',\n},\n{\n  title: '审批状态',\n  dataIndex: 'name',\n  sorter: true,\n  width: '10%',\n}\n,\n{\n  title: '批注',\n  dataIndex: 'name',\n  sorter: true,\n  width: '10%',\n}\n,\n{\n  title: '申请类型',\n  dataIndex: 'name',\n  sorter: true,\n  width: '10%',\n}  \n,\n{\n  title: 'Gender',\n  dataIndex: 'gender',\n  filters: [{\n    text: 'Male',\n    value: 'male',\n  }, {\n    text: 'Female',\n    value: 'female',\n  }],\n  width: '20%',\n}, {\n  title: 'Email',\n  dataIndex: 'email',\n}];\n\nconst queryData = params => {\n  //  console.log(params);\n  return axios.get('https://randomuser.me/api?noinfo', {\n    params,\n   \n  });\n};\n\nexport default defineComponent({\n  setup() {\n    const {\n      data: dataSource,\n      run,\n      loading,\n      current,\n      pageSize,\n    } = usePagination(queryData, {\n      formatResult: res => res.data.results,\n      pagination: {\n        currentKey: 'page',\n        pageSizeKey: 'results',\n      },\n    });\n    const pagination = computed(() => ({\n      total: 200,\n      current: current.value,\n      pageSize: pageSize.value,\n    }));\n\n    const handleTableChange = (pag, filters, sorter) => {\n      run({\n        results: pag.pageSize,\n        page: pag?.current,\n        sortField: sorter.field,\n        sortOrder: sorter.order,\n        ...filters,\n      });\n    };\n\n    return {\n      dataSource,\n      pagination,\n      loading,\n      columns,\n      handleTableChange,\n    };\n  },\n\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}