{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\nimport { ref, watch, nextTick, reactive, onMounted, defineComponent } from \"vue\";\nimport { pick, truthProp, unknownProp, windowWidth, windowHeight, makeArrayProp, makeStringProp, makeNumericProp, callInterceptor, createNamespace, HAPTICS_FEEDBACK } from \"../utils\";\nimport { useRect } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose\";\nimport { Icon } from \"../icon\";\nimport { Swipe } from \"../swipe\";\nimport { Popup } from \"../popup\";\nimport ImagePreviewItem from \"./ImagePreviewItem\";\nconst [name, bem] = createNamespace(\"image-preview\");\nconst popupProps = [\"show\", \"transition\", \"overlayStyle\", \"closeOnPopstate\"];\nconst imagePreviewProps = {\n  show: Boolean,\n  loop: truthProp,\n  images: makeArrayProp(),\n  minZoom: makeNumericProp(1 / 3),\n  maxZoom: makeNumericProp(3),\n  overlay: truthProp,\n  closeable: Boolean,\n  showIndex: truthProp,\n  className: unknownProp,\n  closeIcon: makeStringProp(\"clear\"),\n  transition: String,\n  beforeClose: Function,\n  overlayClass: unknownProp,\n  overlayStyle: Object,\n  swipeDuration: makeNumericProp(300),\n  startPosition: makeNumericProp(0),\n  showIndicators: Boolean,\n  closeOnPopstate: truthProp,\n  closeIconPosition: makeStringProp(\"top-right\")\n};\nvar stdin_default = defineComponent({\n  name,\n  props: imagePreviewProps,\n  emits: [\"scale\", \"close\", \"closed\", \"change\", \"update:show\"],\n\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const swipeRef = ref();\n    const state = reactive({\n      active: 0,\n      rootWidth: 0,\n      rootHeight: 0\n    });\n\n    const resize = () => {\n      if (swipeRef.value) {\n        const rect = useRect(swipeRef.value.$el);\n        state.rootWidth = rect.width;\n        state.rootHeight = rect.height;\n        swipeRef.value.resize();\n      }\n    };\n\n    const emitScale = args => emit(\"scale\", args);\n\n    const updateShow = show => emit(\"update:show\", show);\n\n    const emitClose = () => {\n      callInterceptor(props.beforeClose, {\n        args: [state.active],\n        done: () => updateShow(false)\n      });\n    };\n\n    const setActive = active => {\n      if (active !== state.active) {\n        state.active = active;\n        emit(\"change\", active);\n      }\n    };\n\n    const renderIndex = () => {\n      if (props.showIndex) {\n        return _createVNode(\"div\", {\n          \"class\": bem(\"index\")\n        }, [slots.index ? slots.index({\n          index: state.active\n        }) : `${state.active + 1} / ${props.images.length}`]);\n      }\n    };\n\n    const renderCover = () => {\n      if (slots.cover) {\n        return _createVNode(\"div\", {\n          \"class\": bem(\"cover\")\n        }, [slots.cover()]);\n      }\n    };\n\n    const renderImages = () => _createVNode(Swipe, {\n      \"ref\": swipeRef,\n      \"lazyRender\": true,\n      \"loop\": props.loop,\n      \"class\": bem(\"swipe\"),\n      \"duration\": props.swipeDuration,\n      \"initialSwipe\": props.startPosition,\n      \"showIndicators\": props.showIndicators,\n      \"indicatorColor\": \"white\",\n      \"onChange\": setActive\n    }, {\n      default: () => [props.images.map(image => _createVNode(ImagePreviewItem, {\n        \"src\": image,\n        \"show\": props.show,\n        \"active\": state.active,\n        \"maxZoom\": props.maxZoom,\n        \"minZoom\": props.minZoom,\n        \"rootWidth\": state.rootWidth,\n        \"rootHeight\": state.rootHeight,\n        \"onScale\": emitScale,\n        \"onClose\": emitClose\n      }, null))]\n    });\n\n    const renderClose = () => {\n      if (props.closeable) {\n        return _createVNode(Icon, {\n          \"role\": \"button\",\n          \"name\": props.closeIcon,\n          \"class\": [bem(\"close-icon\", props.closeIconPosition), HAPTICS_FEEDBACK],\n          \"onClick\": emitClose\n        }, null);\n      }\n    };\n\n    const onClosed = () => emit(\"closed\");\n\n    const swipeTo = (index, options) => {\n      var _a;\n\n      return (_a = swipeRef.value) == null ? void 0 : _a.swipeTo(index, options);\n    };\n\n    useExpose({\n      swipeTo\n    });\n    onMounted(resize);\n    watch([windowWidth, windowHeight], resize);\n    watch(() => props.startPosition, value => setActive(+value));\n    watch(() => props.show, value => {\n      const {\n        images,\n        startPosition\n      } = props;\n\n      if (value) {\n        setActive(+startPosition);\n        nextTick(() => {\n          resize();\n          swipeTo(+startPosition, {\n            immediate: true\n          });\n        });\n      } else {\n        emit(\"close\", {\n          index: state.active,\n          url: images[state.active]\n        });\n      }\n    });\n    return () => _createVNode(Popup, _mergeProps({\n      \"class\": [bem(), props.className],\n      \"overlayClass\": [bem(\"overlay\"), props.overlayClass],\n      \"onClosed\": onClosed,\n      \"onUpdate:show\": updateShow\n    }, pick(props, popupProps)), {\n      default: () => [renderClose(), renderImages(), renderIndex(), renderCover()]\n    });\n  }\n\n});\nexport { stdin_default as default };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/image-preview/ImagePreview.js"],"names":["mergeProps","_mergeProps","createVNode","_createVNode","ref","watch","nextTick","reactive","onMounted","defineComponent","pick","truthProp","unknownProp","windowWidth","windowHeight","makeArrayProp","makeStringProp","makeNumericProp","callInterceptor","createNamespace","HAPTICS_FEEDBACK","useRect","useExpose","Icon","Swipe","Popup","ImagePreviewItem","name","bem","popupProps","imagePreviewProps","show","Boolean","loop","images","minZoom","maxZoom","overlay","closeable","showIndex","className","closeIcon","transition","String","beforeClose","Function","overlayClass","overlayStyle","Object","swipeDuration","startPosition","showIndicators","closeOnPopstate","closeIconPosition","stdin_default","props","emits","setup","emit","slots","swipeRef","state","active","rootWidth","rootHeight","resize","value","rect","$el","width","height","emitScale","args","updateShow","emitClose","done","setActive","renderIndex","index","length","renderCover","cover","renderImages","default","map","image","renderClose","onClosed","swipeTo","options","_a","immediate","url"],"mappings":"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","sourcesContent":["import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\nimport { ref, watch, nextTick, reactive, onMounted, defineComponent } from \"vue\";\nimport { pick, truthProp, unknownProp, windowWidth, windowHeight, makeArrayProp, makeStringProp, makeNumericProp, callInterceptor, createNamespace, HAPTICS_FEEDBACK } from \"../utils\";\nimport { useRect } from \"@vant/use\";\nimport { useExpose } from \"../composables/use-expose\";\nimport { Icon } from \"../icon\";\nimport { Swipe } from \"../swipe\";\nimport { Popup } from \"../popup\";\nimport ImagePreviewItem from \"./ImagePreviewItem\";\nconst [name, bem] = createNamespace(\"image-preview\");\nconst popupProps = [\"show\", \"transition\", \"overlayStyle\", \"closeOnPopstate\"];\nconst imagePreviewProps = {\n  show: Boolean,\n  loop: truthProp,\n  images: makeArrayProp(),\n  minZoom: makeNumericProp(1 / 3),\n  maxZoom: makeNumericProp(3),\n  overlay: truthProp,\n  closeable: Boolean,\n  showIndex: truthProp,\n  className: unknownProp,\n  closeIcon: makeStringProp(\"clear\"),\n  transition: String,\n  beforeClose: Function,\n  overlayClass: unknownProp,\n  overlayStyle: Object,\n  swipeDuration: makeNumericProp(300),\n  startPosition: makeNumericProp(0),\n  showIndicators: Boolean,\n  closeOnPopstate: truthProp,\n  closeIconPosition: makeStringProp(\"top-right\")\n};\nvar stdin_default = defineComponent({\n  name,\n  props: imagePreviewProps,\n  emits: [\"scale\", \"close\", \"closed\", \"change\", \"update:show\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const swipeRef = ref();\n    const state = reactive({\n      active: 0,\n      rootWidth: 0,\n      rootHeight: 0\n    });\n    const resize = () => {\n      if (swipeRef.value) {\n        const rect = useRect(swipeRef.value.$el);\n        state.rootWidth = rect.width;\n        state.rootHeight = rect.height;\n        swipeRef.value.resize();\n      }\n    };\n    const emitScale = (args) => emit(\"scale\", args);\n    const updateShow = (show) => emit(\"update:show\", show);\n    const emitClose = () => {\n      callInterceptor(props.beforeClose, {\n        args: [state.active],\n        done: () => updateShow(false)\n      });\n    };\n    const setActive = (active) => {\n      if (active !== state.active) {\n        state.active = active;\n        emit(\"change\", active);\n      }\n    };\n    const renderIndex = () => {\n      if (props.showIndex) {\n        return _createVNode(\"div\", {\n          \"class\": bem(\"index\")\n        }, [slots.index ? slots.index({\n          index: state.active\n        }) : `${state.active + 1} / ${props.images.length}`]);\n      }\n    };\n    const renderCover = () => {\n      if (slots.cover) {\n        return _createVNode(\"div\", {\n          \"class\": bem(\"cover\")\n        }, [slots.cover()]);\n      }\n    };\n    const renderImages = () => _createVNode(Swipe, {\n      \"ref\": swipeRef,\n      \"lazyRender\": true,\n      \"loop\": props.loop,\n      \"class\": bem(\"swipe\"),\n      \"duration\": props.swipeDuration,\n      \"initialSwipe\": props.startPosition,\n      \"showIndicators\": props.showIndicators,\n      \"indicatorColor\": \"white\",\n      \"onChange\": setActive\n    }, {\n      default: () => [props.images.map((image) => _createVNode(ImagePreviewItem, {\n        \"src\": image,\n        \"show\": props.show,\n        \"active\": state.active,\n        \"maxZoom\": props.maxZoom,\n        \"minZoom\": props.minZoom,\n        \"rootWidth\": state.rootWidth,\n        \"rootHeight\": state.rootHeight,\n        \"onScale\": emitScale,\n        \"onClose\": emitClose\n      }, null))]\n    });\n    const renderClose = () => {\n      if (props.closeable) {\n        return _createVNode(Icon, {\n          \"role\": \"button\",\n          \"name\": props.closeIcon,\n          \"class\": [bem(\"close-icon\", props.closeIconPosition), HAPTICS_FEEDBACK],\n          \"onClick\": emitClose\n        }, null);\n      }\n    };\n    const onClosed = () => emit(\"closed\");\n    const swipeTo = (index, options) => {\n      var _a;\n      return (_a = swipeRef.value) == null ? void 0 : _a.swipeTo(index, options);\n    };\n    useExpose({\n      swipeTo\n    });\n    onMounted(resize);\n    watch([windowWidth, windowHeight], resize);\n    watch(() => props.startPosition, (value) => setActive(+value));\n    watch(() => props.show, (value) => {\n      const {\n        images,\n        startPosition\n      } = props;\n      if (value) {\n        setActive(+startPosition);\n        nextTick(() => {\n          resize();\n          swipeTo(+startPosition, {\n            immediate: true\n          });\n        });\n      } else {\n        emit(\"close\", {\n          index: state.active,\n          url: images[state.active]\n        });\n      }\n    });\n    return () => _createVNode(Popup, _mergeProps({\n      \"class\": [bem(), props.className],\n      \"overlayClass\": [bem(\"overlay\"), props.overlayClass],\n      \"onClosed\": onClosed,\n      \"onUpdate:show\": updateShow\n    }, pick(props, popupProps)), {\n      default: () => [renderClose(), renderImages(), renderIndex(), renderCover()]\n    });\n  }\n});\nexport {\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}