{"ast":null,"code":"import { createApp } from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport store from './store';\nimport Antd from 'ant-design-vue';\nimport 'ant-design-vue/dist/antd.css'; // import Button from 'ant-design-vue/lib/button';\n// import 'ant-design-vue/dist/antd.css';\n// Vue.component(Button.name, Button);\n// createApp(App).use(store).use(router).mount('#app')\n// const app = createApp(App);\n// app.use(Antd).mount('#app');\n\nconst app = createApp(App).use(Antd).use(router).use(store);\napp.mount(\"#app\");\n路由守卫;\nrouter.beforeEach((to, from, next) => {\n  //路由中设置的needLogin字段就在to当中 \n  if (window.sessionStorage.data) {\n    console.log(window.sessionStorage); // console.log(to.path) //每次跳转的路径\n\n    if (to.path === '/') {\n      //登录状态下 访问login.vue页面 会跳到index.vue\n      next({\n        path: '/worker'\n      });\n    } else {\n      next();\n    }\n  } else {\n    // 如果没有session ,访问任何页面。都会进入到 登录页\n    if (to.path === '/') {\n      // 如果是登录页面的话，直接next() -->解决注销后的循环执行bug\n      next();\n    } else {\n      // 否则 跳转到登录页面\n      next({\n        path: '/'\n      });\n    }\n  }\n});\nrouter.beforeEach((to, from, next) => {\n  //获取用户登录成功后储存的登录标志\n  let getFlag = localStorage.getItem(\"Flag\");\n  let getid = localStorage.getItem(\"Userid\");\n  let userType = localStorage.getItem(\"userType\"); //如果登录标志存在且为isLogin，即用户已登录\n\n  console.log(userType, getFlag, getid);\n\n  if (getFlag === \"isLogin\" && getid !== null) {\n    //设置vuex登录状态为已登录\n    store.state.isLogin = true;\n\n    if (userType == 2) {\n      next({\n        path: '/manager'\n      });\n    } else if (userType == 1) {\n      next({\n        path: '/worker'\n      });\n    } else {\n      next();\n    } //如果已登录，还想想进入登录注册界面，则定向回首页\n\n\n    if (!to.meta.isLogin) {\n      //iViewUi友好提示\n      // iView.Message.error('请先退出登录');\n      if (userType == 2) {\n        next({\n          path: '/manager'\n        });\n      } else if (userType == 1) {\n        next({\n          path: '/worker'\n        });\n      } else {\n        next({\n          path: '/'\n        });\n      }\n    } //如果登录标志不存在，即未登录\n\n  } else {\n    //用户想进入需要登录的页面，则定向回登录界面\n    if (to.meta.isLogin) {\n      next({\n        path: '/'\n      }); //用户进入无需登录的界面，则跳转继续\n    } else {\n      next();\n    }\n  }\n});\nrouter.afterEach(() => {\n  window.scroll(0, 0);\n});","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/src/main.js"],"names":["createApp","App","router","store","Antd","app","use","mount","路由守卫","beforeEach","to","from","next","window","sessionStorage","data","console","log","path","getFlag","localStorage","getItem","getid","userType","state","isLogin","meta","afterEach","scroll"],"mappings":"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","sourcesContent":["import { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\nimport Antd from 'ant-design-vue'\nimport 'ant-design-vue/dist/antd.css'\n\n// import Button from 'ant-design-vue/lib/button';\n// import 'ant-design-vue/dist/antd.css';\n\n// Vue.component(Button.name, Button);\n// createApp(App).use(store).use(router).mount('#app')\n// const app = createApp(App);\n\n// app.use(Antd).mount('#app');\nconst app = createApp(App).use(Antd).use(router).use(store);\napp.mount(\"#app\");\n\n\n路由守卫\nrouter.beforeEach((to, from, next)=>{\n    //路由中设置的needLogin字段就在to当中 \n    if(window.sessionStorage.data){\n      console.log(window.sessionStorage);\n      // console.log(to.path) //每次跳转的路径\n      if(to.path === '/'){\n        //登录状态下 访问login.vue页面 会跳到index.vue\n        next({path: '/worker'});\n      }else{\n        next();\n      }\n    }else{\n      // 如果没有session ,访问任何页面。都会进入到 登录页\n      if (to.path === '/') { // 如果是登录页面的话，直接next() -->解决注销后的循环执行bug\n        next();\n      } else { // 否则 跳转到登录页面\n        next({ path: '/' });\n      }\n    }\n})\n\nrouter.beforeEach((to, from, next) => {\n \n  //获取用户登录成功后储存的登录标志\n  let getFlag = localStorage.getItem(\"Flag\");\n  let getid = localStorage.getItem(\"Userid\");\n  let userType = localStorage.getItem(\"userType\");\n  //如果登录标志存在且为isLogin，即用户已登录\n  console.log(userType, getFlag,getid)\n  if (getFlag === \"isLogin\"&&getid !== null) {\n\n      //设置vuex登录状态为已登录\n      store.state.isLogin = true;\n      if (userType == 2){\n          next(\n            {\n              path: '/manager'\n            }\n          )\n      }\n      else if(userType == 1){\n        next({\n          path: '/worker'\n      })\n      }\n      else{\n        next()\n      }\n     \n      //如果已登录，还想想进入登录注册界面，则定向回首页\n      if (!to.meta.isLogin) {\n          //iViewUi友好提示\n          // iView.Message.error('请先退出登录');\n          if (userType == 2){\n            next({\n              path: '/manager'\n          })\n          }\n          else if(userType == 1){\n            next({\n              path: '/worker'\n          })\n          }\n          else{\n            next({\n              path: '/'\n          })\n          }\n         \n      }\n\n      //如果登录标志不存在，即未登录\n  } else {\n\n      //用户想进入需要登录的页面，则定向回登录界面\n      if (to.meta.isLogin) {\n          next({\n              path: '/',\n          })\n          //用户进入无需登录的界面，则跳转继续\n      } else {\n          next()\n      }\n\n  }\n\n});\n\nrouter.afterEach(() => {\n  window.scroll(0, 0);\n});"]},"metadata":{},"sourceType":"module"}