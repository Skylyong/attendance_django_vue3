{"ast":null,"code":"var setupDefaults = require('./setupDefaults');\n\nvar round = require('./round');\n\nvar ceil = require('./ceil');\n\nvar floor = require('./floor');\n\nvar isNumber = require('./isNumber');\n\nvar toValueString = require('./toValueString');\n\nvar toFixed = require('./toFixed');\n\nvar toNumberString = require('./toNumberString');\n\nvar assign = require('./assign');\n/**\r\n  * 千分位分隔符、小数点\r\n  *\r\n  * @param {String/Number} num 数值\r\n  * @param {CommafyOptions} options 参数\r\n  * @return {String}\r\n */\n\n\nfunction commafy(num, options) {\n  var opts = assign({}, setupDefaults.commafyOptions, options);\n  var optDigits = opts.digits;\n  var isNum = isNumber(num);\n  var rest, result, isNegative, intStr, floatStr;\n\n  if (isNum) {\n    rest = (opts.ceil ? ceil : opts.floor ? floor : round)(num, optDigits);\n    result = toNumberString(optDigits ? toFixed(rest, optDigits) : rest).split('.');\n    intStr = result[0];\n    floatStr = result[1];\n    isNegative = intStr && rest < 0;\n\n    if (isNegative) {\n      intStr = intStr.substring(1, intStr.length);\n    }\n  } else {\n    rest = toValueString(num).replace(/,/g, '');\n    result = rest ? [rest] : [];\n    intStr = result[0];\n  }\n\n  if (result.length) {\n    return (isNegative ? '-' : '') + intStr.replace(new RegExp('(?=(?!(\\\\b))(.{' + (opts.spaceNumber || 3) + '})+$)', 'g'), opts.separator || ',') + (floatStr ? '.' + floatStr : '');\n  }\n\n  return rest;\n}\n\nmodule.exports = commafy;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/xe-utils/commafy.js"],"names":["setupDefaults","require","round","ceil","floor","isNumber","toValueString","toFixed","toNumberString","assign","commafy","num","options","opts","commafyOptions","optDigits","digits","isNum","rest","result","isNegative","intStr","floatStr","split","substring","length","replace","RegExp","spaceNumber","separator","module","exports"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAAnB;;AAEA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIK,aAAa,GAAGL,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIM,OAAO,GAAGN,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAIO,cAAc,GAAGP,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIQ,MAAM,GAAGR,OAAO,CAAC,UAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,OAAT,CAAiBC,GAAjB,EAAsBC,OAAtB,EAA+B;AAC7B,MAAIC,IAAI,GAAGJ,MAAM,CAAC,EAAD,EAAKT,aAAa,CAACc,cAAnB,EAAmCF,OAAnC,CAAjB;AACA,MAAIG,SAAS,GAAGF,IAAI,CAACG,MAArB;AACA,MAAIC,KAAK,GAAGZ,QAAQ,CAACM,GAAD,CAApB;AACA,MAAIO,IAAJ,EAAUC,MAAV,EAAkBC,UAAlB,EAA8BC,MAA9B,EAAsCC,QAAtC;;AACA,MAAIL,KAAJ,EAAW;AACTC,IAAAA,IAAI,GAAG,CAACL,IAAI,CAACV,IAAL,GAAYA,IAAZ,GAAoBU,IAAI,CAACT,KAAL,GAAaA,KAAb,GAAqBF,KAA1C,EAAkDS,GAAlD,EAAuDI,SAAvD,CAAP;AACAI,IAAAA,MAAM,GAAGX,cAAc,CAACO,SAAS,GAAGR,OAAO,CAACW,IAAD,EAAOH,SAAP,CAAV,GAA8BG,IAAxC,CAAd,CAA4DK,KAA5D,CAAkE,GAAlE,CAAT;AACAF,IAAAA,MAAM,GAAGF,MAAM,CAAC,CAAD,CAAf;AACAG,IAAAA,QAAQ,GAAGH,MAAM,CAAC,CAAD,CAAjB;AACAC,IAAAA,UAAU,GAAGC,MAAM,IAAIH,IAAI,GAAG,CAA9B;;AACA,QAAIE,UAAJ,EAAgB;AACdC,MAAAA,MAAM,GAAGA,MAAM,CAACG,SAAP,CAAiB,CAAjB,EAAoBH,MAAM,CAACI,MAA3B,CAAT;AACD;AACF,GATD,MASO;AACLP,IAAAA,IAAI,GAAGZ,aAAa,CAACK,GAAD,CAAb,CAAmBe,OAAnB,CAA2B,IAA3B,EAAiC,EAAjC,CAAP;AACAP,IAAAA,MAAM,GAAGD,IAAI,GAAG,CAACA,IAAD,CAAH,GAAY,EAAzB;AACAG,IAAAA,MAAM,GAAGF,MAAM,CAAC,CAAD,CAAf;AACD;;AACD,MAAIA,MAAM,CAACM,MAAX,EAAmB;AACjB,WAAO,CAACL,UAAU,GAAG,GAAH,GAAS,EAApB,IAA0BC,MAAM,CAACK,OAAP,CAAe,IAAIC,MAAJ,CAAW,qBAAqBd,IAAI,CAACe,WAAL,IAAoB,CAAzC,IAA8C,OAAzD,EAAkE,GAAlE,CAAf,EAAwFf,IAAI,CAACgB,SAAL,IAAkB,GAA1G,CAA1B,IAA6IP,QAAQ,GAAI,MAAMA,QAAV,GAAsB,EAA3K,CAAP;AACD;;AACD,SAAOJ,IAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiBrB,OAAjB","sourcesContent":["var setupDefaults = require('./setupDefaults')\r\n\r\nvar round = require('./round')\r\nvar ceil = require('./ceil')\r\nvar floor = require('./floor')\r\n\r\nvar isNumber = require('./isNumber')\r\nvar toValueString = require('./toValueString')\r\nvar toFixed = require('./toFixed')\r\n\r\nvar toNumberString = require('./toNumberString')\r\nvar assign = require('./assign')\r\n\r\n/**\r\n  * 千分位分隔符、小数点\r\n  *\r\n  * @param {String/Number} num 数值\r\n  * @param {CommafyOptions} options 参数\r\n  * @return {String}\r\n */\r\nfunction commafy(num, options) {\r\n  var opts = assign({}, setupDefaults.commafyOptions, options)\r\n  var optDigits = opts.digits\r\n  var isNum = isNumber(num)\r\n  var rest, result, isNegative, intStr, floatStr\r\n  if (isNum) {\r\n    rest = (opts.ceil ? ceil : (opts.floor ? floor : round))(num, optDigits)\r\n    result = toNumberString(optDigits ? toFixed(rest, optDigits) : rest).split('.')\r\n    intStr = result[0]\r\n    floatStr = result[1]\r\n    isNegative = intStr && rest < 0\r\n    if (isNegative) {\r\n      intStr = intStr.substring(1, intStr.length)\r\n    }\r\n  } else {\r\n    rest = toValueString(num).replace(/,/g, '')\r\n    result = rest ? [rest] : []\r\n    intStr = result[0]\r\n  }\r\n  if (result.length) {\r\n    return (isNegative ? '-' : '') + intStr.replace(new RegExp('(?=(?!(\\\\b))(.{' + (opts.spaceNumber || 3) + '})+$)', 'g'), (opts.separator || ',')) + (floatStr ? ('.' + floatStr) : '')\r\n  }\r\n  return rest\r\n}\r\n\r\nmodule.exports = commafy\r\n"]},"metadata":{},"sourceType":"script"}