{"ast":null,"code":"var staticParseInt = require('./staticParseInt');\n\nvar helperGetUTCDateTime = require('./helperGetUTCDateTime');\n\nvar helperGetDateTime = require('./helperGetDateTime');\n\nvar isString = require('./isString');\n\nvar isDate = require('./isDate');\n\nfunction getParseRule(txt) {\n  return '(\\\\d{' + txt + '})';\n}\n\nfunction toParseMs(num) {\n  if (num < 10) {\n    return num * 100;\n  } else if (num < 100) {\n    return num * 10;\n  }\n\n  return num;\n}\n\nfunction toParseNum(num) {\n  return isNaN(num) ? num : staticParseInt(num);\n}\n\nvar d2 = getParseRule(2);\nvar d1or2 = getParseRule('1,2');\nvar d1or7 = getParseRule('1,7');\nvar d3or4 = getParseRule('3,4');\nvar place = '.{1}';\nvar d1Or2RE = place + d1or2;\nvar dzZ = '(([zZ])|([-+]\\\\d{2}:?\\\\d{2}))';\nvar defaulParseStrs = [d3or4, d1Or2RE, d1Or2RE, d1Or2RE, d1Or2RE, d1Or2RE, place + d1or7, dzZ];\nvar defaulParseREs = [];\n\nfor (var len = defaulParseStrs.length - 1; len >= 0; len--) {\n  var rule = '';\n\n  for (var i = 0; i < len + 1; i++) {\n    rule += defaulParseStrs[i];\n  }\n\n  defaulParseREs.push(new RegExp('^' + rule + '$'));\n}\n/**\r\n * 解析默认格式\r\n */\n\n\nfunction parseDefaultRules(str) {\n  var matchRest,\n      resMaps = {};\n\n  for (var i = 0, dfrLen = defaulParseREs.length; i < dfrLen; i++) {\n    matchRest = str.match(defaulParseREs[i]);\n\n    if (matchRest) {\n      resMaps.y = matchRest[1];\n      resMaps.M = matchRest[2];\n      resMaps.d = matchRest[3];\n      resMaps.H = matchRest[4];\n      resMaps.m = matchRest[5];\n      resMaps.s = matchRest[6];\n      resMaps.S = matchRest[7];\n      resMaps.Z = matchRest[8];\n      break;\n    }\n  }\n\n  return resMaps;\n}\n\nvar customParseStrs = [['yyyy', d3or4], ['yy', d2], ['MM', d2], ['M', d1or2], ['dd', d2], ['d', d1or2], ['HH', d2], ['H', d1or2], ['mm', d2], ['m', d1or2], ['ss', d2], ['s', d1or2], ['SSS', getParseRule(3)], ['S', d1or7], ['Z', dzZ]];\nvar parseRuleMaps = {};\nvar parseRuleKeys = ['\\\\[([^\\\\]]+)\\\\]'];\n\nfor (var i = 0; i < customParseStrs.length; i++) {\n  var itemRule = customParseStrs[i];\n  parseRuleMaps[itemRule[0]] = itemRule[1] + '?';\n  parseRuleKeys.push(itemRule[0]);\n}\n\nvar customParseRes = new RegExp(parseRuleKeys.join('|'), 'g');\nvar cacheFormatMaps = {};\n/**\r\n * 解析自定义格式\r\n */\n\nfunction parseCustomRules(str, format) {\n  var cacheItem = cacheFormatMaps[format];\n\n  if (!cacheItem) {\n    var posIndexs = [];\n    var re = format.replace(/([$(){}*+.?\\\\^|])/g, \"\\\\$1\").replace(customParseRes, function (text, val) {\n      var firstChar = text.charAt(0); // 如果为转义符号:[关键字]\n\n      if (firstChar === '[') {\n        return val;\n      }\n\n      posIndexs.push(firstChar);\n      return parseRuleMaps[text];\n    });\n    cacheItem = cacheFormatMaps[format] = {\n      _i: posIndexs,\n      _r: new RegExp(re)\n    };\n  }\n\n  var resMaps = {};\n  var matchRest = str.match(cacheItem._r);\n\n  if (matchRest) {\n    var _i = cacheItem._i;\n\n    for (var i = 1, len = matchRest.length; i < len; i++) {\n      resMaps[_i[i - 1]] = matchRest[i];\n    }\n\n    return resMaps;\n  }\n\n  return resMaps;\n}\n/**\r\n * 解析时区\r\n */\n\n\nfunction parseTimeZone(resMaps) {\n  // 如果为UTC 时间\n  if (/^[zZ]/.test(resMaps.Z)) {\n    return new Date(helperGetUTCDateTime(resMaps));\n  } else {\n    // 如果指定时区，时区转换\n    var matchRest = resMaps.Z.match(/([-+])(\\d{2}):?(\\d{2})/);\n\n    if (matchRest) {\n      return new Date(helperGetUTCDateTime(resMaps) - (matchRest[1] === '-' ? -1 : 1) * staticParseInt(matchRest[2]) * 3600000 + staticParseInt(matchRest[3]) * 60000);\n    }\n  }\n\n  return new Date('');\n}\n/**\r\n  * 字符串转为日期\r\n  *\r\n  * @param {String/Number/Date} str 日期或数字\r\n  * @param {String} format 解析日期格式(yyyy年份、MM月份、dd天、hh(12)HH(24)小时、mm分钟、ss秒、SSS毫秒、Z时区)\r\n  * @return {Date}\r\n  */\n\n\nfunction toStringDate(str, format) {\n  if (str) {\n    var isDType = isDate(str);\n\n    if (isDType || !format && /^[0-9]{11,15}$/.test(str)) {\n      return new Date(isDType ? helperGetDateTime(str) : staticParseInt(str));\n    }\n\n    if (isString(str)) {\n      var resMaps = format ? parseCustomRules(str, format) : parseDefaultRules(str);\n\n      if (resMaps.y) {\n        if (resMaps.M) {\n          resMaps.M = toParseNum(resMaps.M) - 1;\n        }\n\n        if (resMaps.S) {\n          // 如果7位则是微秒，只精确到3位毫秒\n          resMaps.S = toParseMs(toParseNum(resMaps.S.substring(0, 3)));\n        }\n\n        if (resMaps.Z) {\n          return parseTimeZone(resMaps);\n        } else {\n          return new Date(resMaps.y, resMaps.M || 0, resMaps.d || 1, resMaps.H || 0, resMaps.m || 0, resMaps.s || 0, resMaps.S || 0);\n        }\n      }\n    }\n  }\n\n  return new Date('');\n}\n\nmodule.exports = toStringDate;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/xe-utils/toStringDate.js"],"names":["staticParseInt","require","helperGetUTCDateTime","helperGetDateTime","isString","isDate","getParseRule","txt","toParseMs","num","toParseNum","isNaN","d2","d1or2","d1or7","d3or4","place","d1Or2RE","dzZ","defaulParseStrs","defaulParseREs","len","length","rule","i","push","RegExp","parseDefaultRules","str","matchRest","resMaps","dfrLen","match","y","M","d","H","m","s","S","Z","customParseStrs","parseRuleMaps","parseRuleKeys","itemRule","customParseRes","join","cacheFormatMaps","parseCustomRules","format","cacheItem","posIndexs","re","replace","text","val","firstChar","charAt","_i","_r","parseTimeZone","test","Date","toStringDate","isDType","substring","module","exports"],"mappings":"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","sourcesContent":["var staticParseInt = require('./staticParseInt')\r\n\r\nvar helperGetUTCDateTime = require('./helperGetUTCDateTime')\r\nvar helperGetDateTime = require('./helperGetDateTime')\r\n\r\nvar isString = require('./isString')\r\nvar isDate = require('./isDate')\r\n\r\nfunction getParseRule (txt) {\r\n  return '(\\\\d{' + txt + '})'\r\n}\r\n\r\nfunction toParseMs (num) {\r\n  if (num < 10) {\r\n    return num * 100\r\n  } else if (num < 100) {\r\n    return num * 10\r\n  }\r\n  return num\r\n}\r\n\r\nfunction toParseNum (num) {\r\n  return isNaN(num) ? num : staticParseInt(num)\r\n}\r\n\r\nvar d2 = getParseRule(2)\r\nvar d1or2 = getParseRule('1,2')\r\nvar d1or7 = getParseRule('1,7')\r\nvar d3or4 = getParseRule('3,4')\r\nvar place = '.{1}'\r\nvar d1Or2RE = place + d1or2\r\nvar dzZ = '(([zZ])|([-+]\\\\d{2}:?\\\\d{2}))'\r\n\r\nvar defaulParseStrs = [d3or4, d1Or2RE, d1Or2RE, d1Or2RE, d1Or2RE, d1Or2RE, place + d1or7, dzZ]\r\nvar defaulParseREs = []\r\n\r\nfor (var len = defaulParseStrs.length - 1; len >= 0; len--) {\r\n  var rule = ''\r\n  for (var i = 0; i < len + 1; i++) {\r\n    rule += defaulParseStrs[i]\r\n  }\r\n  defaulParseREs.push(new RegExp('^' + rule + '$'))\r\n}\r\n\r\n/**\r\n * 解析默认格式\r\n */\r\nfunction parseDefaultRules (str) {\r\n  var matchRest, resMaps = {}\r\n  for (var i = 0, dfrLen = defaulParseREs.length; i < dfrLen; i++) {\r\n    matchRest = str.match(defaulParseREs[i])\r\n    if (matchRest) {\r\n      resMaps.y = matchRest[1]\r\n      resMaps.M = matchRest[2]\r\n      resMaps.d = matchRest[3]\r\n      resMaps.H = matchRest[4]\r\n      resMaps.m = matchRest[5]\r\n      resMaps.s = matchRest[6]\r\n      resMaps.S = matchRest[7]\r\n      resMaps.Z = matchRest[8]\r\n      break\r\n    }\r\n  }\r\n  return resMaps\r\n}\r\n\r\nvar customParseStrs = [\r\n  ['yyyy', d3or4],\r\n  ['yy', d2],\r\n  ['MM', d2],\r\n  ['M', d1or2],\r\n  ['dd', d2],\r\n  ['d', d1or2],\r\n  ['HH', d2],\r\n  ['H', d1or2],\r\n  ['mm', d2],\r\n  ['m', d1or2],\r\n  ['ss', d2],\r\n  ['s', d1or2],\r\n  ['SSS', getParseRule(3)],\r\n  ['S', d1or7],\r\n  ['Z', dzZ]\r\n]\r\nvar parseRuleMaps = {}\r\nvar parseRuleKeys = ['\\\\[([^\\\\]]+)\\\\]']\r\n\r\nfor (var i = 0; i < customParseStrs.length; i++) {\r\n  var itemRule = customParseStrs[i]\r\n  parseRuleMaps[itemRule[0]] = itemRule[1] + '?'\r\n  parseRuleKeys.push(itemRule[0])\r\n}\r\n\r\nvar customParseRes = new RegExp(parseRuleKeys.join('|'), 'g')\r\nvar cacheFormatMaps = {}\r\n\r\n/**\r\n * 解析自定义格式\r\n */\r\nfunction parseCustomRules (str, format) {\r\n  var cacheItem = cacheFormatMaps[format]\r\n  if (!cacheItem) {\r\n    var posIndexs = []\r\n    var re = format.replace(/([$(){}*+.?\\\\^|])/g, \"\\\\$1\").replace(customParseRes, function (text, val) {\r\n      var firstChar = text.charAt(0)\r\n      // 如果为转义符号:[关键字]\r\n      if (firstChar === '[') {\r\n        return val\r\n      }\r\n      posIndexs.push(firstChar)\r\n      return parseRuleMaps[text]\r\n    })\r\n    cacheItem = cacheFormatMaps[format] = {\r\n      _i: posIndexs,\r\n      _r: new RegExp(re)\r\n    }\r\n  }\r\n  var resMaps = {}\r\n  var matchRest = str.match(cacheItem._r)\r\n  if (matchRest) {\r\n    var _i = cacheItem._i\r\n    for (var i = 1, len = matchRest.length; i < len; i++) {\r\n      resMaps[_i[i - 1]] = matchRest[i]\r\n    }\r\n    return resMaps\r\n  }\r\n  return resMaps\r\n}\r\n\r\n/**\r\n * 解析时区\r\n */\r\nfunction parseTimeZone (resMaps) {\r\n  // 如果为UTC 时间\r\n  if (/^[zZ]/.test(resMaps.Z)) {\r\n    return new Date(helperGetUTCDateTime(resMaps))\r\n  } else {\r\n    // 如果指定时区，时区转换\r\n    var matchRest = resMaps.Z.match(/([-+])(\\d{2}):?(\\d{2})/)\r\n    if (matchRest) {\r\n      return new Date(helperGetUTCDateTime(resMaps) - (matchRest[1] === '-' ? -1 : 1) * staticParseInt(matchRest[2]) * 3600000 + staticParseInt(matchRest[3]) * 60000)\r\n    }\r\n  }\r\n  return new Date('')\r\n}\r\n\r\n/**\r\n  * 字符串转为日期\r\n  *\r\n  * @param {String/Number/Date} str 日期或数字\r\n  * @param {String} format 解析日期格式(yyyy年份、MM月份、dd天、hh(12)HH(24)小时、mm分钟、ss秒、SSS毫秒、Z时区)\r\n  * @return {Date}\r\n  */\r\nfunction toStringDate (str, format) {\r\n  if (str) {\r\n    var isDType = isDate(str)\r\n    if (isDType || (!format && /^[0-9]{11,15}$/.test(str))) {\r\n      return new Date(isDType ? helperGetDateTime(str) : staticParseInt(str))\r\n    }\r\n    if (isString(str)) {\r\n      var resMaps = format ? parseCustomRules(str, format) : parseDefaultRules(str)\r\n      if (resMaps.y) {\r\n        if (resMaps.M) {\r\n          resMaps.M = toParseNum(resMaps.M) - 1\r\n        }\r\n        if (resMaps.S) {\r\n          // 如果7位则是微秒，只精确到3位毫秒\r\n          resMaps.S = toParseMs(toParseNum(resMaps.S.substring(0, 3)))\r\n        }\r\n        if (resMaps.Z) {\r\n          return parseTimeZone(resMaps)\r\n        } else {\r\n          return new Date(resMaps.y, resMaps.M || 0, resMaps.d || 1, resMaps.H || 0, resMaps.m || 0, resMaps.s || 0, resMaps.S || 0)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return new Date('')\r\n}\r\n\r\nmodule.exports = toStringDate\r\n"]},"metadata":{},"sourceType":"script"}