{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// https://github.com/substack/insert-css\nvar containers = []; // will store container HTMLElement references\n\nvar styleElements = []; // will store {prepend: HTMLElement, append: HTMLElement}\n\nvar usage = 'insert-css: You need to provide a CSS string. Usage: insertCss(cssString[, options]).';\n\nfunction createStyleElement() {\n  var styleElement = document.createElement('style');\n  styleElement.setAttribute('type', 'text/css');\n  return styleElement;\n} // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nfunction insertCss(css, options) {\n  options = options || {};\n\n  if (css === undefined) {\n    throw new Error(usage);\n  }\n\n  var position = options.prepend === true ? 'prepend' : 'append';\n  var container = options.container !== undefined ? options.container : document.querySelector('head');\n  var containerId = containers.indexOf(container); // first time we see this container, create the necessary entries\n\n  if (containerId === -1) {\n    containerId = containers.push(container) - 1;\n    styleElements[containerId] = {};\n  } // try to get the correponding container + position styleElement, create it otherwise\n\n\n  var styleElement;\n\n  if (styleElements[containerId] !== undefined && styleElements[containerId][position] !== undefined) {\n    styleElement = styleElements[containerId][position];\n  } else {\n    styleElement = styleElements[containerId][position] = createStyleElement();\n\n    if (position === 'prepend') {\n      container.insertBefore(styleElement, container.childNodes[0]);\n    } else {\n      container.appendChild(styleElement);\n    }\n  } // strip potential UTF-8 BOM if css was read from a file\n\n\n  if (css.charCodeAt(0) === 0xfeff) {\n    css = css.substr(1, css.length);\n  } // actually add the stylesheet\n\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText += css;\n  } else {\n    styleElement.textContent += css;\n  }\n\n  return styleElement;\n}\n\nexport default insertCss;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/node_modules/@ant-design/icons-vue/es/insert-css.js"],"names":["containers","styleElements","usage","createStyleElement","styleElement","document","createElement","setAttribute","insertCss","css","options","undefined","Error","position","prepend","container","querySelector","containerId","indexOf","push","insertBefore","childNodes","appendChild","charCodeAt","substr","length","styleSheet","cssText","textContent"],"mappings":";AAAA;AACA,IAAIA,UAAU,GAAG,EAAjB,C,CAAqB;;AAErB,IAAIC,aAAa,GAAG,EAApB,C,CAAwB;;AAExB,IAAIC,KAAK,GAAG,uFAAZ;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,MAAIC,YAAY,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAnB;AACAF,EAAAA,YAAY,CAACG,YAAb,CAA0B,MAA1B,EAAkC,UAAlC;AACA,SAAOH,YAAP;AACD,C,CAAC;;;AAGF,SAASI,SAAT,CAAmBC,GAAnB,EAAwBC,OAAxB,EAAiC;AAC/BA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,MAAID,GAAG,KAAKE,SAAZ,EAAuB;AACrB,UAAM,IAAIC,KAAJ,CAAUV,KAAV,CAAN;AACD;;AAED,MAAIW,QAAQ,GAAGH,OAAO,CAACI,OAAR,KAAoB,IAApB,GAA2B,SAA3B,GAAuC,QAAtD;AACA,MAAIC,SAAS,GAAGL,OAAO,CAACK,SAAR,KAAsBJ,SAAtB,GAAkCD,OAAO,CAACK,SAA1C,GAAsDV,QAAQ,CAACW,aAAT,CAAuB,MAAvB,CAAtE;AACA,MAAIC,WAAW,GAAGjB,UAAU,CAACkB,OAAX,CAAmBH,SAAnB,CAAlB,CAT+B,CASkB;;AAEjD,MAAIE,WAAW,KAAK,CAAC,CAArB,EAAwB;AACtBA,IAAAA,WAAW,GAAGjB,UAAU,CAACmB,IAAX,CAAgBJ,SAAhB,IAA6B,CAA3C;AACAd,IAAAA,aAAa,CAACgB,WAAD,CAAb,GAA6B,EAA7B;AACD,GAd8B,CAc7B;;;AAGF,MAAIb,YAAJ;;AAEA,MAAIH,aAAa,CAACgB,WAAD,CAAb,KAA+BN,SAA/B,IAA4CV,aAAa,CAACgB,WAAD,CAAb,CAA2BJ,QAA3B,MAAyCF,SAAzF,EAAoG;AAClGP,IAAAA,YAAY,GAAGH,aAAa,CAACgB,WAAD,CAAb,CAA2BJ,QAA3B,CAAf;AACD,GAFD,MAEO;AACLT,IAAAA,YAAY,GAAGH,aAAa,CAACgB,WAAD,CAAb,CAA2BJ,QAA3B,IAAuCV,kBAAkB,EAAxE;;AAEA,QAAIU,QAAQ,KAAK,SAAjB,EAA4B;AAC1BE,MAAAA,SAAS,CAACK,YAAV,CAAuBhB,YAAvB,EAAqCW,SAAS,CAACM,UAAV,CAAqB,CAArB,CAArC;AACD,KAFD,MAEO;AACLN,MAAAA,SAAS,CAACO,WAAV,CAAsBlB,YAAtB;AACD;AACF,GA7B8B,CA6B7B;;;AAGF,MAAIK,GAAG,CAACc,UAAJ,CAAe,CAAf,MAAsB,MAA1B,EAAkC;AAChCd,IAAAA,GAAG,GAAGA,GAAG,CAACe,MAAJ,CAAW,CAAX,EAAcf,GAAG,CAACgB,MAAlB,CAAN;AACD,GAlC8B,CAkC7B;;;AAGF,MAAIrB,YAAY,CAACsB,UAAjB,EAA6B;AAC3BtB,IAAAA,YAAY,CAACsB,UAAb,CAAwBC,OAAxB,IAAmClB,GAAnC;AACD,GAFD,MAEO;AACLL,IAAAA,YAAY,CAACwB,WAAb,IAA4BnB,GAA5B;AACD;;AAED,SAAOL,YAAP;AACD;;AAED,eAAeI,SAAf","sourcesContent":["// https://github.com/substack/insert-css\nvar containers = []; // will store container HTMLElement references\n\nvar styleElements = []; // will store {prepend: HTMLElement, append: HTMLElement}\n\nvar usage = 'insert-css: You need to provide a CSS string. Usage: insertCss(cssString[, options]).';\n\nfunction createStyleElement() {\n  var styleElement = document.createElement('style');\n  styleElement.setAttribute('type', 'text/css');\n  return styleElement;\n} // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nfunction insertCss(css, options) {\n  options = options || {};\n\n  if (css === undefined) {\n    throw new Error(usage);\n  }\n\n  var position = options.prepend === true ? 'prepend' : 'append';\n  var container = options.container !== undefined ? options.container : document.querySelector('head');\n  var containerId = containers.indexOf(container); // first time we see this container, create the necessary entries\n\n  if (containerId === -1) {\n    containerId = containers.push(container) - 1;\n    styleElements[containerId] = {};\n  } // try to get the correponding container + position styleElement, create it otherwise\n\n\n  var styleElement;\n\n  if (styleElements[containerId] !== undefined && styleElements[containerId][position] !== undefined) {\n    styleElement = styleElements[containerId][position];\n  } else {\n    styleElement = styleElements[containerId][position] = createStyleElement();\n\n    if (position === 'prepend') {\n      container.insertBefore(styleElement, container.childNodes[0]);\n    } else {\n      container.appendChild(styleElement);\n    }\n  } // strip potential UTF-8 BOM if css was read from a file\n\n\n  if (css.charCodeAt(0) === 0xfeff) {\n    css = css.substr(1, css.length);\n  } // actually add the stylesheet\n\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText += css;\n  } else {\n    styleElement.textContent += css;\n  }\n\n  return styleElement;\n}\n\nexport default insertCss;"]},"metadata":{},"sourceType":"module"}