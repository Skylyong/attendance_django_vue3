{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nimport PropTypes, { withUndefined } from '../../_util/vue-types';\nimport classNames from '../../_util/classNames';\nimport warning from 'warning';\nimport { hasProp, initDefaultProps, getOptionProps, getSlot } from '../../_util/props-util';\nimport { cloneElement } from '../../_util/vnode';\nimport BaseMixin from '../../_util/BaseMixin';\nimport { convertTreeToEntities, convertDataToTree, getPosition, getDragNodesKeys, parseCheckedKeys, conductExpandParent, calcSelectedKeys, calcDropPosition, arrAdd, arrDel, posToArr, mapChildren, conductCheck, warnOnlyTreeNode, getDataAndAria } from './util';\nimport { defineComponent } from 'vue';\n/**\n * Thought we still use `cloneElement` to pass `key`,\n * other props can pass with context for future refactor.\n */\n\nfunction getWatch() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var watch = {};\n  keys.forEach(function (k) {\n    watch[k] = {\n      handler: function handler() {\n        this.needSyncKeys[k] = true;\n      },\n      flush: 'sync'\n    };\n  });\n  return watch;\n}\n\nvar Tree = defineComponent({\n  name: 'Tree',\n  mixins: [BaseMixin],\n  provide: function provide() {\n    return {\n      vcTree: this\n    };\n  },\n  inheritAttrs: false,\n  props: initDefaultProps({\n    prefixCls: PropTypes.string,\n    tabindex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    children: PropTypes.any,\n    treeData: PropTypes.array,\n    showLine: PropTypes.looseBool,\n    showIcon: PropTypes.looseBool,\n    icon: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    focusable: PropTypes.looseBool,\n    selectable: PropTypes.looseBool,\n    disabled: PropTypes.looseBool,\n    multiple: PropTypes.looseBool,\n    checkable: withUndefined(PropTypes.oneOfType([PropTypes.object, PropTypes.looseBool])),\n    checkStrictly: PropTypes.looseBool,\n    draggable: PropTypes.looseBool,\n    defaultExpandParent: PropTypes.looseBool,\n    autoExpandParent: PropTypes.looseBool,\n    defaultExpandAll: PropTypes.looseBool,\n    defaultExpandedKeys: PropTypes.array,\n    expandedKeys: PropTypes.array,\n    defaultCheckedKeys: PropTypes.array,\n    checkedKeys: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n    defaultSelectedKeys: PropTypes.array,\n    selectedKeys: PropTypes.array,\n    // onClick: PropTypes.func,\n    // onDoubleClick: PropTypes.func,\n    // onExpand: PropTypes.func,\n    // onCheck: PropTypes.func,\n    // onSelect: PropTypes.func,\n    loadData: PropTypes.func,\n    loadedKeys: PropTypes.array,\n    // onMouseEnter: PropTypes.func,\n    // onMouseLeave: PropTypes.func,\n    // onRightClick: PropTypes.func,\n    // onDragStart: PropTypes.func,\n    // onDragEnter: PropTypes.func,\n    // onDragOver: PropTypes.func,\n    // onDragLeave: PropTypes.func,\n    // onDragEnd: PropTypes.func,\n    // onDrop: PropTypes.func,\n    filterTreeNode: PropTypes.func,\n    openTransitionName: PropTypes.string,\n    openAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    switcherIcon: PropTypes.any,\n    __propsSymbol__: PropTypes.any\n  }, {\n    prefixCls: 'rc-tree',\n    showLine: false,\n    showIcon: true,\n    selectable: true,\n    multiple: false,\n    checkable: false,\n    disabled: false,\n    checkStrictly: false,\n    draggable: false,\n    defaultExpandParent: true,\n    autoExpandParent: false,\n    defaultExpandAll: false,\n    defaultExpandedKeys: [],\n    defaultCheckedKeys: [],\n    defaultSelectedKeys: []\n  }),\n  data: function data() {\n    warning(this.$props.__propsSymbol__, 'must pass __propsSymbol__');\n    warning(this.$props.children, 'please use children prop replace slots.default');\n    this.needSyncKeys = {};\n    this.domTreeNodes = {};\n    var state = {\n      _posEntities: new Map(),\n      _keyEntities: new Map(),\n      _expandedKeys: [],\n      _selectedKeys: [],\n      _checkedKeys: [],\n      _halfCheckedKeys: [],\n      _loadedKeys: [],\n      _loadingKeys: [],\n      _treeNode: [],\n      _prevProps: null,\n      _dragOverNodeKey: '',\n      _dropPosition: null,\n      _dragNodesKeys: []\n    };\n    return _extends(_extends({}, state), this.getDerivedState(getOptionProps(this), state));\n  },\n  watch: _extends(_extends({}, getWatch(['treeData', 'children', 'expandedKeys', 'autoExpandParent', 'selectedKeys', 'checkedKeys', 'loadedKeys'])), {\n    __propsSymbol__: function __propsSymbol__() {\n      this.setState(this.getDerivedState(getOptionProps(this), this.$data));\n      this.needSyncKeys = {};\n    }\n  }),\n  methods: {\n    getDerivedState: function getDerivedState(props, prevState) {\n      var _prevProps = prevState._prevProps;\n      var newState = {\n        _prevProps: _extends({}, props)\n      };\n      var self = this;\n\n      function needSync(name) {\n        return !_prevProps && name in props || _prevProps && self.needSyncKeys[name];\n      } // ================== Tree Node ==================\n\n\n      var treeNode = null; // Check if `treeData` or `children` changed and save into the state.\n\n      if (needSync('treeData')) {\n        treeNode = convertDataToTree(props.treeData);\n      } else if (needSync('children')) {\n        treeNode = props.children;\n      } // Tree support filter function which will break the tree structure in the vdm.\n      // We cache the treeNodes in state so that we can return the treeNode in event trigger.\n\n\n      if (treeNode) {\n        newState._treeNode = treeNode; // Calculate the entities data for quick match\n\n        var entitiesMap = convertTreeToEntities(treeNode);\n        newState._keyEntities = entitiesMap.keyEntities;\n      }\n\n      var keyEntities = newState._keyEntities || prevState._keyEntities; // ================ expandedKeys =================\n\n      if (needSync('expandedKeys') || _prevProps && needSync('autoExpandParent')) {\n        newState._expandedKeys = props.autoExpandParent || !_prevProps && props.defaultExpandParent ? conductExpandParent(props.expandedKeys, keyEntities) : props.expandedKeys;\n      } else if (!_prevProps && props.defaultExpandAll) {\n        newState._expandedKeys = _toConsumableArray(keyEntities.keys());\n      } else if (!_prevProps && props.defaultExpandedKeys) {\n        newState._expandedKeys = props.autoExpandParent || props.defaultExpandParent ? conductExpandParent(props.defaultExpandedKeys, keyEntities) : props.defaultExpandedKeys;\n      } // ================ selectedKeys =================\n\n\n      if (props.selectable) {\n        if (needSync('selectedKeys')) {\n          newState._selectedKeys = calcSelectedKeys(props.selectedKeys, props);\n        } else if (!_prevProps && props.defaultSelectedKeys) {\n          newState._selectedKeys = calcSelectedKeys(props.defaultSelectedKeys, props);\n        }\n      } // ================= checkedKeys =================\n\n\n      if (props.checkable) {\n        var checkedKeyEntity;\n\n        if (needSync('checkedKeys')) {\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};\n        } else if (!_prevProps && props.defaultCheckedKeys) {\n          checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};\n        } else if (treeNode) {\n          // If treeNode changed, we also need check it\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {\n            checkedKeys: prevState._checkedKeys,\n            halfCheckedKeys: prevState._halfCheckedKeys\n          };\n        }\n\n        if (checkedKeyEntity) {\n          var _checkedKeyEntity = checkedKeyEntity,\n              _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys,\n              checkedKeys = _checkedKeyEntity$che === void 0 ? [] : _checkedKeyEntity$che,\n              _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys,\n              halfCheckedKeys = _checkedKeyEntity$hal === void 0 ? [] : _checkedKeyEntity$hal;\n\n          if (!props.checkStrictly) {\n            var conductKeys = conductCheck(checkedKeys, true, keyEntities);\n            checkedKeys = conductKeys.checkedKeys;\n            halfCheckedKeys = conductKeys.halfCheckedKeys;\n          }\n\n          newState._checkedKeys = checkedKeys;\n          newState._halfCheckedKeys = halfCheckedKeys;\n        }\n      } // ================= loadedKeys ==================\n\n\n      if (needSync('loadedKeys')) {\n        newState._loadedKeys = props.loadedKeys;\n      }\n\n      return newState;\n    },\n    onNodeDragStart: function onNodeDragStart(event, node) {\n      var _expandedKeys = this.$data._expandedKeys;\n      var eventKey = node.eventKey;\n      var children = getSlot(node);\n      this.dragNode = node;\n      this.setState({\n        _dragNodesKeys: getDragNodesKeys(typeof children === 'function' ? children() : children, node),\n        _expandedKeys: arrDel(_expandedKeys, eventKey)\n      });\n\n      this.__emit('dragstart', {\n        event: event,\n        node: node\n      });\n    },\n\n    /**\n     * [Legacy] Select handler is less small than node,\n     * so that this will trigger when drag enter node or select handler.\n     * This is a little tricky if customize css without padding.\n     * Better for use mouse move event to refresh drag state.\n     * But let's just keep it to avoid event trigger logic change.\n     */\n    onNodeDragEnter: function onNodeDragEnter(event, node) {\n      var _this = this;\n\n      var expandedKeys = this.$data._expandedKeys;\n      var pos = node.pos,\n          eventKey = node.eventKey;\n      if (!this.dragNode || !node.selectHandle) return;\n      var dropPosition = calcDropPosition(event, node); // Skip if drag node is self\n\n      if (this.dragNode.eventKey === eventKey && dropPosition === 0) {\n        this.setState({\n          _dragOverNodeKey: '',\n          _dropPosition: null\n        });\n        return;\n      } // Ref: https://github.com/react-component/tree/issues/132\n      // Add timeout to let onDragLevel fire before onDragEnter,\n      // so that we can clean drag props for onDragLeave node.\n      // Macro task for this:\n      // https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script\n\n\n      setTimeout(function () {\n        // Update drag over node\n        _this.setState({\n          _dragOverNodeKey: eventKey,\n          _dropPosition: dropPosition\n        }); // Side effect for delay drag\n\n\n        if (!_this.delayedDragEnterLogic) {\n          _this.delayedDragEnterLogic = {};\n        }\n\n        Object.keys(_this.delayedDragEnterLogic).forEach(function (key) {\n          clearTimeout(_this.delayedDragEnterLogic[key]);\n        });\n        _this.delayedDragEnterLogic[pos] = setTimeout(function () {\n          var newExpandedKeys = arrAdd(expandedKeys, eventKey);\n\n          if (!hasProp(_this, 'expandedKeys')) {\n            _this.setState({\n              _expandedKeys: newExpandedKeys\n            });\n          }\n\n          _this.__emit('dragenter', {\n            event: event,\n            node: node,\n            expandedKeys: newExpandedKeys\n          });\n        }, 400);\n      }, 0);\n    },\n    onNodeDragOver: function onNodeDragOver(event, node) {\n      var eventKey = node.eventKey;\n      var _this$$data = this.$data,\n          _dragOverNodeKey = _this$$data._dragOverNodeKey,\n          _dropPosition = _this$$data._dropPosition; // Update drag position\n\n      if (this.dragNode && eventKey === _dragOverNodeKey && node.selectHandle) {\n        var dropPosition = calcDropPosition(event, node);\n        if (dropPosition === _dropPosition) return;\n        this.setState({\n          _dropPosition: dropPosition\n        });\n      }\n\n      this.__emit('dragover', {\n        event: event,\n        node: node\n      });\n    },\n    onNodeDragLeave: function onNodeDragLeave(event, node) {\n      this.setState({\n        _dragOverNodeKey: ''\n      });\n\n      this.__emit('dragleave', {\n        event: event,\n        node: node\n      });\n    },\n    onNodeDragEnd: function onNodeDragEnd(event, node) {\n      this.setState({\n        _dragOverNodeKey: ''\n      });\n\n      this.__emit('dragend', {\n        event: event,\n        node: node\n      });\n\n      this.dragNode = null;\n    },\n    onNodeDrop: function onNodeDrop(event, node) {\n      var _this$$data2 = this.$data,\n          _this$$data2$_dragNod = _this$$data2._dragNodesKeys,\n          _dragNodesKeys = _this$$data2$_dragNod === void 0 ? [] : _this$$data2$_dragNod,\n          _dropPosition = _this$$data2._dropPosition;\n\n      var eventKey = node.eventKey,\n          pos = node.pos;\n      this.setState({\n        _dragOverNodeKey: ''\n      });\n\n      if (_dragNodesKeys.indexOf(eventKey) !== -1) {\n        warning(false, \"Can not drop to dragNode(include it's children node)\");\n        return;\n      }\n\n      var posArr = posToArr(pos);\n      var dropResult = {\n        event: event,\n        node: node,\n        dragNode: this.dragNode,\n        dragNodesKeys: _dragNodesKeys.slice(),\n        dropPosition: _dropPosition + Number(posArr[posArr.length - 1]),\n        dropToGap: false\n      };\n\n      if (_dropPosition !== 0) {\n        dropResult.dropToGap = true;\n      }\n\n      this.__emit('drop', dropResult);\n\n      this.dragNode = null;\n    },\n    onNodeClick: function onNodeClick(e, treeNode) {\n      this.__emit('click', e, treeNode);\n    },\n    onNodeDoubleClick: function onNodeDoubleClick(e, treeNode) {\n      this.__emit('dblclick', e, treeNode);\n    },\n    onNodeSelect: function onNodeSelect(e, treeNode) {\n      var selectedKeys = this.$data._selectedKeys;\n      var keyEntities = this.$data._keyEntities;\n      var multiple = this.$props.multiple;\n\n      var _getOptionProps = getOptionProps(treeNode),\n          selected = _getOptionProps.selected,\n          eventKey = _getOptionProps.eventKey;\n\n      var targetSelected = !selected; // Update selected keys\n\n      if (!targetSelected) {\n        selectedKeys = arrDel(selectedKeys, eventKey);\n      } else if (!multiple) {\n        selectedKeys = [eventKey];\n      } else {\n        selectedKeys = arrAdd(selectedKeys, eventKey);\n      } // [Legacy] Not found related usage in doc or upper libs\n\n\n      var selectedNodes = selectedKeys.map(function (key) {\n        var entity = keyEntities.get(key);\n        if (!entity) return null;\n        return entity.node;\n      }).filter(function (node) {\n        return node;\n      });\n      this.setUncontrolledState({\n        _selectedKeys: selectedKeys\n      });\n      var eventObj = {\n        event: 'select',\n        selected: targetSelected,\n        node: treeNode,\n        selectedNodes: selectedNodes,\n        nativeEvent: e\n      };\n\n      this.__emit('select', selectedKeys, eventObj);\n    },\n    onNodeCheck: function onNodeCheck(e, treeNode, checked) {\n      var _this$$data3 = this.$data,\n          keyEntities = _this$$data3._keyEntities,\n          oriCheckedKeys = _this$$data3._checkedKeys,\n          oriHalfCheckedKeys = _this$$data3._halfCheckedKeys;\n      var checkStrictly = this.$props.checkStrictly;\n\n      var _getOptionProps2 = getOptionProps(treeNode),\n          eventKey = _getOptionProps2.eventKey; // Prepare trigger arguments\n\n\n      var checkedObj;\n      var eventObj = {\n        event: 'check',\n        node: treeNode,\n        checked: checked,\n        nativeEvent: e\n      };\n\n      if (checkStrictly) {\n        var checkedKeys = checked ? arrAdd(oriCheckedKeys, eventKey) : arrDel(oriCheckedKeys, eventKey);\n        var halfCheckedKeys = arrDel(oriHalfCheckedKeys, eventKey);\n        checkedObj = {\n          checked: checkedKeys,\n          halfChecked: halfCheckedKeys\n        };\n        eventObj.checkedNodes = checkedKeys.map(function (key) {\n          return keyEntities.get(key);\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (entity) {\n          return entity.node;\n        });\n        this.setUncontrolledState({\n          _checkedKeys: checkedKeys\n        });\n      } else {\n        var _conductCheck = conductCheck([eventKey], checked, keyEntities, {\n          checkedKeys: oriCheckedKeys,\n          halfCheckedKeys: oriHalfCheckedKeys\n        }),\n            _checkedKeys = _conductCheck.checkedKeys,\n            _halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n        checkedObj = _checkedKeys; // [Legacy] This is used for `rc-tree-select`\n\n        eventObj.checkedNodes = [];\n        eventObj.checkedNodesPositions = [];\n        eventObj.halfCheckedKeys = _halfCheckedKeys;\n\n        _checkedKeys.forEach(function (key) {\n          var entity = keyEntities.get(key);\n          if (!entity) return;\n          var node = entity.node,\n              pos = entity.pos;\n          eventObj.checkedNodes.push(node);\n          eventObj.checkedNodesPositions.push({\n            node: node,\n            pos: pos\n          });\n        });\n\n        this.setUncontrolledState({\n          _checkedKeys: _checkedKeys,\n          _halfCheckedKeys: _halfCheckedKeys\n        });\n      }\n\n      this.__emit('check', checkedObj, eventObj);\n    },\n    onNodeLoad: function onNodeLoad(treeNode) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        // We need to get the latest state of loading/loaded keys\n        _this2.setState(function (_ref) {\n          var _ref$_loadedKeys = _ref._loadedKeys,\n              loadedKeys = _ref$_loadedKeys === void 0 ? [] : _ref$_loadedKeys,\n              _ref$_loadingKeys = _ref._loadingKeys,\n              loadingKeys = _ref$_loadingKeys === void 0 ? [] : _ref$_loadingKeys;\n          var loadData = _this2.$props.loadData;\n\n          var _getOptionProps3 = getOptionProps(treeNode),\n              eventKey = _getOptionProps3.eventKey;\n\n          if (!loadData || loadedKeys.indexOf(eventKey) !== -1 || loadingKeys.indexOf(eventKey) !== -1) {\n            return {};\n          } // Process load data\n\n\n          var promise = loadData(treeNode);\n          promise.then(function () {\n            var _this2$$data = _this2.$data,\n                currentLoadedKeys = _this2$$data._loadedKeys,\n                currentLoadingKeys = _this2$$data._loadingKeys;\n            var newLoadedKeys = arrAdd(currentLoadedKeys, eventKey);\n            var newLoadingKeys = arrDel(currentLoadingKeys, eventKey); // onLoad should trigger before internal setState to avoid `loadData` trigger twice.\n            // https://github.com/ant-design/ant-design/issues/12464\n\n            _this2.__emit('load', newLoadedKeys, {\n              event: 'load',\n              node: treeNode\n            });\n\n            _this2.setUncontrolledState({\n              _loadedKeys: newLoadedKeys\n            });\n\n            _this2.setState({\n              _loadingKeys: newLoadingKeys\n            });\n\n            resolve();\n          });\n          return {\n            _loadingKeys: arrAdd(loadingKeys, eventKey)\n          };\n        });\n      });\n    },\n    onNodeExpand: function onNodeExpand(e, treeNode) {\n      var _this3 = this;\n\n      var expandedKeys = this.$data._expandedKeys;\n      var loadData = this.$props.loadData;\n\n      var _getOptionProps4 = getOptionProps(treeNode),\n          eventKey = _getOptionProps4.eventKey,\n          expanded = _getOptionProps4.expanded; // Update selected keys\n\n\n      var index = expandedKeys.indexOf(eventKey);\n      var targetExpanded = !expanded;\n      warning(expanded && index !== -1 || !expanded && index === -1, 'Expand state not sync with index check');\n\n      if (targetExpanded) {\n        expandedKeys = arrAdd(expandedKeys, eventKey);\n      } else {\n        expandedKeys = arrDel(expandedKeys, eventKey);\n      }\n\n      this.setUncontrolledState({\n        _expandedKeys: expandedKeys\n      });\n\n      this.__emit('expand', expandedKeys, {\n        node: treeNode,\n        expanded: targetExpanded,\n        nativeEvent: e\n      }); // Async Load data\n\n\n      if (targetExpanded && loadData) {\n        var loadPromise = this.onNodeLoad(treeNode);\n        return loadPromise ? loadPromise.then(function () {\n          // [Legacy] Refresh logic\n          _this3.setUncontrolledState({\n            _expandedKeys: expandedKeys\n          });\n        }) : null;\n      }\n\n      return null;\n    },\n    onNodeMouseEnter: function onNodeMouseEnter(event, node) {\n      this.__emit('mouseenter', {\n        event: event,\n        node: node\n      });\n    },\n    onNodeMouseLeave: function onNodeMouseLeave(event, node) {\n      this.__emit('mouseleave', {\n        event: event,\n        node: node\n      });\n    },\n    onNodeContextMenu: function onNodeContextMenu(event, node) {\n      event.preventDefault();\n\n      this.__emit('rightClick', {\n        event: event,\n        node: node\n      });\n    },\n\n    /**\n     * Only update the value which is not in props\n     */\n    setUncontrolledState: function setUncontrolledState(state) {\n      var needSync = false;\n      var newState = {};\n      var props = getOptionProps(this);\n      Object.keys(state).forEach(function (name) {\n        if (name.replace('_', '') in props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        this.setState(newState);\n      }\n    },\n    registerTreeNode: function registerTreeNode(key, node) {\n      if (node) {\n        this.domTreeNodes[key] = node;\n      } else {\n        delete this.domTreeNodes[key];\n      }\n    },\n    isKeyChecked: function isKeyChecked(key) {\n      var _this$$data$_checkedK = this.$data._checkedKeys,\n          checkedKeys = _this$$data$_checkedK === void 0 ? [] : _this$$data$_checkedK;\n      return checkedKeys.indexOf(key) !== -1;\n    },\n\n    /**\n     * [Legacy] Original logic use `key` as tracking clue.\n     * We have to use `cloneElement` to pass `key`.\n     */\n    renderTreeNode: function renderTreeNode(child, index) {\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var _this$$data4 = this.$data,\n          keyEntities = _this$$data4._keyEntities,\n          _this$$data4$_expande = _this$$data4._expandedKeys,\n          expandedKeys = _this$$data4$_expande === void 0 ? [] : _this$$data4$_expande,\n          _this$$data4$_selecte = _this$$data4._selectedKeys,\n          selectedKeys = _this$$data4$_selecte === void 0 ? [] : _this$$data4$_selecte,\n          _this$$data4$_halfChe = _this$$data4._halfCheckedKeys,\n          halfCheckedKeys = _this$$data4$_halfChe === void 0 ? [] : _this$$data4$_halfChe,\n          _this$$data4$_loadedK = _this$$data4._loadedKeys,\n          loadedKeys = _this$$data4$_loadedK === void 0 ? [] : _this$$data4$_loadedK,\n          _this$$data4$_loading = _this$$data4._loadingKeys,\n          loadingKeys = _this$$data4$_loading === void 0 ? [] : _this$$data4$_loading,\n          dragOverNodeKey = _this$$data4._dragOverNodeKey,\n          dropPosition = _this$$data4._dropPosition;\n      var pos = getPosition(level, index);\n      var key = child.key;\n\n      if (!key && (key === undefined || key === null)) {\n        key = pos;\n      }\n\n      if (!keyEntities.get(key)) {\n        warnOnlyTreeNode();\n        return null;\n      }\n\n      return cloneElement(child, {\n        eventKey: key,\n        expanded: expandedKeys.indexOf(key) !== -1,\n        selected: selectedKeys.indexOf(key) !== -1,\n        loaded: loadedKeys.indexOf(key) !== -1,\n        loading: loadingKeys.indexOf(key) !== -1,\n        checked: this.isKeyChecked(key),\n        halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n        pos: pos,\n        // [Legacy] Drag props\n        dragOver: dragOverNodeKey === key && dropPosition === 0,\n        dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n        dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1,\n        key: key\n      });\n    }\n  },\n  render: function render() {\n    var _this4 = this;\n\n    var treeNode = this.$data._treeNode;\n    var _this$$props = this.$props,\n        prefixCls = _this$$props.prefixCls,\n        focusable = _this$$props.focusable,\n        showLine = _this$$props.showLine,\n        _this$$props$tabindex = _this$$props.tabindex,\n        tabindex = _this$$props$tabindex === void 0 ? 0 : _this$$props$tabindex;\n    var domProps = getDataAndAria(_extends(_extends({}, this.$props), this.$attrs));\n    var _this$$attrs = this.$attrs,\n        className = _this$$attrs.class,\n        style = _this$$attrs.style;\n    return _createVNode(\"ul\", _objectSpread(_objectSpread({}, domProps), {}, {\n      \"class\": classNames(prefixCls, className, _defineProperty({}, \"\".concat(prefixCls, \"-show-line\"), showLine)),\n      \"style\": style,\n      \"role\": \"tree\",\n      \"unselectable\": \"on\",\n      \"tabindex\": focusable ? tabindex : null\n    }), [mapChildren(treeNode, function (node, index) {\n      return _this4.renderTreeNode(node, index);\n    })]);\n  }\n});\nexport { Tree };\nexport default Tree;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/node_modules/ant-design-vue/es/vc-tree/src/Tree.js"],"names":["_objectSpread","_defineProperty","_toConsumableArray","_extends","createVNode","_createVNode","PropTypes","withUndefined","classNames","warning","hasProp","initDefaultProps","getOptionProps","getSlot","cloneElement","BaseMixin","convertTreeToEntities","convertDataToTree","getPosition","getDragNodesKeys","parseCheckedKeys","conductExpandParent","calcSelectedKeys","calcDropPosition","arrAdd","arrDel","posToArr","mapChildren","conductCheck","warnOnlyTreeNode","getDataAndAria","defineComponent","getWatch","keys","arguments","length","undefined","watch","forEach","k","handler","needSyncKeys","flush","Tree","name","mixins","provide","vcTree","inheritAttrs","props","prefixCls","string","tabindex","oneOfType","number","children","any","treeData","array","showLine","looseBool","showIcon","icon","object","func","focusable","selectable","disabled","multiple","checkable","checkStrictly","draggable","defaultExpandParent","autoExpandParent","defaultExpandAll","defaultExpandedKeys","expandedKeys","defaultCheckedKeys","checkedKeys","defaultSelectedKeys","selectedKeys","loadData","loadedKeys","filterTreeNode","openTransitionName","openAnimation","switcherIcon","__propsSymbol__","data","$props","domTreeNodes","state","_posEntities","Map","_keyEntities","_expandedKeys","_selectedKeys","_checkedKeys","_halfCheckedKeys","_loadedKeys","_loadingKeys","_treeNode","_prevProps","_dragOverNodeKey","_dropPosition","_dragNodesKeys","getDerivedState","setState","$data","methods","prevState","newState","self","needSync","treeNode","entitiesMap","keyEntities","checkedKeyEntity","halfCheckedKeys","_checkedKeyEntity","_checkedKeyEntity$che","_checkedKeyEntity$hal","conductKeys","onNodeDragStart","event","node","eventKey","dragNode","__emit","onNodeDragEnter","_this","pos","selectHandle","dropPosition","setTimeout","delayedDragEnterLogic","Object","key","clearTimeout","newExpandedKeys","onNodeDragOver","_this$$data","onNodeDragLeave","onNodeDragEnd","onNodeDrop","_this$$data2","_this$$data2$_dragNod","indexOf","posArr","dropResult","dragNodesKeys","slice","Number","dropToGap","onNodeClick","e","onNodeDoubleClick","onNodeSelect","_getOptionProps","selected","targetSelected","selectedNodes","map","entity","get","filter","setUncontrolledState","eventObj","nativeEvent","onNodeCheck","checked","_this$$data3","oriCheckedKeys","oriHalfCheckedKeys","_getOptionProps2","checkedObj","halfChecked","checkedNodes","_conductCheck","checkedNodesPositions","push","onNodeLoad","_this2","Promise","resolve","_ref","_ref$_loadedKeys","_ref$_loadingKeys","loadingKeys","_getOptionProps3","promise","then","_this2$$data","currentLoadedKeys","currentLoadingKeys","newLoadedKeys","newLoadingKeys","onNodeExpand","_this3","_getOptionProps4","expanded","index","targetExpanded","loadPromise","onNodeMouseEnter","onNodeMouseLeave","onNodeContextMenu","preventDefault","replace","registerTreeNode","isKeyChecked","_this$$data$_checkedK","renderTreeNode","child","level","_this$$data4","_this$$data4$_expande","_this$$data4$_selecte","_this$$data4$_halfChe","_this$$data4$_loadedK","_this$$data4$_loading","dragOverNodeKey","loaded","loading","dragOver","dragOverGapTop","dragOverGapBottom","render","_this4","_this$$props","_this$$props$tabindex","domProps","$attrs","_this$$attrs","className","class","style","concat"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nimport PropTypes, { withUndefined } from '../../_util/vue-types';\nimport classNames from '../../_util/classNames';\nimport warning from 'warning';\nimport { hasProp, initDefaultProps, getOptionProps, getSlot } from '../../_util/props-util';\nimport { cloneElement } from '../../_util/vnode';\nimport BaseMixin from '../../_util/BaseMixin';\nimport { convertTreeToEntities, convertDataToTree, getPosition, getDragNodesKeys, parseCheckedKeys, conductExpandParent, calcSelectedKeys, calcDropPosition, arrAdd, arrDel, posToArr, mapChildren, conductCheck, warnOnlyTreeNode, getDataAndAria } from './util';\nimport { defineComponent } from 'vue';\n/**\n * Thought we still use `cloneElement` to pass `key`,\n * other props can pass with context for future refactor.\n */\n\nfunction getWatch() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var watch = {};\n  keys.forEach(function (k) {\n    watch[k] = {\n      handler: function handler() {\n        this.needSyncKeys[k] = true;\n      },\n      flush: 'sync'\n    };\n  });\n  return watch;\n}\n\nvar Tree = defineComponent({\n  name: 'Tree',\n  mixins: [BaseMixin],\n  provide: function provide() {\n    return {\n      vcTree: this\n    };\n  },\n  inheritAttrs: false,\n  props: initDefaultProps({\n    prefixCls: PropTypes.string,\n    tabindex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    children: PropTypes.any,\n    treeData: PropTypes.array,\n    showLine: PropTypes.looseBool,\n    showIcon: PropTypes.looseBool,\n    icon: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    focusable: PropTypes.looseBool,\n    selectable: PropTypes.looseBool,\n    disabled: PropTypes.looseBool,\n    multiple: PropTypes.looseBool,\n    checkable: withUndefined(PropTypes.oneOfType([PropTypes.object, PropTypes.looseBool])),\n    checkStrictly: PropTypes.looseBool,\n    draggable: PropTypes.looseBool,\n    defaultExpandParent: PropTypes.looseBool,\n    autoExpandParent: PropTypes.looseBool,\n    defaultExpandAll: PropTypes.looseBool,\n    defaultExpandedKeys: PropTypes.array,\n    expandedKeys: PropTypes.array,\n    defaultCheckedKeys: PropTypes.array,\n    checkedKeys: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n    defaultSelectedKeys: PropTypes.array,\n    selectedKeys: PropTypes.array,\n    // onClick: PropTypes.func,\n    // onDoubleClick: PropTypes.func,\n    // onExpand: PropTypes.func,\n    // onCheck: PropTypes.func,\n    // onSelect: PropTypes.func,\n    loadData: PropTypes.func,\n    loadedKeys: PropTypes.array,\n    // onMouseEnter: PropTypes.func,\n    // onMouseLeave: PropTypes.func,\n    // onRightClick: PropTypes.func,\n    // onDragStart: PropTypes.func,\n    // onDragEnter: PropTypes.func,\n    // onDragOver: PropTypes.func,\n    // onDragLeave: PropTypes.func,\n    // onDragEnd: PropTypes.func,\n    // onDrop: PropTypes.func,\n    filterTreeNode: PropTypes.func,\n    openTransitionName: PropTypes.string,\n    openAnimation: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    switcherIcon: PropTypes.any,\n    __propsSymbol__: PropTypes.any\n  }, {\n    prefixCls: 'rc-tree',\n    showLine: false,\n    showIcon: true,\n    selectable: true,\n    multiple: false,\n    checkable: false,\n    disabled: false,\n    checkStrictly: false,\n    draggable: false,\n    defaultExpandParent: true,\n    autoExpandParent: false,\n    defaultExpandAll: false,\n    defaultExpandedKeys: [],\n    defaultCheckedKeys: [],\n    defaultSelectedKeys: []\n  }),\n  data: function data() {\n    warning(this.$props.__propsSymbol__, 'must pass __propsSymbol__');\n    warning(this.$props.children, 'please use children prop replace slots.default');\n    this.needSyncKeys = {};\n    this.domTreeNodes = {};\n    var state = {\n      _posEntities: new Map(),\n      _keyEntities: new Map(),\n      _expandedKeys: [],\n      _selectedKeys: [],\n      _checkedKeys: [],\n      _halfCheckedKeys: [],\n      _loadedKeys: [],\n      _loadingKeys: [],\n      _treeNode: [],\n      _prevProps: null,\n      _dragOverNodeKey: '',\n      _dropPosition: null,\n      _dragNodesKeys: []\n    };\n    return _extends(_extends({}, state), this.getDerivedState(getOptionProps(this), state));\n  },\n  watch: _extends(_extends({}, getWatch(['treeData', 'children', 'expandedKeys', 'autoExpandParent', 'selectedKeys', 'checkedKeys', 'loadedKeys'])), {\n    __propsSymbol__: function __propsSymbol__() {\n      this.setState(this.getDerivedState(getOptionProps(this), this.$data));\n      this.needSyncKeys = {};\n    }\n  }),\n  methods: {\n    getDerivedState: function getDerivedState(props, prevState) {\n      var _prevProps = prevState._prevProps;\n      var newState = {\n        _prevProps: _extends({}, props)\n      };\n      var self = this;\n\n      function needSync(name) {\n        return !_prevProps && name in props || _prevProps && self.needSyncKeys[name];\n      } // ================== Tree Node ==================\n\n\n      var treeNode = null; // Check if `treeData` or `children` changed and save into the state.\n\n      if (needSync('treeData')) {\n        treeNode = convertDataToTree(props.treeData);\n      } else if (needSync('children')) {\n        treeNode = props.children;\n      } // Tree support filter function which will break the tree structure in the vdm.\n      // We cache the treeNodes in state so that we can return the treeNode in event trigger.\n\n\n      if (treeNode) {\n        newState._treeNode = treeNode; // Calculate the entities data for quick match\n\n        var entitiesMap = convertTreeToEntities(treeNode);\n        newState._keyEntities = entitiesMap.keyEntities;\n      }\n\n      var keyEntities = newState._keyEntities || prevState._keyEntities; // ================ expandedKeys =================\n\n      if (needSync('expandedKeys') || _prevProps && needSync('autoExpandParent')) {\n        newState._expandedKeys = props.autoExpandParent || !_prevProps && props.defaultExpandParent ? conductExpandParent(props.expandedKeys, keyEntities) : props.expandedKeys;\n      } else if (!_prevProps && props.defaultExpandAll) {\n        newState._expandedKeys = _toConsumableArray(keyEntities.keys());\n      } else if (!_prevProps && props.defaultExpandedKeys) {\n        newState._expandedKeys = props.autoExpandParent || props.defaultExpandParent ? conductExpandParent(props.defaultExpandedKeys, keyEntities) : props.defaultExpandedKeys;\n      } // ================ selectedKeys =================\n\n\n      if (props.selectable) {\n        if (needSync('selectedKeys')) {\n          newState._selectedKeys = calcSelectedKeys(props.selectedKeys, props);\n        } else if (!_prevProps && props.defaultSelectedKeys) {\n          newState._selectedKeys = calcSelectedKeys(props.defaultSelectedKeys, props);\n        }\n      } // ================= checkedKeys =================\n\n\n      if (props.checkable) {\n        var checkedKeyEntity;\n\n        if (needSync('checkedKeys')) {\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {};\n        } else if (!_prevProps && props.defaultCheckedKeys) {\n          checkedKeyEntity = parseCheckedKeys(props.defaultCheckedKeys) || {};\n        } else if (treeNode) {\n          // If treeNode changed, we also need check it\n          checkedKeyEntity = parseCheckedKeys(props.checkedKeys) || {\n            checkedKeys: prevState._checkedKeys,\n            halfCheckedKeys: prevState._halfCheckedKeys\n          };\n        }\n\n        if (checkedKeyEntity) {\n          var _checkedKeyEntity = checkedKeyEntity,\n              _checkedKeyEntity$che = _checkedKeyEntity.checkedKeys,\n              checkedKeys = _checkedKeyEntity$che === void 0 ? [] : _checkedKeyEntity$che,\n              _checkedKeyEntity$hal = _checkedKeyEntity.halfCheckedKeys,\n              halfCheckedKeys = _checkedKeyEntity$hal === void 0 ? [] : _checkedKeyEntity$hal;\n\n          if (!props.checkStrictly) {\n            var conductKeys = conductCheck(checkedKeys, true, keyEntities);\n            checkedKeys = conductKeys.checkedKeys;\n            halfCheckedKeys = conductKeys.halfCheckedKeys;\n          }\n\n          newState._checkedKeys = checkedKeys;\n          newState._halfCheckedKeys = halfCheckedKeys;\n        }\n      } // ================= loadedKeys ==================\n\n\n      if (needSync('loadedKeys')) {\n        newState._loadedKeys = props.loadedKeys;\n      }\n\n      return newState;\n    },\n    onNodeDragStart: function onNodeDragStart(event, node) {\n      var _expandedKeys = this.$data._expandedKeys;\n      var eventKey = node.eventKey;\n      var children = getSlot(node);\n      this.dragNode = node;\n      this.setState({\n        _dragNodesKeys: getDragNodesKeys(typeof children === 'function' ? children() : children, node),\n        _expandedKeys: arrDel(_expandedKeys, eventKey)\n      });\n\n      this.__emit('dragstart', {\n        event: event,\n        node: node\n      });\n    },\n\n    /**\n     * [Legacy] Select handler is less small than node,\n     * so that this will trigger when drag enter node or select handler.\n     * This is a little tricky if customize css without padding.\n     * Better for use mouse move event to refresh drag state.\n     * But let's just keep it to avoid event trigger logic change.\n     */\n    onNodeDragEnter: function onNodeDragEnter(event, node) {\n      var _this = this;\n\n      var expandedKeys = this.$data._expandedKeys;\n      var pos = node.pos,\n          eventKey = node.eventKey;\n      if (!this.dragNode || !node.selectHandle) return;\n      var dropPosition = calcDropPosition(event, node); // Skip if drag node is self\n\n      if (this.dragNode.eventKey === eventKey && dropPosition === 0) {\n        this.setState({\n          _dragOverNodeKey: '',\n          _dropPosition: null\n        });\n        return;\n      } // Ref: https://github.com/react-component/tree/issues/132\n      // Add timeout to let onDragLevel fire before onDragEnter,\n      // so that we can clean drag props for onDragLeave node.\n      // Macro task for this:\n      // https://html.spec.whatwg.org/multipage/webappapis.html#clean-up-after-running-script\n\n\n      setTimeout(function () {\n        // Update drag over node\n        _this.setState({\n          _dragOverNodeKey: eventKey,\n          _dropPosition: dropPosition\n        }); // Side effect for delay drag\n\n\n        if (!_this.delayedDragEnterLogic) {\n          _this.delayedDragEnterLogic = {};\n        }\n\n        Object.keys(_this.delayedDragEnterLogic).forEach(function (key) {\n          clearTimeout(_this.delayedDragEnterLogic[key]);\n        });\n        _this.delayedDragEnterLogic[pos] = setTimeout(function () {\n          var newExpandedKeys = arrAdd(expandedKeys, eventKey);\n\n          if (!hasProp(_this, 'expandedKeys')) {\n            _this.setState({\n              _expandedKeys: newExpandedKeys\n            });\n          }\n\n          _this.__emit('dragenter', {\n            event: event,\n            node: node,\n            expandedKeys: newExpandedKeys\n          });\n        }, 400);\n      }, 0);\n    },\n    onNodeDragOver: function onNodeDragOver(event, node) {\n      var eventKey = node.eventKey;\n      var _this$$data = this.$data,\n          _dragOverNodeKey = _this$$data._dragOverNodeKey,\n          _dropPosition = _this$$data._dropPosition; // Update drag position\n\n      if (this.dragNode && eventKey === _dragOverNodeKey && node.selectHandle) {\n        var dropPosition = calcDropPosition(event, node);\n        if (dropPosition === _dropPosition) return;\n        this.setState({\n          _dropPosition: dropPosition\n        });\n      }\n\n      this.__emit('dragover', {\n        event: event,\n        node: node\n      });\n    },\n    onNodeDragLeave: function onNodeDragLeave(event, node) {\n      this.setState({\n        _dragOverNodeKey: ''\n      });\n\n      this.__emit('dragleave', {\n        event: event,\n        node: node\n      });\n    },\n    onNodeDragEnd: function onNodeDragEnd(event, node) {\n      this.setState({\n        _dragOverNodeKey: ''\n      });\n\n      this.__emit('dragend', {\n        event: event,\n        node: node\n      });\n\n      this.dragNode = null;\n    },\n    onNodeDrop: function onNodeDrop(event, node) {\n      var _this$$data2 = this.$data,\n          _this$$data2$_dragNod = _this$$data2._dragNodesKeys,\n          _dragNodesKeys = _this$$data2$_dragNod === void 0 ? [] : _this$$data2$_dragNod,\n          _dropPosition = _this$$data2._dropPosition;\n\n      var eventKey = node.eventKey,\n          pos = node.pos;\n      this.setState({\n        _dragOverNodeKey: ''\n      });\n\n      if (_dragNodesKeys.indexOf(eventKey) !== -1) {\n        warning(false, \"Can not drop to dragNode(include it's children node)\");\n        return;\n      }\n\n      var posArr = posToArr(pos);\n      var dropResult = {\n        event: event,\n        node: node,\n        dragNode: this.dragNode,\n        dragNodesKeys: _dragNodesKeys.slice(),\n        dropPosition: _dropPosition + Number(posArr[posArr.length - 1]),\n        dropToGap: false\n      };\n\n      if (_dropPosition !== 0) {\n        dropResult.dropToGap = true;\n      }\n\n      this.__emit('drop', dropResult);\n\n      this.dragNode = null;\n    },\n    onNodeClick: function onNodeClick(e, treeNode) {\n      this.__emit('click', e, treeNode);\n    },\n    onNodeDoubleClick: function onNodeDoubleClick(e, treeNode) {\n      this.__emit('dblclick', e, treeNode);\n    },\n    onNodeSelect: function onNodeSelect(e, treeNode) {\n      var selectedKeys = this.$data._selectedKeys;\n      var keyEntities = this.$data._keyEntities;\n      var multiple = this.$props.multiple;\n\n      var _getOptionProps = getOptionProps(treeNode),\n          selected = _getOptionProps.selected,\n          eventKey = _getOptionProps.eventKey;\n\n      var targetSelected = !selected; // Update selected keys\n\n      if (!targetSelected) {\n        selectedKeys = arrDel(selectedKeys, eventKey);\n      } else if (!multiple) {\n        selectedKeys = [eventKey];\n      } else {\n        selectedKeys = arrAdd(selectedKeys, eventKey);\n      } // [Legacy] Not found related usage in doc or upper libs\n\n\n      var selectedNodes = selectedKeys.map(function (key) {\n        var entity = keyEntities.get(key);\n        if (!entity) return null;\n        return entity.node;\n      }).filter(function (node) {\n        return node;\n      });\n      this.setUncontrolledState({\n        _selectedKeys: selectedKeys\n      });\n      var eventObj = {\n        event: 'select',\n        selected: targetSelected,\n        node: treeNode,\n        selectedNodes: selectedNodes,\n        nativeEvent: e\n      };\n\n      this.__emit('select', selectedKeys, eventObj);\n    },\n    onNodeCheck: function onNodeCheck(e, treeNode, checked) {\n      var _this$$data3 = this.$data,\n          keyEntities = _this$$data3._keyEntities,\n          oriCheckedKeys = _this$$data3._checkedKeys,\n          oriHalfCheckedKeys = _this$$data3._halfCheckedKeys;\n      var checkStrictly = this.$props.checkStrictly;\n\n      var _getOptionProps2 = getOptionProps(treeNode),\n          eventKey = _getOptionProps2.eventKey; // Prepare trigger arguments\n\n\n      var checkedObj;\n      var eventObj = {\n        event: 'check',\n        node: treeNode,\n        checked: checked,\n        nativeEvent: e\n      };\n\n      if (checkStrictly) {\n        var checkedKeys = checked ? arrAdd(oriCheckedKeys, eventKey) : arrDel(oriCheckedKeys, eventKey);\n        var halfCheckedKeys = arrDel(oriHalfCheckedKeys, eventKey);\n        checkedObj = {\n          checked: checkedKeys,\n          halfChecked: halfCheckedKeys\n        };\n        eventObj.checkedNodes = checkedKeys.map(function (key) {\n          return keyEntities.get(key);\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (entity) {\n          return entity.node;\n        });\n        this.setUncontrolledState({\n          _checkedKeys: checkedKeys\n        });\n      } else {\n        var _conductCheck = conductCheck([eventKey], checked, keyEntities, {\n          checkedKeys: oriCheckedKeys,\n          halfCheckedKeys: oriHalfCheckedKeys\n        }),\n            _checkedKeys = _conductCheck.checkedKeys,\n            _halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n        checkedObj = _checkedKeys; // [Legacy] This is used for `rc-tree-select`\n\n        eventObj.checkedNodes = [];\n        eventObj.checkedNodesPositions = [];\n        eventObj.halfCheckedKeys = _halfCheckedKeys;\n\n        _checkedKeys.forEach(function (key) {\n          var entity = keyEntities.get(key);\n          if (!entity) return;\n          var node = entity.node,\n              pos = entity.pos;\n          eventObj.checkedNodes.push(node);\n          eventObj.checkedNodesPositions.push({\n            node: node,\n            pos: pos\n          });\n        });\n\n        this.setUncontrolledState({\n          _checkedKeys: _checkedKeys,\n          _halfCheckedKeys: _halfCheckedKeys\n        });\n      }\n\n      this.__emit('check', checkedObj, eventObj);\n    },\n    onNodeLoad: function onNodeLoad(treeNode) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        // We need to get the latest state of loading/loaded keys\n        _this2.setState(function (_ref) {\n          var _ref$_loadedKeys = _ref._loadedKeys,\n              loadedKeys = _ref$_loadedKeys === void 0 ? [] : _ref$_loadedKeys,\n              _ref$_loadingKeys = _ref._loadingKeys,\n              loadingKeys = _ref$_loadingKeys === void 0 ? [] : _ref$_loadingKeys;\n          var loadData = _this2.$props.loadData;\n\n          var _getOptionProps3 = getOptionProps(treeNode),\n              eventKey = _getOptionProps3.eventKey;\n\n          if (!loadData || loadedKeys.indexOf(eventKey) !== -1 || loadingKeys.indexOf(eventKey) !== -1) {\n            return {};\n          } // Process load data\n\n\n          var promise = loadData(treeNode);\n          promise.then(function () {\n            var _this2$$data = _this2.$data,\n                currentLoadedKeys = _this2$$data._loadedKeys,\n                currentLoadingKeys = _this2$$data._loadingKeys;\n            var newLoadedKeys = arrAdd(currentLoadedKeys, eventKey);\n            var newLoadingKeys = arrDel(currentLoadingKeys, eventKey); // onLoad should trigger before internal setState to avoid `loadData` trigger twice.\n            // https://github.com/ant-design/ant-design/issues/12464\n\n            _this2.__emit('load', newLoadedKeys, {\n              event: 'load',\n              node: treeNode\n            });\n\n            _this2.setUncontrolledState({\n              _loadedKeys: newLoadedKeys\n            });\n\n            _this2.setState({\n              _loadingKeys: newLoadingKeys\n            });\n\n            resolve();\n          });\n          return {\n            _loadingKeys: arrAdd(loadingKeys, eventKey)\n          };\n        });\n      });\n    },\n    onNodeExpand: function onNodeExpand(e, treeNode) {\n      var _this3 = this;\n\n      var expandedKeys = this.$data._expandedKeys;\n      var loadData = this.$props.loadData;\n\n      var _getOptionProps4 = getOptionProps(treeNode),\n          eventKey = _getOptionProps4.eventKey,\n          expanded = _getOptionProps4.expanded; // Update selected keys\n\n\n      var index = expandedKeys.indexOf(eventKey);\n      var targetExpanded = !expanded;\n      warning(expanded && index !== -1 || !expanded && index === -1, 'Expand state not sync with index check');\n\n      if (targetExpanded) {\n        expandedKeys = arrAdd(expandedKeys, eventKey);\n      } else {\n        expandedKeys = arrDel(expandedKeys, eventKey);\n      }\n\n      this.setUncontrolledState({\n        _expandedKeys: expandedKeys\n      });\n\n      this.__emit('expand', expandedKeys, {\n        node: treeNode,\n        expanded: targetExpanded,\n        nativeEvent: e\n      }); // Async Load data\n\n\n      if (targetExpanded && loadData) {\n        var loadPromise = this.onNodeLoad(treeNode);\n        return loadPromise ? loadPromise.then(function () {\n          // [Legacy] Refresh logic\n          _this3.setUncontrolledState({\n            _expandedKeys: expandedKeys\n          });\n        }) : null;\n      }\n\n      return null;\n    },\n    onNodeMouseEnter: function onNodeMouseEnter(event, node) {\n      this.__emit('mouseenter', {\n        event: event,\n        node: node\n      });\n    },\n    onNodeMouseLeave: function onNodeMouseLeave(event, node) {\n      this.__emit('mouseleave', {\n        event: event,\n        node: node\n      });\n    },\n    onNodeContextMenu: function onNodeContextMenu(event, node) {\n      event.preventDefault();\n\n      this.__emit('rightClick', {\n        event: event,\n        node: node\n      });\n    },\n\n    /**\n     * Only update the value which is not in props\n     */\n    setUncontrolledState: function setUncontrolledState(state) {\n      var needSync = false;\n      var newState = {};\n      var props = getOptionProps(this);\n      Object.keys(state).forEach(function (name) {\n        if (name.replace('_', '') in props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        this.setState(newState);\n      }\n    },\n    registerTreeNode: function registerTreeNode(key, node) {\n      if (node) {\n        this.domTreeNodes[key] = node;\n      } else {\n        delete this.domTreeNodes[key];\n      }\n    },\n    isKeyChecked: function isKeyChecked(key) {\n      var _this$$data$_checkedK = this.$data._checkedKeys,\n          checkedKeys = _this$$data$_checkedK === void 0 ? [] : _this$$data$_checkedK;\n      return checkedKeys.indexOf(key) !== -1;\n    },\n\n    /**\n     * [Legacy] Original logic use `key` as tracking clue.\n     * We have to use `cloneElement` to pass `key`.\n     */\n    renderTreeNode: function renderTreeNode(child, index) {\n      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var _this$$data4 = this.$data,\n          keyEntities = _this$$data4._keyEntities,\n          _this$$data4$_expande = _this$$data4._expandedKeys,\n          expandedKeys = _this$$data4$_expande === void 0 ? [] : _this$$data4$_expande,\n          _this$$data4$_selecte = _this$$data4._selectedKeys,\n          selectedKeys = _this$$data4$_selecte === void 0 ? [] : _this$$data4$_selecte,\n          _this$$data4$_halfChe = _this$$data4._halfCheckedKeys,\n          halfCheckedKeys = _this$$data4$_halfChe === void 0 ? [] : _this$$data4$_halfChe,\n          _this$$data4$_loadedK = _this$$data4._loadedKeys,\n          loadedKeys = _this$$data4$_loadedK === void 0 ? [] : _this$$data4$_loadedK,\n          _this$$data4$_loading = _this$$data4._loadingKeys,\n          loadingKeys = _this$$data4$_loading === void 0 ? [] : _this$$data4$_loading,\n          dragOverNodeKey = _this$$data4._dragOverNodeKey,\n          dropPosition = _this$$data4._dropPosition;\n      var pos = getPosition(level, index);\n      var key = child.key;\n\n      if (!key && (key === undefined || key === null)) {\n        key = pos;\n      }\n\n      if (!keyEntities.get(key)) {\n        warnOnlyTreeNode();\n        return null;\n      }\n\n      return cloneElement(child, {\n        eventKey: key,\n        expanded: expandedKeys.indexOf(key) !== -1,\n        selected: selectedKeys.indexOf(key) !== -1,\n        loaded: loadedKeys.indexOf(key) !== -1,\n        loading: loadingKeys.indexOf(key) !== -1,\n        checked: this.isKeyChecked(key),\n        halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n        pos: pos,\n        // [Legacy] Drag props\n        dragOver: dragOverNodeKey === key && dropPosition === 0,\n        dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n        dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1,\n        key: key\n      });\n    }\n  },\n  render: function render() {\n    var _this4 = this;\n\n    var treeNode = this.$data._treeNode;\n    var _this$$props = this.$props,\n        prefixCls = _this$$props.prefixCls,\n        focusable = _this$$props.focusable,\n        showLine = _this$$props.showLine,\n        _this$$props$tabindex = _this$$props.tabindex,\n        tabindex = _this$$props$tabindex === void 0 ? 0 : _this$$props$tabindex;\n    var domProps = getDataAndAria(_extends(_extends({}, this.$props), this.$attrs));\n    var _this$$attrs = this.$attrs,\n        className = _this$$attrs.class,\n        style = _this$$attrs.style;\n    return _createVNode(\"ul\", _objectSpread(_objectSpread({}, domProps), {}, {\n      \"class\": classNames(prefixCls, className, _defineProperty({}, \"\".concat(prefixCls, \"-show-line\"), showLine)),\n      \"style\": style,\n      \"role\": \"tree\",\n      \"unselectable\": \"on\",\n      \"tabindex\": focusable ? tabindex : null\n    }), [mapChildren(treeNode, function (node, index) {\n      return _this4.renderTreeNode(node, index);\n    })]);\n  }\n});\nexport { Tree };\nexport default Tree;"]},"metadata":{},"sourceType":"module"}