{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { createVNode as _createVNode } from \"vue\";\nimport { inject } from 'vue';\nimport PropTypes from '../../_util/vue-types';\nimport { INTERNAL_COL_DEFINE } from './utils';\nimport ResizeObserver from '../../vc-resize-observer';\nexport default {\n  name: 'ColGroup',\n  inheritAttrs: false,\n  props: {\n    fixed: PropTypes.string,\n    columns: PropTypes.array\n  },\n  setup: function setup() {\n    return {\n      table: inject('table', {}),\n      store: inject('table-store', function () {\n        return {};\n      })\n    };\n  },\n  render: function render() {\n    var fixed = this.fixed,\n        table = this.table;\n    var prefixCls = table.prefixCls,\n        expandIconAsCell = table.expandIconAsCell,\n        onColumnResize = table.onColumnResize;\n    var cols = [];\n\n    if (expandIconAsCell && fixed !== 'right') {\n      cols.push(_createVNode(\"col\", {\n        \"class\": \"\".concat(prefixCls, \"-expand-icon-col\"),\n        \"key\": \"rc-table-expand-icon-col\"\n      }, null));\n    }\n\n    var leafColumns;\n    var columnManager = this.store.columnManager;\n\n    if (fixed === 'left') {\n      leafColumns = columnManager.leftLeafColumns;\n    } else if (fixed === 'right') {\n      leafColumns = columnManager.rightLeafColumns;\n    } else {\n      leafColumns = columnManager.leafColumns;\n    }\n\n    cols = cols.concat(leafColumns.map(function (_ref) {\n      var key = _ref.key,\n          dataIndex = _ref.dataIndex,\n          width = _ref.width,\n          additionalProps = _ref[INTERNAL_COL_DEFINE];\n      var mergedKey = key !== undefined ? key : dataIndex;\n      var w = typeof width === 'number' ? \"\".concat(width, \"px\") : width;\n      return _createVNode(ResizeObserver, {\n        \"onResize\": function onResize(_ref2) {\n          var offsetWidth = _ref2.offsetWidth;\n          onColumnResize(mergedKey, offsetWidth);\n        }\n      }, {\n        default: function _default() {\n          return [_createVNode(\"col\", _objectSpread({\n            \"data-key\": mergedKey,\n            \"key\": mergedKey,\n            \"style\": {\n              width: w,\n              minWidth: w\n            }\n          }, additionalProps), null)];\n        }\n      });\n    }));\n    return _createVNode(\"colgroup\", null, [cols]);\n  }\n};","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/node_modules/ant-design-vue/es/vc-table/src/ColGroup.js"],"names":["_objectSpread","createVNode","_createVNode","inject","PropTypes","INTERNAL_COL_DEFINE","ResizeObserver","name","inheritAttrs","props","fixed","string","columns","array","setup","table","store","render","prefixCls","expandIconAsCell","onColumnResize","cols","push","concat","leafColumns","columnManager","leftLeafColumns","rightLeafColumns","map","_ref","key","dataIndex","width","additionalProps","mergedKey","undefined","w","onResize","_ref2","offsetWidth","default","_default","minWidth"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,0CAA1B;AACA,SAASC,WAAW,IAAIC,YAAxB,QAA4C,KAA5C;AACA,SAASC,MAAT,QAAuB,KAAvB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,SAASC,mBAAT,QAAoC,SAApC;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,eAAe;AACbC,EAAAA,IAAI,EAAE,UADO;AAEbC,EAAAA,YAAY,EAAE,KAFD;AAGbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAEN,SAAS,CAACO,MADZ;AAELC,IAAAA,OAAO,EAAER,SAAS,CAACS;AAFd,GAHM;AAObC,EAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,WAAO;AACLC,MAAAA,KAAK,EAAEZ,MAAM,CAAC,OAAD,EAAU,EAAV,CADR;AAELa,MAAAA,KAAK,EAAEb,MAAM,CAAC,aAAD,EAAgB,YAAY;AACvC,eAAO,EAAP;AACD,OAFY;AAFR,KAAP;AAMD,GAdY;AAebc,EAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,QAAIP,KAAK,GAAG,KAAKA,KAAjB;AAAA,QACIK,KAAK,GAAG,KAAKA,KADjB;AAEA,QAAIG,SAAS,GAAGH,KAAK,CAACG,SAAtB;AAAA,QACIC,gBAAgB,GAAGJ,KAAK,CAACI,gBAD7B;AAAA,QAEIC,cAAc,GAAGL,KAAK,CAACK,cAF3B;AAGA,QAAIC,IAAI,GAAG,EAAX;;AAEA,QAAIF,gBAAgB,IAAIT,KAAK,KAAK,OAAlC,EAA2C;AACzCW,MAAAA,IAAI,CAACC,IAAL,CAAUpB,YAAY,CAAC,KAAD,EAAQ;AAC5B,iBAAS,GAAGqB,MAAH,CAAUL,SAAV,EAAqB,kBAArB,CADmB;AAE5B,eAAO;AAFqB,OAAR,EAGnB,IAHmB,CAAtB;AAID;;AAED,QAAIM,WAAJ;AACA,QAAIC,aAAa,GAAG,KAAKT,KAAL,CAAWS,aAA/B;;AAEA,QAAIf,KAAK,KAAK,MAAd,EAAsB;AACpBc,MAAAA,WAAW,GAAGC,aAAa,CAACC,eAA5B;AACD,KAFD,MAEO,IAAIhB,KAAK,KAAK,OAAd,EAAuB;AAC5Bc,MAAAA,WAAW,GAAGC,aAAa,CAACE,gBAA5B;AACD,KAFM,MAEA;AACLH,MAAAA,WAAW,GAAGC,aAAa,CAACD,WAA5B;AACD;;AAEDH,IAAAA,IAAI,GAAGA,IAAI,CAACE,MAAL,CAAYC,WAAW,CAACI,GAAZ,CAAgB,UAAUC,IAAV,EAAgB;AACjD,UAAIC,GAAG,GAAGD,IAAI,CAACC,GAAf;AAAA,UACIC,SAAS,GAAGF,IAAI,CAACE,SADrB;AAAA,UAEIC,KAAK,GAAGH,IAAI,CAACG,KAFjB;AAAA,UAGIC,eAAe,GAAGJ,IAAI,CAACxB,mBAAD,CAH1B;AAIA,UAAI6B,SAAS,GAAGJ,GAAG,KAAKK,SAAR,GAAoBL,GAApB,GAA0BC,SAA1C;AACA,UAAIK,CAAC,GAAG,OAAOJ,KAAP,KAAiB,QAAjB,GAA4B,GAAGT,MAAH,CAAUS,KAAV,EAAiB,IAAjB,CAA5B,GAAqDA,KAA7D;AACA,aAAO9B,YAAY,CAACI,cAAD,EAAiB;AAClC,oBAAY,SAAS+B,QAAT,CAAkBC,KAAlB,EAAyB;AACnC,cAAIC,WAAW,GAAGD,KAAK,CAACC,WAAxB;AACAnB,UAAAA,cAAc,CAACc,SAAD,EAAYK,WAAZ,CAAd;AACD;AAJiC,OAAjB,EAKhB;AACDC,QAAAA,OAAO,EAAE,SAASC,QAAT,GAAoB;AAC3B,iBAAO,CAACvC,YAAY,CAAC,KAAD,EAAQF,aAAa,CAAC;AACxC,wBAAYkC,SAD4B;AAExC,mBAAOA,SAFiC;AAGxC,qBAAS;AACPF,cAAAA,KAAK,EAAEI,CADA;AAEPM,cAAAA,QAAQ,EAAEN;AAFH;AAH+B,WAAD,EAOtCH,eAPsC,CAArB,EAOC,IAPD,CAAb,CAAP;AAQD;AAVA,OALgB,CAAnB;AAiBD,KAxBkB,CAAZ,CAAP;AAyBA,WAAO/B,YAAY,CAAC,UAAD,EAAa,IAAb,EAAmB,CAACmB,IAAD,CAAnB,CAAnB;AACD;AAnEY,CAAf","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { createVNode as _createVNode } from \"vue\";\nimport { inject } from 'vue';\nimport PropTypes from '../../_util/vue-types';\nimport { INTERNAL_COL_DEFINE } from './utils';\nimport ResizeObserver from '../../vc-resize-observer';\nexport default {\n  name: 'ColGroup',\n  inheritAttrs: false,\n  props: {\n    fixed: PropTypes.string,\n    columns: PropTypes.array\n  },\n  setup: function setup() {\n    return {\n      table: inject('table', {}),\n      store: inject('table-store', function () {\n        return {};\n      })\n    };\n  },\n  render: function render() {\n    var fixed = this.fixed,\n        table = this.table;\n    var prefixCls = table.prefixCls,\n        expandIconAsCell = table.expandIconAsCell,\n        onColumnResize = table.onColumnResize;\n    var cols = [];\n\n    if (expandIconAsCell && fixed !== 'right') {\n      cols.push(_createVNode(\"col\", {\n        \"class\": \"\".concat(prefixCls, \"-expand-icon-col\"),\n        \"key\": \"rc-table-expand-icon-col\"\n      }, null));\n    }\n\n    var leafColumns;\n    var columnManager = this.store.columnManager;\n\n    if (fixed === 'left') {\n      leafColumns = columnManager.leftLeafColumns;\n    } else if (fixed === 'right') {\n      leafColumns = columnManager.rightLeafColumns;\n    } else {\n      leafColumns = columnManager.leafColumns;\n    }\n\n    cols = cols.concat(leafColumns.map(function (_ref) {\n      var key = _ref.key,\n          dataIndex = _ref.dataIndex,\n          width = _ref.width,\n          additionalProps = _ref[INTERNAL_COL_DEFINE];\n      var mergedKey = key !== undefined ? key : dataIndex;\n      var w = typeof width === 'number' ? \"\".concat(width, \"px\") : width;\n      return _createVNode(ResizeObserver, {\n        \"onResize\": function onResize(_ref2) {\n          var offsetWidth = _ref2.offsetWidth;\n          onColumnResize(mergedKey, offsetWidth);\n        }\n      }, {\n        default: function _default() {\n          return [_createVNode(\"col\", _objectSpread({\n            \"data-key\": mergedKey,\n            \"key\": mergedKey,\n            \"style\": {\n              width: w,\n              minWidth: w\n            }\n          }, additionalProps), null)];\n        }\n      });\n    }));\n    return _createVNode(\"colgroup\", null, [cols]);\n  }\n};"]},"metadata":{},"sourceType":"module"}