{"ast":null,"code":"import { defineComponent, h, ref, computed, nextTick, watch, reactive } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { getFuncText } from '../../tools/utils';\nimport { useSize } from '../../hooks/size';\nvar autoTxtElem;\nexport default defineComponent({\n  name: 'VxeTextarea',\n  props: {\n    modelValue: [String, Number],\n    className: String,\n    immediate: {\n      type: Boolean,\n      default: true\n    },\n    name: String,\n    readonly: Boolean,\n    disabled: Boolean,\n    placeholder: String,\n    maxlength: [String, Number],\n    rows: {\n      type: [String, Number],\n      default: 2\n    },\n    cols: {\n      type: [String, Number],\n      default: null\n    },\n    showWordCount: Boolean,\n    countMethod: Function,\n    autosize: [Boolean, Object],\n    form: String,\n    resize: {\n      type: String,\n      default: function () {\n        return GlobalConfig.textarea.resize;\n      }\n    },\n    size: {\n      type: String,\n      default: function () {\n        return GlobalConfig.textarea.size || GlobalConfig.size;\n      }\n    }\n  },\n  emits: ['update:modelValue', 'input', 'keydown', 'keyup', 'click', 'change', 'focus', 'blur'],\n  setup: function (props, context) {\n    var emit = context.emit;\n    var xID = XEUtils.uniqueId();\n    var computeSize = useSize(props);\n    var reactData = reactive({\n      inputValue: props.modelValue\n    });\n    var refElem = ref();\n    var refTextarea = ref();\n    var refMaps = {\n      refElem: refElem,\n      refTextarea: refTextarea\n    };\n    var $xetextarea = {\n      xID: xID,\n      props: props,\n      context: context,\n      reactData: reactData,\n      getRefMaps: function () {\n        return refMaps;\n      }\n    };\n    var textareaMethods = {};\n    var computeInputCount = computed(function () {\n      return XEUtils.getSize(reactData.inputValue);\n    });\n    var computeIsCountError = computed(function () {\n      var inputCount = computeInputCount.value;\n      return props.maxlength && inputCount > XEUtils.toNumber(props.maxlength);\n    });\n    var computeSizeOpts = computed(function () {\n      return Object.assign({\n        minRows: 1,\n        maxRows: 10\n      }, GlobalConfig.textarea.autosize, props.autosize);\n    });\n\n    var updateAutoTxt = function () {\n      var size = props.size,\n          autosize = props.autosize;\n      var inputValue = reactData.inputValue;\n\n      if (autosize) {\n        if (!autoTxtElem) {\n          autoTxtElem = document.createElement('div');\n        }\n\n        if (!autoTxtElem.parentNode) {\n          document.body.appendChild(autoTxtElem);\n        }\n\n        var textElem = refTextarea.value;\n        var textStyle = getComputedStyle(textElem);\n        autoTxtElem.className = ['vxe-textarea--autosize', size ? \"size--\" + size : ''].join(' ');\n        autoTxtElem.style.width = textElem.clientWidth + \"px\";\n        autoTxtElem.style.padding = textStyle.padding;\n        autoTxtElem.innerHTML = ('' + (inputValue || '　')).replace(/\\n$/, '\\n　');\n      }\n    };\n\n    var handleResize = function () {\n      if (props.autosize) {\n        nextTick(function () {\n          var sizeOpts = computeSizeOpts.value;\n          var minRows = sizeOpts.minRows,\n              maxRows = sizeOpts.maxRows;\n          var textElem = refTextarea.value;\n          var sizeHeight = autoTxtElem.clientHeight;\n          var textStyle = getComputedStyle(textElem);\n          var lineHeight = XEUtils.toNumber(textStyle.lineHeight);\n          var paddingTop = XEUtils.toNumber(textStyle.paddingTop);\n          var paddingBottom = XEUtils.toNumber(textStyle.paddingBottom);\n          var borderTopWidth = XEUtils.toNumber(textStyle.borderTopWidth);\n          var borderBottomWidth = XEUtils.toNumber(textStyle.borderBottomWidth);\n          var intervalHeight = paddingTop + paddingBottom + borderTopWidth + borderBottomWidth;\n          var rowNum = (sizeHeight - intervalHeight) / lineHeight;\n          var textRows = rowNum && /[0-9]/.test('' + rowNum) ? rowNum : Math.floor(rowNum) + 1;\n          var vaildRows = textRows;\n\n          if (textRows < minRows) {\n            vaildRows = minRows;\n          } else if (textRows > maxRows) {\n            vaildRows = maxRows;\n          }\n\n          textElem.style.height = vaildRows * lineHeight + intervalHeight + \"px\";\n        });\n      }\n    };\n\n    var triggerEvent = function (evnt) {\n      var value = reactData.inputValue;\n      $xetextarea.dispatchEvent(evnt.type, {\n        value: value\n      }, evnt);\n    };\n\n    var emitUpdate = function (value, evnt) {\n      reactData.inputValue = value;\n      emit('update:modelValue', value);\n\n      if (XEUtils.toValueString(props.modelValue) !== value) {\n        textareaMethods.dispatchEvent('change', {\n          value: value\n        }, evnt);\n      }\n    };\n\n    var inputEvent = function (evnt) {\n      var immediate = props.immediate;\n      var textElem = evnt.target;\n      var value = textElem.value;\n      reactData.inputValue = value;\n\n      if (immediate) {\n        emitUpdate(value, evnt);\n      }\n\n      $xetextarea.dispatchEvent('input', {\n        value: value\n      }, evnt);\n      handleResize();\n    };\n\n    var changeEvent = function (evnt) {\n      var immediate = props.immediate;\n\n      if (immediate) {\n        triggerEvent(evnt);\n      } else {\n        emitUpdate(reactData.inputValue, evnt);\n      }\n    };\n\n    var blurEvent = function (evnt) {\n      var immediate = props.immediate;\n      var inputValue = reactData.inputValue;\n\n      if (!immediate) {\n        emitUpdate(inputValue, evnt);\n      }\n\n      $xetextarea.dispatchEvent('blur', {\n        value: inputValue\n      }, evnt);\n    };\n\n    textareaMethods = {\n      dispatchEvent: function (type, params, evnt) {\n        emit(type, Object.assign({\n          $textarea: $xetextarea,\n          $event: evnt\n        }, params));\n      },\n      focus: function () {\n        var textElem = refTextarea.value;\n        textElem.focus();\n        return nextTick();\n      },\n      blur: function () {\n        var textElem = refTextarea.value;\n        textElem.blur();\n        return nextTick();\n      }\n    };\n    Object.assign($xetextarea, textareaMethods);\n    watch(function () {\n      return props.modelValue;\n    }, function (val) {\n      reactData.inputValue = val;\n      updateAutoTxt();\n    });\n    nextTick(function () {\n      var autosize = props.autosize;\n\n      if (autosize) {\n        updateAutoTxt();\n        handleResize();\n      }\n    });\n\n    var renderVN = function () {\n      var _a;\n\n      var className = props.className,\n          resize = props.resize,\n          placeholder = props.placeholder,\n          disabled = props.disabled,\n          maxlength = props.maxlength,\n          autosize = props.autosize,\n          showWordCount = props.showWordCount,\n          countMethod = props.countMethod,\n          rows = props.rows,\n          cols = props.cols;\n      var inputValue = reactData.inputValue;\n      var vSize = computeSize.value;\n      var isCountError = computeIsCountError.value;\n      var inputCount = computeInputCount.value;\n      return h('div', {\n        ref: refElem,\n        class: ['vxe-textarea', className, (_a = {}, _a[\"size--\" + vSize] = vSize, _a['is--autosize'] = autosize, _a['is--disabled'] = disabled, _a['def--rows'] = !XEUtils.eqNull(rows), _a['def--cols'] = !XEUtils.eqNull(cols), _a)]\n      }, [h('textarea', {\n        ref: refTextarea,\n        class: 'vxe-textarea--inner',\n        value: inputValue,\n        name: props.name,\n        placeholder: placeholder ? getFuncText(placeholder) : null,\n        maxlength: maxlength,\n        readonly: props.readonly,\n        disabled: disabled,\n        rows: rows,\n        cols: cols,\n        style: resize ? {\n          resize: resize\n        } : null,\n        onInput: inputEvent,\n        onChange: changeEvent,\n        onKeydown: triggerEvent,\n        onKeyup: triggerEvent,\n        onClick: triggerEvent,\n        onFocus: triggerEvent,\n        onBlur: blurEvent\n      }), showWordCount ? h('span', {\n        class: ['vxe-textarea--count', {\n          'is--error': isCountError\n        }]\n      }, countMethod ? \"\" + countMethod({\n        value: inputValue\n      }) : \"\" + inputCount + (maxlength ? \"/\" + maxlength : '')) : null]);\n    };\n\n    $xetextarea.renderVN = renderVN;\n    return $xetextarea;\n  },\n  render: function () {\n    return this.renderVN();\n  }\n});","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vxe-table/es/textarea/src/textarea.js"],"names":["defineComponent","h","ref","computed","nextTick","watch","reactive","XEUtils","GlobalConfig","getFuncText","useSize","autoTxtElem","name","props","modelValue","String","Number","className","immediate","type","Boolean","default","readonly","disabled","placeholder","maxlength","rows","cols","showWordCount","countMethod","Function","autosize","Object","form","resize","textarea","size","emits","setup","context","emit","xID","uniqueId","computeSize","reactData","inputValue","refElem","refTextarea","refMaps","$xetextarea","getRefMaps","textareaMethods","computeInputCount","getSize","computeIsCountError","inputCount","value","toNumber","computeSizeOpts","assign","minRows","maxRows","updateAutoTxt","document","createElement","parentNode","body","appendChild","textElem","textStyle","getComputedStyle","join","style","width","clientWidth","padding","innerHTML","replace","handleResize","sizeOpts","sizeHeight","clientHeight","lineHeight","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","intervalHeight","rowNum","textRows","test","Math","floor","vaildRows","height","triggerEvent","evnt","dispatchEvent","emitUpdate","toValueString","inputEvent","target","changeEvent","blurEvent","params","$textarea","$event","focus","blur","val","renderVN","_a","vSize","isCountError","class","eqNull","onInput","onChange","onKeydown","onKeyup","onClick","onFocus","onBlur","render"],"mappings":"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","sourcesContent":["import { defineComponent, h, ref, computed, nextTick, watch, reactive } from 'vue';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { getFuncText } from '../../tools/utils';\nimport { useSize } from '../../hooks/size';\nvar autoTxtElem;\nexport default defineComponent({\n    name: 'VxeTextarea',\n    props: {\n        modelValue: [String, Number],\n        className: String,\n        immediate: { type: Boolean, default: true },\n        name: String,\n        readonly: Boolean,\n        disabled: Boolean,\n        placeholder: String,\n        maxlength: [String, Number],\n        rows: { type: [String, Number], default: 2 },\n        cols: { type: [String, Number], default: null },\n        showWordCount: Boolean,\n        countMethod: Function,\n        autosize: [Boolean, Object],\n        form: String,\n        resize: { type: String, default: function () { return GlobalConfig.textarea.resize; } },\n        size: { type: String, default: function () { return GlobalConfig.textarea.size || GlobalConfig.size; } }\n    },\n    emits: [\n        'update:modelValue',\n        'input',\n        'keydown',\n        'keyup',\n        'click',\n        'change',\n        'focus',\n        'blur'\n    ],\n    setup: function (props, context) {\n        var emit = context.emit;\n        var xID = XEUtils.uniqueId();\n        var computeSize = useSize(props);\n        var reactData = reactive({\n            inputValue: props.modelValue\n        });\n        var refElem = ref();\n        var refTextarea = ref();\n        var refMaps = {\n            refElem: refElem,\n            refTextarea: refTextarea\n        };\n        var $xetextarea = {\n            xID: xID,\n            props: props,\n            context: context,\n            reactData: reactData,\n            getRefMaps: function () { return refMaps; }\n        };\n        var textareaMethods = {};\n        var computeInputCount = computed(function () {\n            return XEUtils.getSize(reactData.inputValue);\n        });\n        var computeIsCountError = computed(function () {\n            var inputCount = computeInputCount.value;\n            return props.maxlength && inputCount > XEUtils.toNumber(props.maxlength);\n        });\n        var computeSizeOpts = computed(function () {\n            return Object.assign({ minRows: 1, maxRows: 10 }, GlobalConfig.textarea.autosize, props.autosize);\n        });\n        var updateAutoTxt = function () {\n            var size = props.size, autosize = props.autosize;\n            var inputValue = reactData.inputValue;\n            if (autosize) {\n                if (!autoTxtElem) {\n                    autoTxtElem = document.createElement('div');\n                }\n                if (!autoTxtElem.parentNode) {\n                    document.body.appendChild(autoTxtElem);\n                }\n                var textElem = refTextarea.value;\n                var textStyle = getComputedStyle(textElem);\n                autoTxtElem.className = ['vxe-textarea--autosize', size ? \"size--\" + size : ''].join(' ');\n                autoTxtElem.style.width = textElem.clientWidth + \"px\";\n                autoTxtElem.style.padding = textStyle.padding;\n                autoTxtElem.innerHTML = ('' + (inputValue || '　')).replace(/\\n$/, '\\n　');\n            }\n        };\n        var handleResize = function () {\n            if (props.autosize) {\n                nextTick(function () {\n                    var sizeOpts = computeSizeOpts.value;\n                    var minRows = sizeOpts.minRows, maxRows = sizeOpts.maxRows;\n                    var textElem = refTextarea.value;\n                    var sizeHeight = autoTxtElem.clientHeight;\n                    var textStyle = getComputedStyle(textElem);\n                    var lineHeight = XEUtils.toNumber(textStyle.lineHeight);\n                    var paddingTop = XEUtils.toNumber(textStyle.paddingTop);\n                    var paddingBottom = XEUtils.toNumber(textStyle.paddingBottom);\n                    var borderTopWidth = XEUtils.toNumber(textStyle.borderTopWidth);\n                    var borderBottomWidth = XEUtils.toNumber(textStyle.borderBottomWidth);\n                    var intervalHeight = paddingTop + paddingBottom + borderTopWidth + borderBottomWidth;\n                    var rowNum = (sizeHeight - intervalHeight) / lineHeight;\n                    var textRows = rowNum && /[0-9]/.test('' + rowNum) ? rowNum : Math.floor(rowNum) + 1;\n                    var vaildRows = textRows;\n                    if (textRows < minRows) {\n                        vaildRows = minRows;\n                    }\n                    else if (textRows > maxRows) {\n                        vaildRows = maxRows;\n                    }\n                    textElem.style.height = (vaildRows * lineHeight) + intervalHeight + \"px\";\n                });\n            }\n        };\n        var triggerEvent = function (evnt) {\n            var value = reactData.inputValue;\n            $xetextarea.dispatchEvent(evnt.type, { value: value }, evnt);\n        };\n        var emitUpdate = function (value, evnt) {\n            reactData.inputValue = value;\n            emit('update:modelValue', value);\n            if (XEUtils.toValueString(props.modelValue) !== value) {\n                textareaMethods.dispatchEvent('change', { value: value }, evnt);\n            }\n        };\n        var inputEvent = function (evnt) {\n            var immediate = props.immediate;\n            var textElem = evnt.target;\n            var value = textElem.value;\n            reactData.inputValue = value;\n            if (immediate) {\n                emitUpdate(value, evnt);\n            }\n            $xetextarea.dispatchEvent('input', { value: value }, evnt);\n            handleResize();\n        };\n        var changeEvent = function (evnt) {\n            var immediate = props.immediate;\n            if (immediate) {\n                triggerEvent(evnt);\n            }\n            else {\n                emitUpdate(reactData.inputValue, evnt);\n            }\n        };\n        var blurEvent = function (evnt) {\n            var immediate = props.immediate;\n            var inputValue = reactData.inputValue;\n            if (!immediate) {\n                emitUpdate(inputValue, evnt);\n            }\n            $xetextarea.dispatchEvent('blur', { value: inputValue }, evnt);\n        };\n        textareaMethods = {\n            dispatchEvent: function (type, params, evnt) {\n                emit(type, Object.assign({ $textarea: $xetextarea, $event: evnt }, params));\n            },\n            focus: function () {\n                var textElem = refTextarea.value;\n                textElem.focus();\n                return nextTick();\n            },\n            blur: function () {\n                var textElem = refTextarea.value;\n                textElem.blur();\n                return nextTick();\n            }\n        };\n        Object.assign($xetextarea, textareaMethods);\n        watch(function () { return props.modelValue; }, function (val) {\n            reactData.inputValue = val;\n            updateAutoTxt();\n        });\n        nextTick(function () {\n            var autosize = props.autosize;\n            if (autosize) {\n                updateAutoTxt();\n                handleResize();\n            }\n        });\n        var renderVN = function () {\n            var _a;\n            var className = props.className, resize = props.resize, placeholder = props.placeholder, disabled = props.disabled, maxlength = props.maxlength, autosize = props.autosize, showWordCount = props.showWordCount, countMethod = props.countMethod, rows = props.rows, cols = props.cols;\n            var inputValue = reactData.inputValue;\n            var vSize = computeSize.value;\n            var isCountError = computeIsCountError.value;\n            var inputCount = computeInputCount.value;\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-textarea', className, (_a = {},\n                        _a[\"size--\" + vSize] = vSize,\n                        _a['is--autosize'] = autosize,\n                        _a['is--disabled'] = disabled,\n                        _a['def--rows'] = !XEUtils.eqNull(rows),\n                        _a['def--cols'] = !XEUtils.eqNull(cols),\n                        _a)]\n            }, [\n                h('textarea', {\n                    ref: refTextarea,\n                    class: 'vxe-textarea--inner',\n                    value: inputValue,\n                    name: props.name,\n                    placeholder: placeholder ? getFuncText(placeholder) : null,\n                    maxlength: maxlength,\n                    readonly: props.readonly,\n                    disabled: disabled,\n                    rows: rows,\n                    cols: cols,\n                    style: resize ? {\n                        resize: resize\n                    } : null,\n                    onInput: inputEvent,\n                    onChange: changeEvent,\n                    onKeydown: triggerEvent,\n                    onKeyup: triggerEvent,\n                    onClick: triggerEvent,\n                    onFocus: triggerEvent,\n                    onBlur: blurEvent\n                }),\n                showWordCount ? h('span', {\n                    class: ['vxe-textarea--count', {\n                            'is--error': isCountError\n                        }]\n                }, countMethod ? \"\" + countMethod({ value: inputValue }) : \"\" + inputCount + (maxlength ? \"/\" + maxlength : '')) : null\n            ]);\n        };\n        $xetextarea.renderVN = renderVN;\n        return $xetextarea;\n    },\n    render: function () {\n        return this.renderVN();\n    }\n});\n"]},"metadata":{},"sourceType":"module"}