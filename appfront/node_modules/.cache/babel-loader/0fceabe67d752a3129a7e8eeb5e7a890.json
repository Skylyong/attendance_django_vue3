{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\";\nimport { defineComponent } from \"vue\";\nimport { isDef, truthProp, makeArrayProp, makeStringProp, makeNumericProp, createNamespace } from \"../utils\";\nimport { Cell } from \"../cell\";\nconst [name, bem, t] = createNamespace(\"coupon-cell\");\nconst couponCellProps = {\n  title: String,\n  border: truthProp,\n  editable: truthProp,\n  coupons: makeArrayProp(),\n  currency: makeStringProp(\"\\xA5\"),\n  chosenCoupon: makeNumericProp(-1)\n};\n\nfunction formatValue({\n  coupons,\n  chosenCoupon,\n  currency\n}) {\n  const coupon = coupons[+chosenCoupon];\n\n  if (coupon) {\n    let value = 0;\n\n    if (isDef(coupon.value)) {\n      ({\n        value\n      } = coupon);\n    } else if (isDef(coupon.denominations)) {\n      value = coupon.denominations;\n    }\n\n    return `-${currency} ${(value / 100).toFixed(2)}`;\n  }\n\n  return coupons.length === 0 ? t(\"noCoupon\") : t(\"count\", coupons.length);\n}\n\nvar stdin_default = defineComponent({\n  name,\n  props: couponCellProps,\n\n  setup(props) {\n    return () => {\n      const selected = props.coupons[+props.chosenCoupon];\n      return _createVNode(Cell, {\n        \"class\": bem(),\n        \"value\": formatValue(props),\n        \"title\": props.title || t(\"title\"),\n        \"border\": props.border,\n        \"isLink\": props.editable,\n        \"valueClass\": bem(\"value\", {\n          selected\n        })\n      }, null);\n    };\n  }\n\n});\nexport { stdin_default as default };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/coupon-cell/CouponCell.js"],"names":["createVNode","_createVNode","defineComponent","isDef","truthProp","makeArrayProp","makeStringProp","makeNumericProp","createNamespace","Cell","name","bem","t","couponCellProps","title","String","border","editable","coupons","currency","chosenCoupon","formatValue","coupon","value","denominations","toFixed","length","stdin_default","props","setup","selected","default"],"mappings":"AAAA,SAASA,WAAW,IAAIC,YAAxB,QAA4C,KAA5C;AACA,SAASC,eAAT,QAAgC,KAAhC;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,aAA3B,EAA0CC,cAA1C,EAA0DC,eAA1D,EAA2EC,eAA3E,QAAkG,UAAlG;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,MAAM,CAACC,IAAD,EAAOC,GAAP,EAAYC,CAAZ,IAAiBJ,eAAe,CAAC,aAAD,CAAtC;AACA,MAAMK,eAAe,GAAG;AACtBC,EAAAA,KAAK,EAAEC,MADe;AAEtBC,EAAAA,MAAM,EAAEZ,SAFc;AAGtBa,EAAAA,QAAQ,EAAEb,SAHY;AAItBc,EAAAA,OAAO,EAAEb,aAAa,EAJA;AAKtBc,EAAAA,QAAQ,EAAEb,cAAc,CAAC,MAAD,CALF;AAMtBc,EAAAA,YAAY,EAAEb,eAAe,CAAC,CAAC,CAAF;AANP,CAAxB;;AAQA,SAASc,WAAT,CAAqB;AACnBH,EAAAA,OADmB;AAEnBE,EAAAA,YAFmB;AAGnBD,EAAAA;AAHmB,CAArB,EAIG;AACD,QAAMG,MAAM,GAAGJ,OAAO,CAAC,CAACE,YAAF,CAAtB;;AACA,MAAIE,MAAJ,EAAY;AACV,QAAIC,KAAK,GAAG,CAAZ;;AACA,QAAIpB,KAAK,CAACmB,MAAM,CAACC,KAAR,CAAT,EAAyB;AACvB,OAAC;AACCA,QAAAA;AADD,UAEGD,MAFJ;AAGD,KAJD,MAIO,IAAInB,KAAK,CAACmB,MAAM,CAACE,aAAR,CAAT,EAAiC;AACtCD,MAAAA,KAAK,GAAGD,MAAM,CAACE,aAAf;AACD;;AACD,WAAQ,IAAGL,QAAS,IAAG,CAACI,KAAK,GAAG,GAAT,EAAcE,OAAd,CAAsB,CAAtB,CAAyB,EAAhD;AACD;;AACD,SAAOP,OAAO,CAACQ,MAAR,KAAmB,CAAnB,GAAuBd,CAAC,CAAC,UAAD,CAAxB,GAAuCA,CAAC,CAAC,OAAD,EAAUM,OAAO,CAACQ,MAAlB,CAA/C;AACD;;AACD,IAAIC,aAAa,GAAGzB,eAAe,CAAC;AAClCQ,EAAAA,IADkC;AAElCkB,EAAAA,KAAK,EAAEf,eAF2B;;AAGlCgB,EAAAA,KAAK,CAACD,KAAD,EAAQ;AACX,WAAO,MAAM;AACX,YAAME,QAAQ,GAAGF,KAAK,CAACV,OAAN,CAAc,CAACU,KAAK,CAACR,YAArB,CAAjB;AACA,aAAOnB,YAAY,CAACQ,IAAD,EAAO;AACxB,iBAASE,GAAG,EADY;AAExB,iBAASU,WAAW,CAACO,KAAD,CAFI;AAGxB,iBAASA,KAAK,CAACd,KAAN,IAAeF,CAAC,CAAC,OAAD,CAHD;AAIxB,kBAAUgB,KAAK,CAACZ,MAJQ;AAKxB,kBAAUY,KAAK,CAACX,QALQ;AAMxB,sBAAcN,GAAG,CAAC,OAAD,EAAU;AACzBmB,UAAAA;AADyB,SAAV;AANO,OAAP,EAShB,IATgB,CAAnB;AAUD,KAZD;AAaD;;AAjBiC,CAAD,CAAnC;AAmBA,SACEH,aAAa,IAAII,OADnB","sourcesContent":["import { createVNode as _createVNode } from \"vue\";\nimport { defineComponent } from \"vue\";\nimport { isDef, truthProp, makeArrayProp, makeStringProp, makeNumericProp, createNamespace } from \"../utils\";\nimport { Cell } from \"../cell\";\nconst [name, bem, t] = createNamespace(\"coupon-cell\");\nconst couponCellProps = {\n  title: String,\n  border: truthProp,\n  editable: truthProp,\n  coupons: makeArrayProp(),\n  currency: makeStringProp(\"\\xA5\"),\n  chosenCoupon: makeNumericProp(-1)\n};\nfunction formatValue({\n  coupons,\n  chosenCoupon,\n  currency\n}) {\n  const coupon = coupons[+chosenCoupon];\n  if (coupon) {\n    let value = 0;\n    if (isDef(coupon.value)) {\n      ({\n        value\n      } = coupon);\n    } else if (isDef(coupon.denominations)) {\n      value = coupon.denominations;\n    }\n    return `-${currency} ${(value / 100).toFixed(2)}`;\n  }\n  return coupons.length === 0 ? t(\"noCoupon\") : t(\"count\", coupons.length);\n}\nvar stdin_default = defineComponent({\n  name,\n  props: couponCellProps,\n  setup(props) {\n    return () => {\n      const selected = props.coupons[+props.chosenCoupon];\n      return _createVNode(Cell, {\n        \"class\": bem(),\n        \"value\": formatValue(props),\n        \"title\": props.title || t(\"title\"),\n        \"border\": props.border,\n        \"isLink\": props.editable,\n        \"valueClass\": bem(\"value\", {\n          selected\n        })\n      }, null);\n    };\n  }\n});\nexport {\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}