{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\n\nimport { defineComponent, provide } from 'vue';\nimport shallowEqual from '../../_util/shallowequal';\nimport scrollIntoView from 'dom-scroll-into-view';\nimport warning from 'warning';\nimport PropTypes, { withUndefined } from '../../_util/vue-types';\nimport KeyCode from '../../_util/KeyCode';\nimport SelectTrigger from './SelectTrigger';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector from './Selector/MultipleSelector';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport BaseMixin from '../../_util/BaseMixin';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue as _isLabelInValue, getFilterTree, cleanEntity, findPopupContainer } from './util';\nimport SelectNode from './SelectNode';\nimport { initDefaultProps, getOptionProps, getPropsData, findDOMNode } from '../../_util/props-util';\nimport BasePopup from './Popup/MultiplePopup';\n\nfunction getWatch() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var watch = {};\n  keys.forEach(function (k) {\n    watch[k] = function () {\n      this.needSyncKeys[k] = true;\n    };\n  });\n  return watch;\n}\n\nvar Select = defineComponent({\n  name: 'Select',\n  mixins: [BaseMixin],\n  inheritAttrs: false,\n  props: initDefaultProps({\n    prefixCls: PropTypes.string,\n    prefixAria: PropTypes.string,\n    multiple: PropTypes.looseBool,\n    showArrow: PropTypes.looseBool,\n    open: PropTypes.looseBool,\n    value: PropTypes.any,\n    autofocus: PropTypes.looseBool,\n    defaultOpen: PropTypes.looseBool,\n    defaultValue: PropTypes.any,\n    showSearch: PropTypes.looseBool,\n    placeholder: PropTypes.any,\n    inputValue: PropTypes.string,\n    searchValue: PropTypes.string,\n    autoClearSearchValue: PropTypes.looseBool,\n    searchPlaceholder: PropTypes.any,\n    disabled: PropTypes.looseBool,\n    children: PropTypes.any,\n    labelInValue: PropTypes.looseBool,\n    maxTagCount: PropTypes.number,\n    maxTagPlaceholder: PropTypes.any,\n    maxTagTextLength: PropTypes.number,\n    showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n    dropdownClassName: PropTypes.string,\n    dropdownStyle: PropTypes.object,\n    dropdownVisibleChange: PropTypes.func,\n    dropdownMatchSelectWidth: PropTypes.looseBool,\n    treeData: PropTypes.array,\n    treeDataSimpleMode: withUndefined(PropTypes.oneOfType([PropTypes.looseBool, PropTypes.object])),\n    treeNodeFilterProp: PropTypes.string,\n    treeNodeLabelProp: PropTypes.string,\n    treeCheckable: PropTypes.any,\n    // treeCheckable: PropTypes.any,\n    treeCheckStrictly: PropTypes.looseBool,\n    treeIcon: PropTypes.looseBool,\n    treeLine: PropTypes.looseBool,\n    treeDefaultExpandAll: PropTypes.looseBool,\n    treeDefaultExpandedKeys: PropTypes.array,\n    treeExpandedKeys: PropTypes.array,\n    loadData: PropTypes.func,\n    filterTreeNode: withUndefined(PropTypes.oneOfType([PropTypes.func, PropTypes.looseBool])),\n    notFoundContent: PropTypes.any,\n    getPopupContainer: PropTypes.func,\n    // onSearch: PropTypes.func,\n    // onSelect: PropTypes.func,\n    // onDeselect: PropTypes.func,\n    // onChange: PropTypes.func,\n    // onDropdownVisibleChange: PropTypes.func,\n    // onTreeExpand: PropTypes.func,\n    allowClear: PropTypes.looseBool,\n    transitionName: PropTypes.string,\n    animation: PropTypes.string,\n    choiceTransitionName: PropTypes.string,\n    inputIcon: PropTypes.any,\n    clearIcon: PropTypes.any,\n    removeIcon: PropTypes.any,\n    switcherIcon: PropTypes.any,\n    __propsSymbol__: PropTypes.any\n  }, {\n    prefixCls: 'rc-tree-select',\n    prefixAria: 'rc-tree-select',\n    showArrow: true,\n    showSearch: true,\n    autoClearSearchValue: true,\n    showCheckedStrategy: SHOW_CHILD,\n    // dropdownMatchSelectWidth change the origin design, set to false now\n    // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n    // ref: https://github.com/react-component/select/pull/71\n    treeNodeFilterProp: 'value',\n    treeNodeLabelProp: 'title',\n    treeIcon: false,\n    notFoundContent: 'Not Found',\n    dropdownStyle: {},\n    dropdownVisibleChange: function dropdownVisibleChange() {\n      return true;\n    }\n  }),\n  data: function data() {\n    warning(this.$props.__propsSymbol__, 'must pass __propsSymbol__');\n    var _this$$props = this.$props,\n        prefixAria = _this$$props.prefixAria,\n        defaultOpen = _this$$props.defaultOpen,\n        open = _this$$props.open;\n    this.needSyncKeys = {};\n    this.selectorRef = createRef();\n    this.selectTriggerRef = createRef(); // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n\n    this.ariaId = generateAriaId(\"\".concat(prefixAria, \"-list\"));\n    var state = {\n      _open: open || defaultOpen,\n      _valueList: [],\n      _searchHalfCheckedKeys: [],\n      _missValueList: [],\n      _selectorValueList: [],\n      _valueEntities: {},\n      _posEntities: new Map(),\n      _keyEntities: new Map(),\n      _searchValue: '',\n      _prevProps: {},\n      _init: true,\n      _focused: undefined,\n      _treeNodes: undefined,\n      _filteredTreeNodes: undefined\n    };\n    var newState = this.getDerivedState(this.$props, state);\n    return _extends(_extends({}, state), newState);\n  },\n  watch: _extends(_extends({}, getWatch(['treeData', 'defaultValue', 'value'])), {\n    __propsSymbol__: function __propsSymbol__() {\n      var state = this.getDerivedState(this.$props, this.$data);\n      this.setState(state);\n      this.needSyncKeys = {};\n    },\n    _valueList: function _valueList() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.forcePopupAlign();\n      });\n    },\n    _open: function _open(open) {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        if (!open && !_this2.isSearchValueControlled()) {\n          _this2.setState({\n            _searchValue: ''\n          });\n        }\n\n        if (open && !_this2.$data._searchValue) {\n          _this2.setState({\n            _filteredTreeNodes: null\n          });\n        }\n\n        var prefixCls = _this2.$props.prefixCls;\n        var _this2$$data = _this2.$data,\n            selectorValueList = _this2$$data._selectorValueList,\n            valueEntities = _this2$$data._valueEntities;\n\n        var isMultiple = _this2.isMultiple(); // Scroll to value position, only need sync on single mode\n\n\n        if (!isMultiple && selectorValueList.length && open && _this2.popup) {\n          var value = selectorValueList[0].value;\n\n          var _this2$popup$getTree = _this2.popup.getTree(),\n              domTreeNodes = _this2$popup$getTree.domTreeNodes;\n\n          var _ref = valueEntities[value] || {},\n              key = _ref.key;\n\n          var treeNode = domTreeNodes[key];\n\n          if (treeNode) {\n            var domNode = findDOMNode(treeNode);\n            requestAnimationFrame(function () {\n              var popupNode = findDOMNode(_this2.popup);\n              var triggerContainer = findPopupContainer(popupNode, \"\".concat(prefixCls, \"-dropdown\"));\n\n              if (domNode && triggerContainer) {\n                scrollIntoView(domNode, triggerContainer, {\n                  onlyScrollIfNeeded: true,\n                  offsetTop: 0\n                });\n              }\n            });\n          }\n        }\n      });\n    }\n  }),\n  created: function created() {\n    provide('vcTreeSelect', {\n      onSelectorFocus: this.onSelectorFocus,\n      onSelectorBlur: this.onSelectorBlur,\n      onSelectorKeyDown: this.onComponentKeyDown,\n      onSelectorClear: this.onSelectorClear,\n      onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n      onTreeNodeSelect: this.onTreeNodeSelect,\n      onTreeNodeCheck: this.onTreeNodeCheck,\n      onPopupKeyDown: this.onComponentKeyDown,\n      onSearchInputChange: this.onSearchInputChange,\n      onSearchInputKeyDown: this.onSearchInputKeyDown\n    });\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.$nextTick(function () {\n      var _this3$$props = _this3.$props,\n          autofocus = _this3$$props.autofocus,\n          disabled = _this3$$props.disabled;\n\n      if (autofocus && !disabled) {\n        _this3.focus();\n      }\n    });\n  },\n  methods: {\n    getDerivedState: function getDerivedState(nextProps, prevState) {\n      var _prevState$_prevProps = prevState._prevProps,\n          prevProps = _prevState$_prevProps === void 0 ? {} : _prevState$_prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n          treeCheckStrictly = nextProps.treeCheckStrictly,\n          filterTreeNode = nextProps.filterTreeNode,\n          treeNodeFilterProp = nextProps.treeNodeFilterProp,\n          treeDataSimpleMode = nextProps.treeDataSimpleMode;\n      var newState = {\n        _prevProps: _extends({}, nextProps),\n        _init: false\n      };\n      var self = this; // Process the state when props updated\n\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName] || self.needSyncKeys[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n\n        return false;\n      }\n\n      var valueRefresh = false; // Open\n\n      processState('open', function (propValue) {\n        newState._open = propValue;\n      }); // Tree Nodes\n\n      var treeNodes;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(propValue);\n        treeDataChanged = true;\n      });\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n        var prev = !prevValue || prevValue === true ? {} : prevValue; // Shallow equal to avoid dynamic prop object\n\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      }); // Parse by `treeDataSimpleMode`\n\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _extends({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n\n        treeNodes = convertDataToTree(parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      } // If `treeData` not provide, use children TreeNodes\n\n\n      if (!nextProps.treeData) {\n        // processState('children', (propValue) => {\n        //   treeNodes = Array.isArray(propValue) ? propValue : [propValue]\n        // })\n        treeNodes = this.children || [];\n      } // Convert `treeData` to entities\n\n\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState._treeNodes = treeNodes;\n        newState._posEntities = entitiesMap.posEntities;\n        newState._valueEntities = entitiesMap.valueEntities;\n        newState._keyEntities = entitiesMap.keyEntities;\n        valueRefresh = true;\n      } // Value List\n\n\n      if (prevState._init) {\n        processState('defaultValue', function (propValue) {\n          newState._valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n\n      processState('value', function (propValue) {\n        newState._valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      }); // Selector Value List\n\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = []; // Get latest value list\n\n        var latestValueList = newState._valueList;\n\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState._valueList), _toConsumableArray(prevState._missValueList));\n        } // Get key by value\n\n\n        var valueLabels = {};\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value,\n              label = wrapperValue.label;\n          var entity = (newState._valueEntities || prevState._valueEntities)[value];\n          valueLabels[value] = label;\n\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          } // If not match, it may caused by ajax load. We need keep this\n\n\n          missValueList.push(wrapperValue);\n        }); // We need calculate the value when tree is checked tree\n\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState._keyEntities || prevState._keyEntities),\n              checkedKeys = _conductCheck.checkedKeys; // Format value list again for internal usage\n\n\n          newState._valueList = checkedKeys.map(function (key) {\n            var val = (newState._keyEntities || prevState._keyEntities).get(key).value;\n\n            var wrappedValue = {\n              value: val\n            };\n\n            if (valueLabels[val] !== undefined) {\n              wrappedValue.label = valueLabels[val];\n            }\n\n            return wrappedValue;\n          });\n        } else {\n          newState._valueList = filteredValueList;\n        } // Fill the missValueList, we still need display in the selector\n\n\n        newState._missValueList = missValueList; // Calculate the value list for `Selector` usage\n\n        newState._selectorValueList = formatSelectorValue(newState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      } // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n\n\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState._searchValue = propValue;\n        }\n      }); // Search value\n\n      processState('searchValue', function (propValue) {\n        newState._searchValue = propValue;\n      }); // Do the search logic\n\n      if (newState._searchValue !== undefined || prevState._searchValue && treeNodes) {\n        var searchValue = newState._searchValue !== undefined ? newState._searchValue : prevState._searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        newState._filteredTreeNodes = getFilterTree(newState._treeNodes || prevState._treeNodes, searchValue, filterTreeNodeFn, newState._valueEntities || prevState._valueEntities, SelectNode);\n      } // We should re-calculate the halfCheckedKeys when in search mode\n\n\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState._searchValue || prevState._searchValue)) {\n        newState._searchHalfCheckedKeys = getHalfCheckedKeys(newState._valueList, newState._valueEntities || prevState._valueEntities);\n      } // Checked Strategy\n\n\n      processState('showCheckedStrategy', function () {\n        newState._selectorValueList = newState._selectorValueList || formatSelectorValue(newState._valueList || prevState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      });\n      return newState;\n    },\n    // ==================== Selector ====================\n    onSelectorFocus: function onSelectorFocus() {\n      this.setState({\n        _focused: true\n      });\n    },\n    onSelectorBlur: function onSelectorBlur() {\n      this.setState({\n        _focused: false\n      }); // TODO: Close when Popup is also not focused\n      // this.setState({ open: false });\n    },\n    // Handle key board event in both Selector and Popup\n    onComponentKeyDown: function onComponentKeyDown(event) {\n      var open = this.$data._open;\n      var keyCode = event.keyCode;\n\n      if (!open) {\n        if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n          this.setOpenState(true);\n        }\n      } else if (KeyCode.ESC === keyCode) {\n        this.setOpenState(false);\n      } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n        // TODO: Handle `open` state\n        event.stopPropagation();\n      }\n    },\n    onDeselect: function onDeselect(wrappedValue, node, nodeEventInfo) {\n      this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n    },\n    onSelectorClear: function onSelectorClear(event) {\n      var disabled = this.$props.disabled;\n      if (disabled) return;\n      this.triggerChange([], []);\n\n      if (!this.isSearchValueControlled()) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n\n      event.stopPropagation();\n    },\n    onMultipleSelectorRemove: function onMultipleSelectorRemove(event, removeValue) {\n      event.stopPropagation();\n      var _this$$data = this.$data,\n          valueList = _this$$data._valueList,\n          missValueList = _this$$data._missValueList,\n          valueEntities = _this$$data._valueEntities;\n      var _this$$props2 = this.$props,\n          treeCheckable = _this$$props2.treeCheckable,\n          treeCheckStrictly = _this$$props2.treeCheckStrictly,\n          treeNodeLabelProp = _this$$props2.treeNodeLabelProp,\n          disabled = _this$$props2.disabled;\n      if (disabled) return; // Find trigger entity\n\n      var triggerEntity = valueEntities[removeValue]; // Clean up value\n\n      var newValueList = valueList;\n\n      if (triggerEntity) {\n        // If value is in tree\n        if (treeCheckable && !treeCheckStrictly) {\n          newValueList = valueList.filter(function (_ref2) {\n            var value = _ref2.value;\n            var entity = valueEntities[value];\n            return !isPosRelated(entity.pos, triggerEntity.pos);\n          });\n        } else {\n          newValueList = valueList.filter(function (_ref3) {\n            var value = _ref3.value;\n            return value !== removeValue;\n          });\n        }\n      }\n\n      var triggerNode = triggerEntity ? triggerEntity.node : null;\n      var extraInfo = {\n        triggerValue: removeValue,\n        triggerNode: triggerNode\n      };\n      var deselectInfo = {\n        node: triggerNode\n      }; // [Legacy] Little hack on this to make same action as `onCheck` event.\n\n      if (treeCheckable) {\n        var filteredEntityList = newValueList.map(function (_ref4) {\n          var value = _ref4.value;\n          return valueEntities[value];\n        });\n        deselectInfo.event = 'check';\n        deselectInfo.checked = false;\n        deselectInfo.checkedNodes = filteredEntityList.map(function (_ref5) {\n          var node = _ref5.node;\n          return node;\n        });\n        deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref6) {\n          var node = _ref6.node,\n              pos = _ref6.pos;\n          return {\n            node: node,\n            pos: pos\n          };\n        });\n\n        if (treeCheckStrictly) {\n          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n        } else {\n          // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref7) {\n            var node = _ref7.node;\n            return node;\n          });\n        }\n      } else {\n        deselectInfo.event = 'select';\n        deselectInfo.selected = false;\n        deselectInfo.selectedNodes = newValueList.map(function (_ref8) {\n          var value = _ref8.value;\n          return (valueEntities[value] || {}).node;\n        });\n      } // Some value user pass prop is not in the tree, we also need clean it\n\n\n      var newMissValueList = missValueList.filter(function (_ref9) {\n        var value = _ref9.value;\n        return value !== removeValue;\n      });\n      var wrappedValue;\n\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          label: triggerNode ? getPropsData(triggerNode)[treeNodeLabelProp] : null,\n          value: removeValue\n        };\n      } else {\n        wrappedValue = removeValue;\n      }\n\n      this.onDeselect(wrappedValue, triggerNode, deselectInfo);\n      this.triggerChange(newMissValueList, newValueList, extraInfo);\n    },\n    // ===================== Popup ======================\n    onValueTrigger: function onValueTrigger(isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n      var node = nodeEventInfo.node;\n      var value = node.$props.value;\n      var _this$$data2 = this.$data,\n          missValueList = _this$$data2._missValueList,\n          valueEntities = _this$$data2._valueEntities,\n          keyEntities = _this$$data2._keyEntities,\n          searchValue = _this$$data2._searchValue;\n      var _this$$props3 = this.$props,\n          disabled = _this$$props3.disabled,\n          inputValue = _this$$props3.inputValue,\n          treeNodeLabelProp = _this$$props3.treeNodeLabelProp,\n          treeCheckable = _this$$props3.treeCheckable,\n          treeCheckStrictly = _this$$props3.treeCheckStrictly,\n          autoClearSearchValue = _this$$props3.autoClearSearchValue;\n      var label = node.$props[treeNodeLabelProp];\n      if (disabled) return; // Wrap the return value for user\n\n      var wrappedValue;\n\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          value: value,\n          label: label\n        };\n      } else {\n        wrappedValue = value;\n      } // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n\n\n      if (isAdd) {\n        this.__emit('select', wrappedValue, node, nodeEventInfo);\n      } else {\n        this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n      } // Get wrapped value list.\n      // This is a bit hack cause we use key to match the value.\n\n\n      var newValueList = nodeList.map(function (node) {\n        var props = getPropsData(node);\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      }); // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n      // We need calculate the missing nodes.\n\n      if (treeCheckable && !treeCheckStrictly) {\n        var keyList = newValueList.map(function (_ref10) {\n          var val = _ref10.value;\n          return valueEntities[val].key;\n        });\n\n        if (isAdd) {\n          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n        } else {\n          keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n            checkedKeys: keyList\n          }).checkedKeys;\n        }\n\n        newValueList = keyList.map(function (key) {\n          var props = getPropsData(keyEntities.get(key).node);\n          return {\n            value: props.value,\n            label: props[treeNodeLabelProp]\n          };\n        });\n      } // Clean up `searchValue` when this prop is set\n\n\n      if (autoClearSearchValue || inputValue === null) {\n        // Clean state `searchValue` if uncontrolled\n        if (!this.isSearchValueControlled()) {\n          this.setUncontrolledState({\n            _searchValue: '',\n            _filteredTreeNodes: null\n          });\n        } // Trigger onSearch if `searchValue` to be empty.\n        // We should also trigger onSearch with empty string here\n        // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n\n\n        if (searchValue && searchValue.length) {\n          this.__emit('search', '');\n        }\n      } // [Legacy] Provide extra info\n\n\n      var extraInfo = _extends(_extends({}, nodeExtraInfo), {\n        triggerValue: value,\n        triggerNode: node\n      });\n\n      this.triggerChange(missValueList, newValueList, extraInfo);\n    },\n    onTreeNodeSelect: function onTreeNodeSelect(_, nodeEventInfo) {\n      var _this$$data3 = this.$data,\n          valueList = _this$$data3._valueList,\n          valueEntities = _this$$data3._valueEntities;\n      var _this$$props4 = this.$props,\n          treeCheckable = _this$$props4.treeCheckable,\n          multiple = _this$$props4.multiple;\n      if (treeCheckable) return;\n\n      if (!multiple) {\n        this.setOpenState(false);\n      }\n\n      var isAdd = nodeEventInfo.selected;\n      var selectedValue = nodeEventInfo.node.$props.value;\n      var newValueList;\n\n      if (!multiple) {\n        newValueList = [{\n          value: selectedValue\n        }];\n      } else {\n        newValueList = valueList.filter(function (_ref11) {\n          var value = _ref11.value;\n          return value !== selectedValue;\n        });\n\n        if (isAdd) {\n          newValueList.push({\n            value: selectedValue\n          });\n        }\n      }\n\n      var selectedNodes = newValueList.map(function (_ref12) {\n        var value = _ref12.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref13) {\n        var node = _ref13.node;\n        return node;\n      });\n      this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {\n        selected: isAdd\n      });\n    },\n    onTreeNodeCheck: function onTreeNodeCheck(_, nodeEventInfo) {\n      var _this$$data4 = this.$data,\n          searchValue = _this$$data4._searchValue,\n          keyEntities = _this$$data4._keyEntities,\n          valueEntities = _this$$data4._valueEntities,\n          valueList = _this$$data4._valueList;\n      var treeCheckStrictly = this.$props.treeCheckStrictly;\n      var checkedNodes = nodeEventInfo.checkedNodes,\n          checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n      var isAdd = nodeEventInfo.checked;\n      var extraInfo = {\n        checked: isAdd\n      };\n      var checkedNodeList = checkedNodes; // [Legacy] Check event provide `allCheckedNodes`.\n      // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n      // - Related: Show the top checked nodes and has children prop.\n      // - Unrelated: Show all the checked nodes.\n\n      if (searchValue) {\n        var oriKeyList = valueList.map(function (_ref14) {\n          var value = _ref14.value;\n          return valueEntities[value];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (_ref15) {\n          var key = _ref15.key;\n          return key;\n        });\n        var keyList;\n\n        if (isAdd) {\n          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (node) {\n            var _getPropsData = getPropsData(node),\n                value = _getPropsData.value;\n\n            return valueEntities[value].key;\n          })))));\n        } else {\n          keyList = conductCheck([getPropsData(nodeEventInfo.node).eventKey], false, keyEntities, {\n            checkedKeys: oriKeyList\n          }).checkedKeys;\n        }\n\n        checkedNodeList = keyList.map(function (key) {\n          return keyEntities.get(key).node;\n        }); // Let's follow as not `treeCheckStrictly` format\n\n        extraInfo.allCheckedNodes = keyList.map(function (key) {\n          return cleanEntity(keyEntities.get(key));\n        });\n      } else if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n      } else {\n        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n      }\n\n      this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n    },\n    // ==================== Trigger =====================\n    onDropdownVisibleChange: function onDropdownVisibleChange(open) {\n      var _this$$props5 = this.$props,\n          multiple = _this$$props5.multiple,\n          treeCheckable = _this$$props5.treeCheckable;\n      var _searchValue = this.$data._searchValue; // When set open success and single mode,\n      // we will reset the input content.\n\n      if (open && !multiple && !treeCheckable && _searchValue) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n\n      this.setOpenState(open, true);\n    },\n    onSearchInputChange: function onSearchInputChange(event) {\n      var value = event.target.value;\n      var _this$$data5 = this.$data,\n          treeNodes = _this$$data5._treeNodes,\n          valueEntities = _this$$data5._valueEntities;\n      var _this$$props6 = this.$props,\n          filterTreeNode = _this$$props6.filterTreeNode,\n          treeNodeFilterProp = _this$$props6.treeNodeFilterProp;\n\n      this.__emit('search', value);\n\n      var isSet = false;\n\n      if (!this.isSearchValueControlled()) {\n        isSet = this.setUncontrolledState({\n          _searchValue: value\n        });\n        this.setOpenState(true);\n      }\n\n      if (isSet) {\n        // Do the search logic\n        var upperSearchValue = String(value).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (!filterTreeNodeFn) {\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        this.setState({\n          _filteredTreeNodes: getFilterTree(treeNodes, value, filterTreeNodeFn, valueEntities, SelectNode)\n        });\n      }\n    },\n    onSearchInputKeyDown: function onSearchInputKeyDown(event) {\n      var _this$$data6 = this.$data,\n          searchValue = _this$$data6._searchValue,\n          valueList = _this$$data6._valueList,\n          valueEntities = _this$$data6._valueEntities;\n      var keyCode = event.keyCode;\n\n      if (KeyCode.BACKSPACE === keyCode && this.isMultiple() && !searchValue && valueList.length) {\n        var lastValue = valueList[valueList.length - 1].value;\n        var treeCheckStrictly = this.$props.treeCheckStrictly;\n\n        if (!treeCheckStrictly) {\n          (function () {\n            var cur = valueEntities[lastValue];\n\n            while (cur) {\n              if (valueList.some(function (j) {\n                return j.value === cur.value;\n              })) {\n                lastValue = cur.value;\n                cur = cur.parent;\n              } else {\n                cur = null;\n              }\n            }\n          })();\n        }\n\n        this.onMultipleSelectorRemove(event, lastValue);\n      }\n    },\n    onChoiceAnimationLeave: function onChoiceAnimationLeave() {\n      var _this4 = this;\n\n      requestAnimationFrame(function () {\n        _this4.forcePopupAlign();\n      });\n    },\n    setPopupRef: function setPopupRef(popup) {\n      this.popup = popup;\n    },\n\n    /**\n     * Only update the value which is not in props\n     */\n    setUncontrolledState: function setUncontrolledState(state) {\n      var needSync = false;\n      var newState = {};\n      var props = getOptionProps(this);\n      Object.keys(state).forEach(function (name) {\n        if (name.slice(1) in props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        this.setState(newState);\n      }\n\n      return needSync;\n    },\n    // [Legacy] Origin provide `documentClickClose` which triggered by `Trigger`\n    // Currently `TreeSelect` align the hide popup logic as `Select` which blur to hide.\n    // `documentClickClose` is not accurate anymore. Let's just keep the key word.\n    setOpenState: function setOpenState(open) {\n      var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var dropdownVisibleChange = this.$props.dropdownVisibleChange;\n\n      if (dropdownVisibleChange && dropdownVisibleChange(open, {\n        documentClickClose: !open && byTrigger\n      }) === false) {\n        return;\n      }\n\n      this.setUncontrolledState({\n        _open: open\n      });\n    },\n    // Tree checkable is also a multiple case\n    isMultiple: function isMultiple() {\n      var _this$$props7 = this.$props,\n          multiple = _this$$props7.multiple,\n          treeCheckable = _this$$props7.treeCheckable;\n      return !!(multiple || treeCheckable);\n    },\n    isLabelInValue: function isLabelInValue() {\n      return _isLabelInValue(this.$props);\n    },\n    // [Legacy] To align with `Select` component,\n    // We use `searchValue` instead of `inputValue`\n    // but currently still need support that.\n    // Add this method the check if is controlled\n    isSearchValueControlled: function isSearchValueControlled() {\n      var props = getOptionProps(this);\n      var inputValue = props.inputValue;\n      if ('searchValue' in props) return true;\n      return 'inputValue' in props && inputValue !== null;\n    },\n    forcePopupAlign: function forcePopupAlign() {\n      var $trigger = this.selectTriggerRef.current;\n\n      if ($trigger) {\n        $trigger.forcePopupAlign();\n      }\n    },\n    delayForcePopupAlign: function delayForcePopupAlign() {\n      var _this5 = this; // Wait 2 frame to avoid dom update & dom algin in the same time\n      // https://github.com/ant-design/ant-design/issues/12031\n\n\n      requestAnimationFrame(function () {\n        requestAnimationFrame(_this5.forcePopupAlign);\n      });\n    },\n\n    /**\n     * 1. Update state valueList.\n     * 2. Fire `onChange` event to user.\n     */\n    triggerChange: function triggerChange(missValueList, valueList) {\n      var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _this$$data7 = this.$data,\n          valueEntities = _this$$data7._valueEntities,\n          searchValue = _this$$data7._searchValue,\n          prevSelectorValueList = _this$$data7._selectorValueList;\n      var props = getOptionProps(this);\n      var disabled = props.disabled,\n          treeCheckable = props.treeCheckable,\n          treeCheckStrictly = props.treeCheckStrictly;\n      if (disabled) return; // Trigger\n\n      var extra = _extends({\n        // [Legacy] Always return as array contains label & value\n        preValue: prevSelectorValueList.map(function (_ref16) {\n          var label = _ref16.label,\n              value = _ref16.value;\n          return {\n            label: label,\n            value: value\n          };\n        })\n      }, extraInfo); // Format value by `treeCheckStrictly`\n\n\n      var selectorValueList = formatSelectorValue(valueList, props, valueEntities);\n\n      if (!('value' in props)) {\n        var newState = {\n          _missValueList: missValueList,\n          _valueList: valueList,\n          _selectorValueList: selectorValueList\n        };\n\n        if (searchValue && treeCheckable && !treeCheckStrictly) {\n          newState._searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n        }\n\n        this.setState(newState);\n      } // Only do the logic when `onChange` function provided\n\n\n      if (this.$attrs.onChange) {\n        var connectValueList; // Get value by mode\n\n        if (this.isMultiple()) {\n          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n        } else {\n          connectValueList = selectorValueList.slice(0, 1);\n        }\n\n        var labelList = null;\n        var returnValue;\n\n        if (this.isLabelInValue()) {\n          returnValue = connectValueList.map(function (_ref17) {\n            var label = _ref17.label,\n                value = _ref17.value;\n            return {\n              label: label,\n              value: value\n            };\n          });\n        } else {\n          labelList = [];\n          returnValue = connectValueList.map(function (_ref18) {\n            var label = _ref18.label,\n                value = _ref18.value;\n            labelList.push(label);\n            return value;\n          });\n        }\n\n        if (!this.isMultiple()) {\n          returnValue = returnValue[0];\n        }\n\n        this.__emit('change', returnValue, labelList, extra);\n      }\n    },\n    focus: function focus() {\n      this.selectorRef.current.focus();\n    },\n    blur: function blur() {\n      this.selectorRef.current.blur();\n    }\n  },\n  // ===================== Render =====================\n  render: function render() {\n    var _this$$data8 = this.$data,\n        valueList = _this$$data8._valueList,\n        missValueList = _this$$data8._missValueList,\n        selectorValueList = _this$$data8._selectorValueList,\n        searchHalfCheckedKeys = _this$$data8._searchHalfCheckedKeys,\n        valueEntities = _this$$data8._valueEntities,\n        keyEntities = _this$$data8._keyEntities,\n        searchValue = _this$$data8._searchValue,\n        open = _this$$data8._open,\n        focused = _this$$data8._focused,\n        treeNodes = _this$$data8._treeNodes,\n        filteredTreeNodes = _this$$data8._filteredTreeNodes;\n    var props = getOptionProps(this);\n    var prefixCls = props.prefixCls,\n        treeExpandedKeys = props.treeExpandedKeys;\n    var isMultiple = this.isMultiple();\n\n    var passProps = _extends(_extends(_extends({}, props), this.$attrs), {\n      isMultiple: isMultiple,\n      valueList: valueList,\n      searchHalfCheckedKeys: searchHalfCheckedKeys,\n      selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n      valueEntities: valueEntities,\n      keyEntities: keyEntities,\n      searchValue: searchValue,\n      upperSearchValue: (searchValue || '').toUpperCase(),\n      // Perf save\n      open: open,\n      focused: focused,\n      dropdownPrefixCls: \"\".concat(prefixCls, \"-dropdown\"),\n      ariaId: this.ariaId,\n      onChoiceAnimationLeave: this.onChoiceAnimationLeave,\n      vSlots: this.$slots\n    });\n\n    var popupProps = _extends(_extends({}, passProps), {\n      treeNodes: treeNodes,\n      filteredTreeNodes: filteredTreeNodes,\n      // Tree expanded control\n      treeExpandedKeys: treeExpandedKeys,\n      onTreeExpanded: this.delayForcePopupAlign,\n      ref: this.setPopupRef\n    });\n\n    var $popup = _createVNode(BasePopup, _objectSpread(_objectSpread({}, popupProps), {}, {\n      \"__propsSymbol__\": []\n    }), null);\n\n    var Selector = isMultiple ? MultipleSelector : SingleSelector;\n\n    var $selector = _createVNode(Selector, _objectSpread(_objectSpread({}, passProps), {}, {\n      \"isMultiple\": isMultiple,\n      \"ref\": this.selectorRef\n    }), null);\n\n    var selectTriggerProps = _extends(_extends({}, passProps), {\n      popupElement: $popup,\n      dropdownVisibleChange: this.onDropdownVisibleChange,\n      ref: this.selectTriggerRef\n    });\n\n    return _createVNode(SelectTrigger, selectTriggerProps, {\n      default: function _default() {\n        return [$selector];\n      }\n    });\n  }\n});\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD; // Let warning show correct component name\n\nSelect.name = 'TreeSelect';\nexport default Select;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/node_modules/ant-design-vue/es/vc-tree-select/src/Select.js"],"names":["_objectSpread","_toConsumableArray","_extends","createVNode","_createVNode","defineComponent","provide","shallowEqual","scrollIntoView","warning","PropTypes","withUndefined","KeyCode","SelectTrigger","SingleSelector","MultipleSelector","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","BaseMixin","createRef","generateAriaId","formatInternalValue","formatSelectorValue","parseSimpleTreeData","convertDataToTree","convertTreeToEntities","conductCheck","getHalfCheckedKeys","flatToHierarchy","isPosRelated","isLabelInValue","_isLabelInValue","getFilterTree","cleanEntity","findPopupContainer","SelectNode","initDefaultProps","getOptionProps","getPropsData","findDOMNode","BasePopup","getWatch","keys","arguments","length","undefined","watch","forEach","k","needSyncKeys","Select","name","mixins","inheritAttrs","props","prefixCls","string","prefixAria","multiple","looseBool","showArrow","open","value","any","autofocus","defaultOpen","defaultValue","showSearch","placeholder","inputValue","searchValue","autoClearSearchValue","searchPlaceholder","disabled","children","labelInValue","maxTagCount","number","maxTagPlaceholder","maxTagTextLength","showCheckedStrategy","oneOf","dropdownClassName","dropdownStyle","object","dropdownVisibleChange","func","dropdownMatchSelectWidth","treeData","array","treeDataSimpleMode","oneOfType","treeNodeFilterProp","treeNodeLabelProp","treeCheckable","treeCheckStrictly","treeIcon","treeLine","treeDefaultExpandAll","treeDefaultExpandedKeys","treeExpandedKeys","loadData","filterTreeNode","notFoundContent","getPopupContainer","allowClear","transitionName","animation","choiceTransitionName","inputIcon","clearIcon","removeIcon","switcherIcon","__propsSymbol__","data","$props","_this$$props","selectorRef","selectTriggerRef","ariaId","concat","state","_open","_valueList","_searchHalfCheckedKeys","_missValueList","_selectorValueList","_valueEntities","_posEntities","Map","_keyEntities","_searchValue","_prevProps","_init","_focused","_treeNodes","_filteredTreeNodes","newState","getDerivedState","$data","setState","_this","$nextTick","forcePopupAlign","_this2","isSearchValueControlled","_this2$$data","selectorValueList","valueEntities","isMultiple","popup","_this2$popup$getTree","getTree","domTreeNodes","_ref","key","treeNode","domNode","requestAnimationFrame","popupNode","triggerContainer","onlyScrollIfNeeded","offsetTop","created","onSelectorFocus","onSelectorBlur","onSelectorKeyDown","onComponentKeyDown","onSelectorClear","onMultipleSelectorRemove","onTreeNodeSelect","onTreeNodeCheck","onPopupKeyDown","onSearchInputChange","onSearchInputKeyDown","mounted","_this3","_this3$$props","focus","methods","nextProps","prevState","_prevState$_prevProps","prevProps","self","processState","propName","updater","valueRefresh","propValue","treeNodes","treeDataChanged","treeDataModeChanged","prevValue","prev","simpleMapper","id","pId","rootPId","entitiesMap","posEntities","keyEntities","missValueList","filteredValueList","keyList","latestValueList","valueLabels","wrapperValue","label","entity","push","_conductCheck","checkedKeys","map","val","get","wrappedValue","upperSearchValue","String","toUpperCase","filterTreeNodeFn","_","node","nodeValue","indexOf","event","keyCode","ENTER","DOWN","setOpenState","ESC","UP","LEFT","RIGHT","stopPropagation","onDeselect","nodeEventInfo","__emit","triggerChange","setUncontrolledState","removeValue","_this$$data","valueList","_this$$props2","triggerEntity","newValueList","filter","_ref2","pos","_ref3","triggerNode","extraInfo","triggerValue","deselectInfo","filteredEntityList","_ref4","checked","checkedNodes","_ref5","checkedNodesPositions","_ref6","allCheckedNodes","_ref7","selected","selectedNodes","_ref8","newMissValueList","_ref9","onValueTrigger","isAdd","nodeList","nodeExtraInfo","_this$$data2","_this$$props3","_ref10","_this$$data3","_this$$props4","selectedValue","_ref11","_ref12","_ref13","_this$$data4","checkedNodeList","oriKeyList","_ref14","_ref15","Array","from","Set","_getPropsData","eventKey","onDropdownVisibleChange","_this$$props5","target","_this$$data5","_this$$props6","isSet","_this$$data6","BACKSPACE","lastValue","cur","some","j","parent","onChoiceAnimationLeave","_this4","setPopupRef","needSync","Object","slice","byTrigger","documentClickClose","_this$$props7","$trigger","current","delayForcePopupAlign","_this5","_this$$data7","prevSelectorValueList","extra","preValue","_ref16","$attrs","onChange","connectValueList","labelList","returnValue","_ref17","_ref18","blur","render","_this$$data8","searchHalfCheckedKeys","focused","filteredTreeNodes","passProps","dropdownPrefixCls","vSlots","$slots","popupProps","onTreeExpanded","ref","$popup","Selector","$selector","selectTriggerProps","popupElement","default","_default","TreeNode"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\n\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\nimport { defineComponent, provide } from 'vue';\nimport shallowEqual from '../../_util/shallowequal';\nimport scrollIntoView from 'dom-scroll-into-view';\nimport warning from 'warning';\nimport PropTypes, { withUndefined } from '../../_util/vue-types';\nimport KeyCode from '../../_util/KeyCode';\nimport SelectTrigger from './SelectTrigger';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector from './Selector/MultipleSelector';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport BaseMixin from '../../_util/BaseMixin';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue as _isLabelInValue, getFilterTree, cleanEntity, findPopupContainer } from './util';\nimport SelectNode from './SelectNode';\nimport { initDefaultProps, getOptionProps, getPropsData, findDOMNode } from '../../_util/props-util';\nimport BasePopup from './Popup/MultiplePopup';\n\nfunction getWatch() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var watch = {};\n  keys.forEach(function (k) {\n    watch[k] = function () {\n      this.needSyncKeys[k] = true;\n    };\n  });\n  return watch;\n}\n\nvar Select = defineComponent({\n  name: 'Select',\n  mixins: [BaseMixin],\n  inheritAttrs: false,\n  props: initDefaultProps({\n    prefixCls: PropTypes.string,\n    prefixAria: PropTypes.string,\n    multiple: PropTypes.looseBool,\n    showArrow: PropTypes.looseBool,\n    open: PropTypes.looseBool,\n    value: PropTypes.any,\n    autofocus: PropTypes.looseBool,\n    defaultOpen: PropTypes.looseBool,\n    defaultValue: PropTypes.any,\n    showSearch: PropTypes.looseBool,\n    placeholder: PropTypes.any,\n    inputValue: PropTypes.string,\n    searchValue: PropTypes.string,\n    autoClearSearchValue: PropTypes.looseBool,\n    searchPlaceholder: PropTypes.any,\n    disabled: PropTypes.looseBool,\n    children: PropTypes.any,\n    labelInValue: PropTypes.looseBool,\n    maxTagCount: PropTypes.number,\n    maxTagPlaceholder: PropTypes.any,\n    maxTagTextLength: PropTypes.number,\n    showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n    dropdownClassName: PropTypes.string,\n    dropdownStyle: PropTypes.object,\n    dropdownVisibleChange: PropTypes.func,\n    dropdownMatchSelectWidth: PropTypes.looseBool,\n    treeData: PropTypes.array,\n    treeDataSimpleMode: withUndefined(PropTypes.oneOfType([PropTypes.looseBool, PropTypes.object])),\n    treeNodeFilterProp: PropTypes.string,\n    treeNodeLabelProp: PropTypes.string,\n    treeCheckable: PropTypes.any,\n    // treeCheckable: PropTypes.any,\n    treeCheckStrictly: PropTypes.looseBool,\n    treeIcon: PropTypes.looseBool,\n    treeLine: PropTypes.looseBool,\n    treeDefaultExpandAll: PropTypes.looseBool,\n    treeDefaultExpandedKeys: PropTypes.array,\n    treeExpandedKeys: PropTypes.array,\n    loadData: PropTypes.func,\n    filterTreeNode: withUndefined(PropTypes.oneOfType([PropTypes.func, PropTypes.looseBool])),\n    notFoundContent: PropTypes.any,\n    getPopupContainer: PropTypes.func,\n    // onSearch: PropTypes.func,\n    // onSelect: PropTypes.func,\n    // onDeselect: PropTypes.func,\n    // onChange: PropTypes.func,\n    // onDropdownVisibleChange: PropTypes.func,\n    // onTreeExpand: PropTypes.func,\n    allowClear: PropTypes.looseBool,\n    transitionName: PropTypes.string,\n    animation: PropTypes.string,\n    choiceTransitionName: PropTypes.string,\n    inputIcon: PropTypes.any,\n    clearIcon: PropTypes.any,\n    removeIcon: PropTypes.any,\n    switcherIcon: PropTypes.any,\n    __propsSymbol__: PropTypes.any\n  }, {\n    prefixCls: 'rc-tree-select',\n    prefixAria: 'rc-tree-select',\n    showArrow: true,\n    showSearch: true,\n    autoClearSearchValue: true,\n    showCheckedStrategy: SHOW_CHILD,\n    // dropdownMatchSelectWidth change the origin design, set to false now\n    // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n    // ref: https://github.com/react-component/select/pull/71\n    treeNodeFilterProp: 'value',\n    treeNodeLabelProp: 'title',\n    treeIcon: false,\n    notFoundContent: 'Not Found',\n    dropdownStyle: {},\n    dropdownVisibleChange: function dropdownVisibleChange() {\n      return true;\n    }\n  }),\n  data: function data() {\n    warning(this.$props.__propsSymbol__, 'must pass __propsSymbol__');\n    var _this$$props = this.$props,\n        prefixAria = _this$$props.prefixAria,\n        defaultOpen = _this$$props.defaultOpen,\n        open = _this$$props.open;\n    this.needSyncKeys = {};\n    this.selectorRef = createRef();\n    this.selectTriggerRef = createRef(); // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n\n    this.ariaId = generateAriaId(\"\".concat(prefixAria, \"-list\"));\n    var state = {\n      _open: open || defaultOpen,\n      _valueList: [],\n      _searchHalfCheckedKeys: [],\n      _missValueList: [],\n      _selectorValueList: [],\n      _valueEntities: {},\n      _posEntities: new Map(),\n      _keyEntities: new Map(),\n      _searchValue: '',\n      _prevProps: {},\n      _init: true,\n      _focused: undefined,\n      _treeNodes: undefined,\n      _filteredTreeNodes: undefined\n    };\n    var newState = this.getDerivedState(this.$props, state);\n    return _extends(_extends({}, state), newState);\n  },\n  watch: _extends(_extends({}, getWatch(['treeData', 'defaultValue', 'value'])), {\n    __propsSymbol__: function __propsSymbol__() {\n      var state = this.getDerivedState(this.$props, this.$data);\n      this.setState(state);\n      this.needSyncKeys = {};\n    },\n    _valueList: function _valueList() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.forcePopupAlign();\n      });\n    },\n    _open: function _open(open) {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        if (!open && !_this2.isSearchValueControlled()) {\n          _this2.setState({\n            _searchValue: ''\n          });\n        }\n\n        if (open && !_this2.$data._searchValue) {\n          _this2.setState({\n            _filteredTreeNodes: null\n          });\n        }\n\n        var prefixCls = _this2.$props.prefixCls;\n        var _this2$$data = _this2.$data,\n            selectorValueList = _this2$$data._selectorValueList,\n            valueEntities = _this2$$data._valueEntities;\n\n        var isMultiple = _this2.isMultiple(); // Scroll to value position, only need sync on single mode\n\n\n        if (!isMultiple && selectorValueList.length && open && _this2.popup) {\n          var value = selectorValueList[0].value;\n\n          var _this2$popup$getTree = _this2.popup.getTree(),\n              domTreeNodes = _this2$popup$getTree.domTreeNodes;\n\n          var _ref = valueEntities[value] || {},\n              key = _ref.key;\n\n          var treeNode = domTreeNodes[key];\n\n          if (treeNode) {\n            var domNode = findDOMNode(treeNode);\n            requestAnimationFrame(function () {\n              var popupNode = findDOMNode(_this2.popup);\n              var triggerContainer = findPopupContainer(popupNode, \"\".concat(prefixCls, \"-dropdown\"));\n\n              if (domNode && triggerContainer) {\n                scrollIntoView(domNode, triggerContainer, {\n                  onlyScrollIfNeeded: true,\n                  offsetTop: 0\n                });\n              }\n            });\n          }\n        }\n      });\n    }\n  }),\n  created: function created() {\n    provide('vcTreeSelect', {\n      onSelectorFocus: this.onSelectorFocus,\n      onSelectorBlur: this.onSelectorBlur,\n      onSelectorKeyDown: this.onComponentKeyDown,\n      onSelectorClear: this.onSelectorClear,\n      onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n      onTreeNodeSelect: this.onTreeNodeSelect,\n      onTreeNodeCheck: this.onTreeNodeCheck,\n      onPopupKeyDown: this.onComponentKeyDown,\n      onSearchInputChange: this.onSearchInputChange,\n      onSearchInputKeyDown: this.onSearchInputKeyDown\n    });\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.$nextTick(function () {\n      var _this3$$props = _this3.$props,\n          autofocus = _this3$$props.autofocus,\n          disabled = _this3$$props.disabled;\n\n      if (autofocus && !disabled) {\n        _this3.focus();\n      }\n    });\n  },\n  methods: {\n    getDerivedState: function getDerivedState(nextProps, prevState) {\n      var _prevState$_prevProps = prevState._prevProps,\n          prevProps = _prevState$_prevProps === void 0 ? {} : _prevState$_prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n          treeCheckStrictly = nextProps.treeCheckStrictly,\n          filterTreeNode = nextProps.filterTreeNode,\n          treeNodeFilterProp = nextProps.treeNodeFilterProp,\n          treeDataSimpleMode = nextProps.treeDataSimpleMode;\n      var newState = {\n        _prevProps: _extends({}, nextProps),\n        _init: false\n      };\n      var self = this; // Process the state when props updated\n\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName] || self.needSyncKeys[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n\n        return false;\n      }\n\n      var valueRefresh = false; // Open\n\n      processState('open', function (propValue) {\n        newState._open = propValue;\n      }); // Tree Nodes\n\n      var treeNodes;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(propValue);\n        treeDataChanged = true;\n      });\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n        var prev = !prevValue || prevValue === true ? {} : prevValue; // Shallow equal to avoid dynamic prop object\n\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      }); // Parse by `treeDataSimpleMode`\n\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _extends({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n\n        treeNodes = convertDataToTree(parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      } // If `treeData` not provide, use children TreeNodes\n\n\n      if (!nextProps.treeData) {\n        // processState('children', (propValue) => {\n        //   treeNodes = Array.isArray(propValue) ? propValue : [propValue]\n        // })\n        treeNodes = this.children || [];\n      } // Convert `treeData` to entities\n\n\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState._treeNodes = treeNodes;\n        newState._posEntities = entitiesMap.posEntities;\n        newState._valueEntities = entitiesMap.valueEntities;\n        newState._keyEntities = entitiesMap.keyEntities;\n        valueRefresh = true;\n      } // Value List\n\n\n      if (prevState._init) {\n        processState('defaultValue', function (propValue) {\n          newState._valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n\n      processState('value', function (propValue) {\n        newState._valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      }); // Selector Value List\n\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = []; // Get latest value list\n\n        var latestValueList = newState._valueList;\n\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState._valueList), _toConsumableArray(prevState._missValueList));\n        } // Get key by value\n\n\n        var valueLabels = {};\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value,\n              label = wrapperValue.label;\n          var entity = (newState._valueEntities || prevState._valueEntities)[value];\n          valueLabels[value] = label;\n\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          } // If not match, it may caused by ajax load. We need keep this\n\n\n          missValueList.push(wrapperValue);\n        }); // We need calculate the value when tree is checked tree\n\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState._keyEntities || prevState._keyEntities),\n              checkedKeys = _conductCheck.checkedKeys; // Format value list again for internal usage\n\n\n          newState._valueList = checkedKeys.map(function (key) {\n            var val = (newState._keyEntities || prevState._keyEntities).get(key).value;\n\n            var wrappedValue = {\n              value: val\n            };\n\n            if (valueLabels[val] !== undefined) {\n              wrappedValue.label = valueLabels[val];\n            }\n\n            return wrappedValue;\n          });\n        } else {\n          newState._valueList = filteredValueList;\n        } // Fill the missValueList, we still need display in the selector\n\n\n        newState._missValueList = missValueList; // Calculate the value list for `Selector` usage\n\n        newState._selectorValueList = formatSelectorValue(newState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      } // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n\n\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState._searchValue = propValue;\n        }\n      }); // Search value\n\n      processState('searchValue', function (propValue) {\n        newState._searchValue = propValue;\n      }); // Do the search logic\n\n      if (newState._searchValue !== undefined || prevState._searchValue && treeNodes) {\n        var searchValue = newState._searchValue !== undefined ? newState._searchValue : prevState._searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        newState._filteredTreeNodes = getFilterTree(newState._treeNodes || prevState._treeNodes, searchValue, filterTreeNodeFn, newState._valueEntities || prevState._valueEntities, SelectNode);\n      } // We should re-calculate the halfCheckedKeys when in search mode\n\n\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState._searchValue || prevState._searchValue)) {\n        newState._searchHalfCheckedKeys = getHalfCheckedKeys(newState._valueList, newState._valueEntities || prevState._valueEntities);\n      } // Checked Strategy\n\n\n      processState('showCheckedStrategy', function () {\n        newState._selectorValueList = newState._selectorValueList || formatSelectorValue(newState._valueList || prevState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      });\n      return newState;\n    },\n    // ==================== Selector ====================\n    onSelectorFocus: function onSelectorFocus() {\n      this.setState({\n        _focused: true\n      });\n    },\n    onSelectorBlur: function onSelectorBlur() {\n      this.setState({\n        _focused: false\n      }); // TODO: Close when Popup is also not focused\n      // this.setState({ open: false });\n    },\n    // Handle key board event in both Selector and Popup\n    onComponentKeyDown: function onComponentKeyDown(event) {\n      var open = this.$data._open;\n      var keyCode = event.keyCode;\n\n      if (!open) {\n        if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n          this.setOpenState(true);\n        }\n      } else if (KeyCode.ESC === keyCode) {\n        this.setOpenState(false);\n      } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n        // TODO: Handle `open` state\n        event.stopPropagation();\n      }\n    },\n    onDeselect: function onDeselect(wrappedValue, node, nodeEventInfo) {\n      this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n    },\n    onSelectorClear: function onSelectorClear(event) {\n      var disabled = this.$props.disabled;\n      if (disabled) return;\n      this.triggerChange([], []);\n\n      if (!this.isSearchValueControlled()) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n\n      event.stopPropagation();\n    },\n    onMultipleSelectorRemove: function onMultipleSelectorRemove(event, removeValue) {\n      event.stopPropagation();\n      var _this$$data = this.$data,\n          valueList = _this$$data._valueList,\n          missValueList = _this$$data._missValueList,\n          valueEntities = _this$$data._valueEntities;\n      var _this$$props2 = this.$props,\n          treeCheckable = _this$$props2.treeCheckable,\n          treeCheckStrictly = _this$$props2.treeCheckStrictly,\n          treeNodeLabelProp = _this$$props2.treeNodeLabelProp,\n          disabled = _this$$props2.disabled;\n      if (disabled) return; // Find trigger entity\n\n      var triggerEntity = valueEntities[removeValue]; // Clean up value\n\n      var newValueList = valueList;\n\n      if (triggerEntity) {\n        // If value is in tree\n        if (treeCheckable && !treeCheckStrictly) {\n          newValueList = valueList.filter(function (_ref2) {\n            var value = _ref2.value;\n            var entity = valueEntities[value];\n            return !isPosRelated(entity.pos, triggerEntity.pos);\n          });\n        } else {\n          newValueList = valueList.filter(function (_ref3) {\n            var value = _ref3.value;\n            return value !== removeValue;\n          });\n        }\n      }\n\n      var triggerNode = triggerEntity ? triggerEntity.node : null;\n      var extraInfo = {\n        triggerValue: removeValue,\n        triggerNode: triggerNode\n      };\n      var deselectInfo = {\n        node: triggerNode\n      }; // [Legacy] Little hack on this to make same action as `onCheck` event.\n\n      if (treeCheckable) {\n        var filteredEntityList = newValueList.map(function (_ref4) {\n          var value = _ref4.value;\n          return valueEntities[value];\n        });\n        deselectInfo.event = 'check';\n        deselectInfo.checked = false;\n        deselectInfo.checkedNodes = filteredEntityList.map(function (_ref5) {\n          var node = _ref5.node;\n          return node;\n        });\n        deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref6) {\n          var node = _ref6.node,\n              pos = _ref6.pos;\n          return {\n            node: node,\n            pos: pos\n          };\n        });\n\n        if (treeCheckStrictly) {\n          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n        } else {\n          // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref7) {\n            var node = _ref7.node;\n            return node;\n          });\n        }\n      } else {\n        deselectInfo.event = 'select';\n        deselectInfo.selected = false;\n        deselectInfo.selectedNodes = newValueList.map(function (_ref8) {\n          var value = _ref8.value;\n          return (valueEntities[value] || {}).node;\n        });\n      } // Some value user pass prop is not in the tree, we also need clean it\n\n\n      var newMissValueList = missValueList.filter(function (_ref9) {\n        var value = _ref9.value;\n        return value !== removeValue;\n      });\n      var wrappedValue;\n\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          label: triggerNode ? getPropsData(triggerNode)[treeNodeLabelProp] : null,\n          value: removeValue\n        };\n      } else {\n        wrappedValue = removeValue;\n      }\n\n      this.onDeselect(wrappedValue, triggerNode, deselectInfo);\n      this.triggerChange(newMissValueList, newValueList, extraInfo);\n    },\n    // ===================== Popup ======================\n    onValueTrigger: function onValueTrigger(isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n      var node = nodeEventInfo.node;\n      var value = node.$props.value;\n      var _this$$data2 = this.$data,\n          missValueList = _this$$data2._missValueList,\n          valueEntities = _this$$data2._valueEntities,\n          keyEntities = _this$$data2._keyEntities,\n          searchValue = _this$$data2._searchValue;\n      var _this$$props3 = this.$props,\n          disabled = _this$$props3.disabled,\n          inputValue = _this$$props3.inputValue,\n          treeNodeLabelProp = _this$$props3.treeNodeLabelProp,\n          treeCheckable = _this$$props3.treeCheckable,\n          treeCheckStrictly = _this$$props3.treeCheckStrictly,\n          autoClearSearchValue = _this$$props3.autoClearSearchValue;\n      var label = node.$props[treeNodeLabelProp];\n      if (disabled) return; // Wrap the return value for user\n\n      var wrappedValue;\n\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          value: value,\n          label: label\n        };\n      } else {\n        wrappedValue = value;\n      } // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n\n\n      if (isAdd) {\n        this.__emit('select', wrappedValue, node, nodeEventInfo);\n      } else {\n        this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n      } // Get wrapped value list.\n      // This is a bit hack cause we use key to match the value.\n\n\n      var newValueList = nodeList.map(function (node) {\n        var props = getPropsData(node);\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      }); // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n      // We need calculate the missing nodes.\n\n      if (treeCheckable && !treeCheckStrictly) {\n        var keyList = newValueList.map(function (_ref10) {\n          var val = _ref10.value;\n          return valueEntities[val].key;\n        });\n\n        if (isAdd) {\n          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n        } else {\n          keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n            checkedKeys: keyList\n          }).checkedKeys;\n        }\n\n        newValueList = keyList.map(function (key) {\n          var props = getPropsData(keyEntities.get(key).node);\n          return {\n            value: props.value,\n            label: props[treeNodeLabelProp]\n          };\n        });\n      } // Clean up `searchValue` when this prop is set\n\n\n      if (autoClearSearchValue || inputValue === null) {\n        // Clean state `searchValue` if uncontrolled\n        if (!this.isSearchValueControlled()) {\n          this.setUncontrolledState({\n            _searchValue: '',\n            _filteredTreeNodes: null\n          });\n        } // Trigger onSearch if `searchValue` to be empty.\n        // We should also trigger onSearch with empty string here\n        // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n\n\n        if (searchValue && searchValue.length) {\n          this.__emit('search', '');\n        }\n      } // [Legacy] Provide extra info\n\n\n      var extraInfo = _extends(_extends({}, nodeExtraInfo), {\n        triggerValue: value,\n        triggerNode: node\n      });\n\n      this.triggerChange(missValueList, newValueList, extraInfo);\n    },\n    onTreeNodeSelect: function onTreeNodeSelect(_, nodeEventInfo) {\n      var _this$$data3 = this.$data,\n          valueList = _this$$data3._valueList,\n          valueEntities = _this$$data3._valueEntities;\n      var _this$$props4 = this.$props,\n          treeCheckable = _this$$props4.treeCheckable,\n          multiple = _this$$props4.multiple;\n      if (treeCheckable) return;\n\n      if (!multiple) {\n        this.setOpenState(false);\n      }\n\n      var isAdd = nodeEventInfo.selected;\n      var selectedValue = nodeEventInfo.node.$props.value;\n      var newValueList;\n\n      if (!multiple) {\n        newValueList = [{\n          value: selectedValue\n        }];\n      } else {\n        newValueList = valueList.filter(function (_ref11) {\n          var value = _ref11.value;\n          return value !== selectedValue;\n        });\n\n        if (isAdd) {\n          newValueList.push({\n            value: selectedValue\n          });\n        }\n      }\n\n      var selectedNodes = newValueList.map(function (_ref12) {\n        var value = _ref12.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref13) {\n        var node = _ref13.node;\n        return node;\n      });\n      this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {\n        selected: isAdd\n      });\n    },\n    onTreeNodeCheck: function onTreeNodeCheck(_, nodeEventInfo) {\n      var _this$$data4 = this.$data,\n          searchValue = _this$$data4._searchValue,\n          keyEntities = _this$$data4._keyEntities,\n          valueEntities = _this$$data4._valueEntities,\n          valueList = _this$$data4._valueList;\n      var treeCheckStrictly = this.$props.treeCheckStrictly;\n      var checkedNodes = nodeEventInfo.checkedNodes,\n          checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n      var isAdd = nodeEventInfo.checked;\n      var extraInfo = {\n        checked: isAdd\n      };\n      var checkedNodeList = checkedNodes; // [Legacy] Check event provide `allCheckedNodes`.\n      // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n      // - Related: Show the top checked nodes and has children prop.\n      // - Unrelated: Show all the checked nodes.\n\n      if (searchValue) {\n        var oriKeyList = valueList.map(function (_ref14) {\n          var value = _ref14.value;\n          return valueEntities[value];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (_ref15) {\n          var key = _ref15.key;\n          return key;\n        });\n        var keyList;\n\n        if (isAdd) {\n          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (node) {\n            var _getPropsData = getPropsData(node),\n                value = _getPropsData.value;\n\n            return valueEntities[value].key;\n          })))));\n        } else {\n          keyList = conductCheck([getPropsData(nodeEventInfo.node).eventKey], false, keyEntities, {\n            checkedKeys: oriKeyList\n          }).checkedKeys;\n        }\n\n        checkedNodeList = keyList.map(function (key) {\n          return keyEntities.get(key).node;\n        }); // Let's follow as not `treeCheckStrictly` format\n\n        extraInfo.allCheckedNodes = keyList.map(function (key) {\n          return cleanEntity(keyEntities.get(key));\n        });\n      } else if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n      } else {\n        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n      }\n\n      this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n    },\n    // ==================== Trigger =====================\n    onDropdownVisibleChange: function onDropdownVisibleChange(open) {\n      var _this$$props5 = this.$props,\n          multiple = _this$$props5.multiple,\n          treeCheckable = _this$$props5.treeCheckable;\n      var _searchValue = this.$data._searchValue; // When set open success and single mode,\n      // we will reset the input content.\n\n      if (open && !multiple && !treeCheckable && _searchValue) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n\n      this.setOpenState(open, true);\n    },\n    onSearchInputChange: function onSearchInputChange(event) {\n      var value = event.target.value;\n      var _this$$data5 = this.$data,\n          treeNodes = _this$$data5._treeNodes,\n          valueEntities = _this$$data5._valueEntities;\n      var _this$$props6 = this.$props,\n          filterTreeNode = _this$$props6.filterTreeNode,\n          treeNodeFilterProp = _this$$props6.treeNodeFilterProp;\n\n      this.__emit('search', value);\n\n      var isSet = false;\n\n      if (!this.isSearchValueControlled()) {\n        isSet = this.setUncontrolledState({\n          _searchValue: value\n        });\n        this.setOpenState(true);\n      }\n\n      if (isSet) {\n        // Do the search logic\n        var upperSearchValue = String(value).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (!filterTreeNodeFn) {\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        this.setState({\n          _filteredTreeNodes: getFilterTree(treeNodes, value, filterTreeNodeFn, valueEntities, SelectNode)\n        });\n      }\n    },\n    onSearchInputKeyDown: function onSearchInputKeyDown(event) {\n      var _this$$data6 = this.$data,\n          searchValue = _this$$data6._searchValue,\n          valueList = _this$$data6._valueList,\n          valueEntities = _this$$data6._valueEntities;\n      var keyCode = event.keyCode;\n\n      if (KeyCode.BACKSPACE === keyCode && this.isMultiple() && !searchValue && valueList.length) {\n        var lastValue = valueList[valueList.length - 1].value;\n        var treeCheckStrictly = this.$props.treeCheckStrictly;\n\n        if (!treeCheckStrictly) {\n          (function () {\n            var cur = valueEntities[lastValue];\n\n            while (cur) {\n              if (valueList.some(function (j) {\n                return j.value === cur.value;\n              })) {\n                lastValue = cur.value;\n                cur = cur.parent;\n              } else {\n                cur = null;\n              }\n            }\n          })();\n        }\n\n        this.onMultipleSelectorRemove(event, lastValue);\n      }\n    },\n    onChoiceAnimationLeave: function onChoiceAnimationLeave() {\n      var _this4 = this;\n\n      requestAnimationFrame(function () {\n        _this4.forcePopupAlign();\n      });\n    },\n    setPopupRef: function setPopupRef(popup) {\n      this.popup = popup;\n    },\n\n    /**\n     * Only update the value which is not in props\n     */\n    setUncontrolledState: function setUncontrolledState(state) {\n      var needSync = false;\n      var newState = {};\n      var props = getOptionProps(this);\n      Object.keys(state).forEach(function (name) {\n        if (name.slice(1) in props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        this.setState(newState);\n      }\n\n      return needSync;\n    },\n    // [Legacy] Origin provide `documentClickClose` which triggered by `Trigger`\n    // Currently `TreeSelect` align the hide popup logic as `Select` which blur to hide.\n    // `documentClickClose` is not accurate anymore. Let's just keep the key word.\n    setOpenState: function setOpenState(open) {\n      var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var dropdownVisibleChange = this.$props.dropdownVisibleChange;\n\n      if (dropdownVisibleChange && dropdownVisibleChange(open, {\n        documentClickClose: !open && byTrigger\n      }) === false) {\n        return;\n      }\n\n      this.setUncontrolledState({\n        _open: open\n      });\n    },\n    // Tree checkable is also a multiple case\n    isMultiple: function isMultiple() {\n      var _this$$props7 = this.$props,\n          multiple = _this$$props7.multiple,\n          treeCheckable = _this$$props7.treeCheckable;\n      return !!(multiple || treeCheckable);\n    },\n    isLabelInValue: function isLabelInValue() {\n      return _isLabelInValue(this.$props);\n    },\n    // [Legacy] To align with `Select` component,\n    // We use `searchValue` instead of `inputValue`\n    // but currently still need support that.\n    // Add this method the check if is controlled\n    isSearchValueControlled: function isSearchValueControlled() {\n      var props = getOptionProps(this);\n      var inputValue = props.inputValue;\n      if ('searchValue' in props) return true;\n      return 'inputValue' in props && inputValue !== null;\n    },\n    forcePopupAlign: function forcePopupAlign() {\n      var $trigger = this.selectTriggerRef.current;\n\n      if ($trigger) {\n        $trigger.forcePopupAlign();\n      }\n    },\n    delayForcePopupAlign: function delayForcePopupAlign() {\n      var _this5 = this;\n\n      // Wait 2 frame to avoid dom update & dom algin in the same time\n      // https://github.com/ant-design/ant-design/issues/12031\n      requestAnimationFrame(function () {\n        requestAnimationFrame(_this5.forcePopupAlign);\n      });\n    },\n\n    /**\n     * 1. Update state valueList.\n     * 2. Fire `onChange` event to user.\n     */\n    triggerChange: function triggerChange(missValueList, valueList) {\n      var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _this$$data7 = this.$data,\n          valueEntities = _this$$data7._valueEntities,\n          searchValue = _this$$data7._searchValue,\n          prevSelectorValueList = _this$$data7._selectorValueList;\n      var props = getOptionProps(this);\n      var disabled = props.disabled,\n          treeCheckable = props.treeCheckable,\n          treeCheckStrictly = props.treeCheckStrictly;\n      if (disabled) return; // Trigger\n\n      var extra = _extends({\n        // [Legacy] Always return as array contains label & value\n        preValue: prevSelectorValueList.map(function (_ref16) {\n          var label = _ref16.label,\n              value = _ref16.value;\n          return {\n            label: label,\n            value: value\n          };\n        })\n      }, extraInfo); // Format value by `treeCheckStrictly`\n\n\n      var selectorValueList = formatSelectorValue(valueList, props, valueEntities);\n\n      if (!('value' in props)) {\n        var newState = {\n          _missValueList: missValueList,\n          _valueList: valueList,\n          _selectorValueList: selectorValueList\n        };\n\n        if (searchValue && treeCheckable && !treeCheckStrictly) {\n          newState._searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n        }\n\n        this.setState(newState);\n      } // Only do the logic when `onChange` function provided\n\n\n      if (this.$attrs.onChange) {\n        var connectValueList; // Get value by mode\n\n        if (this.isMultiple()) {\n          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n        } else {\n          connectValueList = selectorValueList.slice(0, 1);\n        }\n\n        var labelList = null;\n        var returnValue;\n\n        if (this.isLabelInValue()) {\n          returnValue = connectValueList.map(function (_ref17) {\n            var label = _ref17.label,\n                value = _ref17.value;\n            return {\n              label: label,\n              value: value\n            };\n          });\n        } else {\n          labelList = [];\n          returnValue = connectValueList.map(function (_ref18) {\n            var label = _ref18.label,\n                value = _ref18.value;\n            labelList.push(label);\n            return value;\n          });\n        }\n\n        if (!this.isMultiple()) {\n          returnValue = returnValue[0];\n        }\n\n        this.__emit('change', returnValue, labelList, extra);\n      }\n    },\n    focus: function focus() {\n      this.selectorRef.current.focus();\n    },\n    blur: function blur() {\n      this.selectorRef.current.blur();\n    }\n  },\n  // ===================== Render =====================\n  render: function render() {\n    var _this$$data8 = this.$data,\n        valueList = _this$$data8._valueList,\n        missValueList = _this$$data8._missValueList,\n        selectorValueList = _this$$data8._selectorValueList,\n        searchHalfCheckedKeys = _this$$data8._searchHalfCheckedKeys,\n        valueEntities = _this$$data8._valueEntities,\n        keyEntities = _this$$data8._keyEntities,\n        searchValue = _this$$data8._searchValue,\n        open = _this$$data8._open,\n        focused = _this$$data8._focused,\n        treeNodes = _this$$data8._treeNodes,\n        filteredTreeNodes = _this$$data8._filteredTreeNodes;\n    var props = getOptionProps(this);\n    var prefixCls = props.prefixCls,\n        treeExpandedKeys = props.treeExpandedKeys;\n    var isMultiple = this.isMultiple();\n\n    var passProps = _extends(_extends(_extends({}, props), this.$attrs), {\n      isMultiple: isMultiple,\n      valueList: valueList,\n      searchHalfCheckedKeys: searchHalfCheckedKeys,\n      selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n      valueEntities: valueEntities,\n      keyEntities: keyEntities,\n      searchValue: searchValue,\n      upperSearchValue: (searchValue || '').toUpperCase(),\n      // Perf save\n      open: open,\n      focused: focused,\n      dropdownPrefixCls: \"\".concat(prefixCls, \"-dropdown\"),\n      ariaId: this.ariaId,\n      onChoiceAnimationLeave: this.onChoiceAnimationLeave,\n      vSlots: this.$slots\n    });\n\n    var popupProps = _extends(_extends({}, passProps), {\n      treeNodes: treeNodes,\n      filteredTreeNodes: filteredTreeNodes,\n      // Tree expanded control\n      treeExpandedKeys: treeExpandedKeys,\n      onTreeExpanded: this.delayForcePopupAlign,\n      ref: this.setPopupRef\n    });\n\n    var $popup = _createVNode(BasePopup, _objectSpread(_objectSpread({}, popupProps), {}, {\n      \"__propsSymbol__\": []\n    }), null);\n\n    var Selector = isMultiple ? MultipleSelector : SingleSelector;\n\n    var $selector = _createVNode(Selector, _objectSpread(_objectSpread({}, passProps), {}, {\n      \"isMultiple\": isMultiple,\n      \"ref\": this.selectorRef\n    }), null);\n\n    var selectTriggerProps = _extends(_extends({}, passProps), {\n      popupElement: $popup,\n      dropdownVisibleChange: this.onDropdownVisibleChange,\n      ref: this.selectTriggerRef\n    });\n\n    return _createVNode(SelectTrigger, selectTriggerProps, {\n      default: function _default() {\n        return [$selector];\n      }\n    });\n  }\n});\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD; // Let warning show correct component name\n\nSelect.name = 'TreeSelect';\nexport default Select;"]},"metadata":{},"sourceType":"module"}