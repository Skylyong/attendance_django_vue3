{"ast":null,"code":"import { get } from \"./basic\";\nimport { camelize } from \"./format\";\nimport { isFunction } from \"./validate\";\nimport locale from \"../locale\";\n\nfunction createTranslate(name) {\n  const prefix = camelize(name) + \".\";\n  return (path, ...args) => {\n    const messages = locale.messages();\n    const message = get(messages, prefix + path) || get(messages, path);\n    return isFunction(message) ? message(...args) : message;\n  };\n}\n\nfunction genBem(name, mods) {\n  if (!mods) {\n    return \"\";\n  }\n\n  if (typeof mods === \"string\") {\n    return ` ${name}--${mods}`;\n  }\n\n  if (Array.isArray(mods)) {\n    return mods.reduce((ret, item) => ret + genBem(name, item), \"\");\n  }\n\n  return Object.keys(mods).reduce((ret, key) => ret + (mods[key] ? genBem(name, key) : \"\"), \"\");\n}\n\nfunction createBEM(name) {\n  return (el, mods) => {\n    if (el && typeof el !== \"string\") {\n      mods = el;\n      el = \"\";\n    }\n\n    el = el ? `${name}__${el}` : name;\n    return `${el}${genBem(el, mods)}`;\n  };\n}\n\nfunction createNamespace(name) {\n  const prefixedName = `van-${name}`;\n  return [prefixedName, createBEM(prefixedName), createTranslate(prefixedName)];\n}\n\nexport { createBEM, createNamespace, createTranslate };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/utils/create.js"],"names":["get","camelize","isFunction","locale","createTranslate","name","prefix","path","args","messages","message","genBem","mods","Array","isArray","reduce","ret","item","Object","keys","key","createBEM","el","createNamespace","prefixedName"],"mappings":"AAAA,SAASA,GAAT,QAAoB,SAApB;AACA,SAASC,QAAT,QAAyB,UAAzB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AACA,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,QAAMC,MAAM,GAAGL,QAAQ,CAACI,IAAD,CAAR,GAAiB,GAAhC;AACA,SAAO,CAACE,IAAD,EAAO,GAAGC,IAAV,KAAmB;AACxB,UAAMC,QAAQ,GAAGN,MAAM,CAACM,QAAP,EAAjB;AACA,UAAMC,OAAO,GAAGV,GAAG,CAACS,QAAD,EAAWH,MAAM,GAAGC,IAApB,CAAH,IAAgCP,GAAG,CAACS,QAAD,EAAWF,IAAX,CAAnD;AACA,WAAOL,UAAU,CAACQ,OAAD,CAAV,GAAsBA,OAAO,CAAC,GAAGF,IAAJ,CAA7B,GAAyCE,OAAhD;AACD,GAJD;AAKD;;AACD,SAASC,MAAT,CAAgBN,IAAhB,EAAsBO,IAAtB,EAA4B;AAC1B,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,EAAP;AACD;;AACD,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAQ,IAAGP,IAAK,KAAIO,IAAK,EAAzB;AACD;;AACD,MAAIC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AACvB,WAAOA,IAAI,CAACG,MAAL,CAAY,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGL,MAAM,CAACN,IAAD,EAAOY,IAAP,CAAvC,EAAqD,EAArD,CAAP;AACD;;AACD,SAAOC,MAAM,CAACC,IAAP,CAAYP,IAAZ,EAAkBG,MAAlB,CAAyB,CAACC,GAAD,EAAMI,GAAN,KAAcJ,GAAG,IAAIJ,IAAI,CAACQ,GAAD,CAAJ,GAAYT,MAAM,CAACN,IAAD,EAAOe,GAAP,CAAlB,GAAgC,EAApC,CAA1C,EAAmF,EAAnF,CAAP;AACD;;AACD,SAASC,SAAT,CAAmBhB,IAAnB,EAAyB;AACvB,SAAO,CAACiB,EAAD,EAAKV,IAAL,KAAc;AACnB,QAAIU,EAAE,IAAI,OAAOA,EAAP,KAAc,QAAxB,EAAkC;AAChCV,MAAAA,IAAI,GAAGU,EAAP;AACAA,MAAAA,EAAE,GAAG,EAAL;AACD;;AACDA,IAAAA,EAAE,GAAGA,EAAE,GAAI,GAAEjB,IAAK,KAAIiB,EAAG,EAAlB,GAAsBjB,IAA7B;AACA,WAAQ,GAAEiB,EAAG,GAAEX,MAAM,CAACW,EAAD,EAAKV,IAAL,CAAW,EAAhC;AACD,GAPD;AAQD;;AACD,SAASW,eAAT,CAAyBlB,IAAzB,EAA+B;AAC7B,QAAMmB,YAAY,GAAI,OAAMnB,IAAK,EAAjC;AACA,SAAO,CACLmB,YADK,EAELH,SAAS,CAACG,YAAD,CAFJ,EAGLpB,eAAe,CAACoB,YAAD,CAHV,CAAP;AAKD;;AACD,SACEH,SADF,EAEEE,eAFF,EAGEnB,eAHF","sourcesContent":["import { get } from \"./basic\";\nimport { camelize } from \"./format\";\nimport { isFunction } from \"./validate\";\nimport locale from \"../locale\";\nfunction createTranslate(name) {\n  const prefix = camelize(name) + \".\";\n  return (path, ...args) => {\n    const messages = locale.messages();\n    const message = get(messages, prefix + path) || get(messages, path);\n    return isFunction(message) ? message(...args) : message;\n  };\n}\nfunction genBem(name, mods) {\n  if (!mods) {\n    return \"\";\n  }\n  if (typeof mods === \"string\") {\n    return ` ${name}--${mods}`;\n  }\n  if (Array.isArray(mods)) {\n    return mods.reduce((ret, item) => ret + genBem(name, item), \"\");\n  }\n  return Object.keys(mods).reduce((ret, key) => ret + (mods[key] ? genBem(name, key) : \"\"), \"\");\n}\nfunction createBEM(name) {\n  return (el, mods) => {\n    if (el && typeof el !== \"string\") {\n      mods = el;\n      el = \"\";\n    }\n    el = el ? `${name}__${el}` : name;\n    return `${el}${genBem(el, mods)}`;\n  };\n}\nfunction createNamespace(name) {\n  const prefixedName = `van-${name}`;\n  return [\n    prefixedName,\n    createBEM(prefixedName),\n    createTranslate(prefixedName)\n  ];\n}\nexport {\n  createBEM,\n  createNamespace,\n  createTranslate\n};\n"]},"metadata":{},"sourceType":"module"}