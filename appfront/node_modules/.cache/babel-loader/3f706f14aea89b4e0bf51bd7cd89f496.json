{"ast":null,"code":"import XEUtils from 'xe-utils';\nimport { browse, hasClass, getAbsolutePos, addClass, removeClass, getEventTargetNode } from '../../tools/dom';\n\nfunction getTargetOffset(target, container) {\n  var offsetTop = 0;\n  var offsetLeft = 0;\n  var triggerCheckboxLabel = !browse.firefox && hasClass(target, 'vxe-checkbox--label');\n\n  if (triggerCheckboxLabel) {\n    var checkboxLabelStyle = getComputedStyle(target);\n    offsetTop -= XEUtils.toNumber(checkboxLabelStyle.paddingTop);\n    offsetLeft -= XEUtils.toNumber(checkboxLabelStyle.paddingLeft);\n  }\n\n  while (target && target !== container) {\n    offsetTop += target.offsetTop;\n    offsetLeft += target.offsetLeft;\n    target = target.offsetParent;\n\n    if (triggerCheckboxLabel) {\n      var checkboxStyle = getComputedStyle(target);\n      offsetTop -= XEUtils.toNumber(checkboxStyle.paddingTop);\n      offsetLeft -= XEUtils.toNumber(checkboxStyle.paddingLeft);\n    }\n  }\n\n  return {\n    offsetTop: offsetTop,\n    offsetLeft: offsetLeft\n  };\n}\n\nvar tableKeyboardHook = {\n  setupTable: function ($xetable) {\n    var props = $xetable.props,\n        reactData = $xetable.reactData,\n        internalData = $xetable.internalData;\n    var refElem = $xetable.getRefMaps().refElem;\n\n    var _a = $xetable.getComputeMaps(),\n        computeEditOpts = _a.computeEditOpts,\n        computeCheckboxOpts = _a.computeCheckboxOpts,\n        computeMouseOpts = _a.computeMouseOpts,\n        computeTreeOpts = _a.computeTreeOpts;\n\n    function getCheckboxRangeRows(params, targetTrElem, moveRange) {\n      var countHeight = 0;\n      var rangeRows = [];\n      var isDown = moveRange > 0;\n      var moveSize = moveRange > 0 ? moveRange : Math.abs(moveRange) + targetTrElem.offsetHeight;\n      var scrollYLoad = reactData.scrollYLoad;\n      var afterFullData = internalData.afterFullData,\n          scrollYStore = internalData.scrollYStore;\n\n      if (scrollYLoad) {\n        var _rowIndex = $xetable.getVTRowIndex(params.row);\n\n        if (isDown) {\n          rangeRows = afterFullData.slice(_rowIndex, _rowIndex + Math.ceil(moveSize / scrollYStore.rowHeight));\n        } else {\n          rangeRows = afterFullData.slice(_rowIndex - Math.floor(moveSize / scrollYStore.rowHeight) + 1, _rowIndex + 1);\n        }\n      } else {\n        var siblingProp = isDown ? 'next' : 'previous';\n\n        while (targetTrElem && countHeight < moveSize) {\n          var rowNodeRest = $xetable.getRowNode(targetTrElem);\n\n          if (rowNodeRest) {\n            rangeRows.push(rowNodeRest.item);\n            countHeight += targetTrElem.offsetHeight;\n            targetTrElem = targetTrElem[siblingProp + \"ElementSibling\"];\n          }\n        }\n      }\n\n      return rangeRows;\n    }\n\n    var handleCheckboxRangeEvent = function (evnt, params) {\n      var column = params.column,\n          cell = params.cell;\n\n      if (column.type === 'checkbox') {\n        var el_1 = refElem.value;\n        var elemStore = internalData.elemStore;\n        var disX_1 = evnt.clientX;\n        var disY_1 = evnt.clientY;\n        var bodyWrapperElem_1 = elemStore[(column.fixed || 'main') + \"-body-wrapper\"] || elemStore['main-body-wrapper'];\n        var checkboxRangeElem_1 = bodyWrapperElem_1.querySelector('.vxe-table--checkbox-range');\n        var domMousemove_1 = document.onmousemove;\n        var domMouseup_1 = document.onmouseup;\n        var trElem_1 = cell.parentNode;\n        var selectRecords_1 = $xetable.getCheckboxRecords();\n        var lastRangeRows_1 = [];\n        var marginSize_1 = 1;\n        var offsetRest = getTargetOffset(evnt.target, bodyWrapperElem_1);\n        var startTop_1 = offsetRest.offsetTop + evnt.offsetY;\n        var startLeft_1 = offsetRest.offsetLeft + evnt.offsetX;\n        var startScrollTop_1 = bodyWrapperElem_1.scrollTop;\n        var rowHeight_1 = trElem_1.offsetHeight;\n        var mouseScrollTimeout_1 = null;\n        var isMouseScrollDown_1 = false;\n        var mouseScrollSpaceSize_1 = 1;\n\n        var triggerEvent_1 = function (type, evnt) {\n          $xetable.dispatchEvent(\"checkbox-range-\" + type, {\n            records: $xetable.getCheckboxRecords(),\n            reserves: $xetable.getCheckboxReserveRecords()\n          }, evnt);\n        };\n\n        var handleChecked_1 = function (evnt) {\n          var clientX = evnt.clientX,\n              clientY = evnt.clientY;\n          var offsetLeft = clientX - disX_1;\n          var offsetTop = clientY - disY_1 + (bodyWrapperElem_1.scrollTop - startScrollTop_1);\n          var rangeHeight = Math.abs(offsetTop);\n          var rangeWidth = Math.abs(offsetLeft);\n          var rangeTop = startTop_1;\n          var rangeLeft = startLeft_1;\n\n          if (offsetTop < marginSize_1) {\n            // 向上\n            rangeTop += offsetTop;\n\n            if (rangeTop < marginSize_1) {\n              rangeTop = marginSize_1;\n              rangeHeight = startTop_1;\n            }\n          } else {\n            // 向下\n            rangeHeight = Math.min(rangeHeight, bodyWrapperElem_1.scrollHeight - startTop_1 - marginSize_1);\n          }\n\n          if (offsetLeft < marginSize_1) {\n            // 向左\n            rangeLeft += offsetLeft;\n\n            if (rangeWidth > startLeft_1) {\n              rangeLeft = marginSize_1;\n              rangeWidth = startLeft_1;\n            }\n          } else {\n            // 向右\n            rangeWidth = Math.min(rangeWidth, bodyWrapperElem_1.clientWidth - startLeft_1 - marginSize_1);\n          }\n\n          checkboxRangeElem_1.style.height = rangeHeight + \"px\";\n          checkboxRangeElem_1.style.width = rangeWidth + \"px\";\n          checkboxRangeElem_1.style.left = rangeLeft + \"px\";\n          checkboxRangeElem_1.style.top = rangeTop + \"px\";\n          checkboxRangeElem_1.style.display = 'block';\n          var rangeRows = getCheckboxRangeRows(params, trElem_1, offsetTop < marginSize_1 ? -rangeHeight : rangeHeight); // 至少滑动 10px 才能有效匹配\n\n          if (rangeHeight > 10 && rangeRows.length !== lastRangeRows_1.length) {\n            lastRangeRows_1 = rangeRows;\n\n            if (evnt.ctrlKey) {\n              rangeRows.forEach(function (row) {\n                $xetable.handleSelectRow({\n                  row: row\n                }, selectRecords_1.indexOf(row) === -1);\n              });\n            } else {\n              $xetable.setAllCheckboxRow(false);\n              $xetable.setCheckboxRow(rangeRows, true);\n            }\n\n            triggerEvent_1('change', evnt);\n          }\n        }; // 停止鼠标滚动\n\n\n        var stopMouseScroll_1 = function () {\n          clearTimeout(mouseScrollTimeout_1);\n          mouseScrollTimeout_1 = null;\n        }; // 开始鼠标滚动\n\n\n        var startMouseScroll_1 = function (evnt) {\n          stopMouseScroll_1();\n          mouseScrollTimeout_1 = setTimeout(function () {\n            if (mouseScrollTimeout_1) {\n              var scrollLeft = bodyWrapperElem_1.scrollLeft,\n                  scrollTop = bodyWrapperElem_1.scrollTop,\n                  clientHeight = bodyWrapperElem_1.clientHeight,\n                  scrollHeight = bodyWrapperElem_1.scrollHeight;\n              var topSize = Math.ceil(mouseScrollSpaceSize_1 * 50 / rowHeight_1);\n\n              if (isMouseScrollDown_1) {\n                if (scrollTop + clientHeight < scrollHeight) {\n                  $xetable.scrollTo(scrollLeft, scrollTop + topSize);\n                  startMouseScroll_1(evnt);\n                  handleChecked_1(evnt);\n                } else {\n                  stopMouseScroll_1();\n                }\n              } else {\n                if (scrollTop) {\n                  $xetable.scrollTo(scrollLeft, scrollTop - topSize);\n                  startMouseScroll_1(evnt);\n                  handleChecked_1(evnt);\n                } else {\n                  stopMouseScroll_1();\n                }\n              }\n            }\n          }, 50);\n        };\n\n        addClass(el_1, 'drag--range');\n\n        document.onmousemove = function (evnt) {\n          evnt.preventDefault();\n          evnt.stopPropagation();\n          var clientY = evnt.clientY;\n          var boundingTop = getAbsolutePos(bodyWrapperElem_1).boundingTop; // 如果超过可视区，触发滚动\n\n          if (clientY < boundingTop) {\n            isMouseScrollDown_1 = false;\n            mouseScrollSpaceSize_1 = boundingTop - clientY;\n\n            if (!mouseScrollTimeout_1) {\n              startMouseScroll_1(evnt);\n            }\n          } else if (clientY > boundingTop + bodyWrapperElem_1.clientHeight) {\n            isMouseScrollDown_1 = true;\n            mouseScrollSpaceSize_1 = clientY - boundingTop - bodyWrapperElem_1.clientHeight;\n\n            if (!mouseScrollTimeout_1) {\n              startMouseScroll_1(evnt);\n            }\n          } else if (mouseScrollTimeout_1) {\n            stopMouseScroll_1();\n          }\n\n          handleChecked_1(evnt);\n        };\n\n        document.onmouseup = function (evnt) {\n          stopMouseScroll_1();\n          removeClass(el_1, 'drag--range');\n          checkboxRangeElem_1.removeAttribute('style');\n          document.onmousemove = domMousemove_1;\n          document.onmouseup = domMouseup_1;\n          triggerEvent_1('end', evnt);\n        };\n\n        triggerEvent_1('start', evnt);\n      }\n    };\n\n    var handleCellMousedownEvent = function (evnt, params) {\n      var editConfig = props.editConfig,\n          checkboxConfig = props.checkboxConfig,\n          mouseConfig = props.mouseConfig;\n      var checkboxOpts = computeCheckboxOpts.value;\n      var mouseOpts = computeMouseOpts.value;\n      var editOpts = computeEditOpts.value;\n\n      if (mouseConfig && mouseOpts.area && $xetable.handleCellAreaEvent) {\n        return $xetable.handleCellAreaEvent(evnt, params);\n      } else {\n        if (checkboxConfig && checkboxOpts.range) {\n          handleCheckboxRangeEvent(evnt, params);\n        }\n\n        if (mouseConfig && mouseOpts.selected) {\n          if (!editConfig || editOpts.mode === 'cell') {\n            $xetable.handleSelected(params, evnt);\n          }\n        }\n      }\n    };\n\n    var keyboardMethods = {\n      // 处理 Tab 键移动\n      moveTabSelected: function (args, isLeft, evnt) {\n        var editConfig = props.editConfig;\n        var afterFullData = internalData.afterFullData,\n            visibleColumn = internalData.visibleColumn;\n        var editOpts = computeEditOpts.value;\n        var targetRow;\n        var targetRowIndex;\n        var targetColumnIndex;\n        var params = Object.assign({}, args);\n\n        var _rowIndex = $xetable.getVTRowIndex(params.row);\n\n        var _columnIndex = $xetable.getVTColumnIndex(params.column);\n\n        evnt.preventDefault();\n\n        if (isLeft) {\n          // 向左\n          if (_columnIndex <= 0) {\n            // 如果已经是第一列，则移动到上一行\n            if (_rowIndex > 0) {\n              targetRowIndex = _rowIndex - 1;\n              targetRow = afterFullData[targetRowIndex];\n              targetColumnIndex = visibleColumn.length - 1;\n            }\n          } else {\n            targetColumnIndex = _columnIndex - 1;\n          }\n        } else {\n          if (_columnIndex >= visibleColumn.length - 1) {\n            // 如果已经是第一列，则移动到上一行\n            if (_rowIndex < afterFullData.length - 1) {\n              targetRowIndex = _rowIndex + 1;\n              targetRow = afterFullData[targetRowIndex];\n              targetColumnIndex = 0;\n            }\n          } else {\n            targetColumnIndex = _columnIndex + 1;\n          }\n        }\n\n        var targetColumn = visibleColumn[targetColumnIndex];\n\n        if (targetColumn) {\n          if (targetRow) {\n            params.rowIndex = targetRowIndex;\n            params.row = targetRow;\n          } else {\n            params.rowIndex = _rowIndex;\n          }\n\n          params.columnIndex = targetColumnIndex;\n          params.column = targetColumn;\n          params.cell = $xetable.getCell(params.row, params.column);\n\n          if (editConfig) {\n            if (editOpts.trigger === 'click' || editOpts.trigger === 'dblclick') {\n              if (editOpts.mode === 'row') {\n                $xetable.handleActived(params, evnt);\n              } else {\n                $xetable.scrollToRow(params.row, params.column).then(function () {\n                  return $xetable.handleSelected(params, evnt);\n                });\n              }\n            }\n          } else {\n            $xetable.scrollToRow(params.row, params.column).then(function () {\n              return $xetable.handleSelected(params, evnt);\n            });\n          }\n        }\n      },\n      // 处理当前行方向键移动\n      moveCurrentRow: function (isUpArrow, isDwArrow, evnt) {\n        var treeConfig = props.treeConfig;\n        var currentRow = reactData.currentRow;\n        var afterFullData = internalData.afterFullData;\n        var treeOpts = computeTreeOpts.value;\n        var targetRow;\n        evnt.preventDefault();\n\n        if (currentRow) {\n          if (treeConfig) {\n            var _a = XEUtils.findTree(afterFullData, function (item) {\n              return item === currentRow;\n            }, treeOpts),\n                index = _a.index,\n                items = _a.items;\n\n            if (isUpArrow && index > 0) {\n              targetRow = items[index - 1];\n            } else if (isDwArrow && index < items.length - 1) {\n              targetRow = items[index + 1];\n            }\n          } else {\n            var _rowIndex = $xetable.getVTRowIndex(currentRow);\n\n            if (isUpArrow && _rowIndex > 0) {\n              targetRow = afterFullData[_rowIndex - 1];\n            } else if (isDwArrow && _rowIndex < afterFullData.length - 1) {\n              targetRow = afterFullData[_rowIndex + 1];\n            }\n          }\n        } else {\n          targetRow = afterFullData[0];\n        }\n\n        if (targetRow) {\n          var params_1 = {\n            $table: $xetable,\n            row: targetRow,\n            rowIndex: $xetable.getRowIndex(targetRow),\n            $rowIndex: $xetable.getVMRowIndex(targetRow)\n          };\n          $xetable.scrollToRow(targetRow).then(function () {\n            return $xetable.triggerCurrentRowEvent(evnt, params_1);\n          });\n        }\n      },\n      // 处理可编辑方向键移动\n      moveSelected: function (args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt) {\n        var afterFullData = internalData.afterFullData,\n            visibleColumn = internalData.visibleColumn;\n        var params = Object.assign({}, args);\n\n        var _rowIndex = $xetable.getVTRowIndex(params.row);\n\n        var _columnIndex = $xetable.getVTColumnIndex(params.column);\n\n        evnt.preventDefault();\n\n        if (isUpArrow && _rowIndex > 0) {\n          // 移动到上一行\n          params.rowIndex = _rowIndex - 1;\n          params.row = afterFullData[params.rowIndex];\n        } else if (isDwArrow && _rowIndex < afterFullData.length - 1) {\n          // 移动到下一行\n          params.rowIndex = _rowIndex + 1;\n          params.row = afterFullData[params.rowIndex];\n        } else if (isLeftArrow && _columnIndex) {\n          // 移动到左侧单元格\n          params.columnIndex = _columnIndex - 1;\n          params.column = visibleColumn[params.columnIndex];\n        } else if (isRightArrow && _columnIndex < visibleColumn.length - 1) {\n          // 移动到右侧单元格\n          params.columnIndex = _columnIndex + 1;\n          params.column = visibleColumn[params.columnIndex];\n        }\n\n        $xetable.scrollToRow(params.row, params.column).then(function () {\n          params.cell = $xetable.getCell(params.row, params.column);\n          $xetable.handleSelected(params, evnt);\n        });\n      },\n\n      /**\n       * 表头单元格按下事件\n       */\n      triggerHeaderCellMousedownEvent: function (evnt, params) {\n        var mouseConfig = props.mouseConfig;\n        var mouseOpts = computeMouseOpts.value;\n\n        if (mouseConfig && mouseOpts.area && $xetable.handleHeaderCellAreaEvent) {\n          var cell = evnt.currentTarget;\n          var triggerSort = getEventTargetNode(evnt, cell, 'vxe-cell--sort').flag;\n          var triggerFilter = getEventTargetNode(evnt, cell, 'vxe-cell--filter').flag;\n          $xetable.handleHeaderCellAreaEvent(evnt, Object.assign({\n            cell: cell,\n            triggerSort: triggerSort,\n            triggerFilter: triggerFilter\n          }, params));\n        }\n\n        $xetable.focus();\n\n        if ($xetable.closeMenu) {\n          $xetable.closeMenu();\n        }\n      },\n\n      /**\n       * 单元格按下事件\n       */\n      triggerCellMousedownEvent: function (evnt, params) {\n        var cell = evnt.currentTarget;\n        params.cell = cell;\n        handleCellMousedownEvent(evnt, params);\n        $xetable.focus();\n        $xetable.closeFilter();\n\n        if ($xetable.closeMenu) {\n          $xetable.closeMenu();\n        }\n      }\n    };\n    return keyboardMethods;\n  }\n};\nexport default tableKeyboardHook;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vxe-table/es/keyboard/src/hook.js"],"names":["XEUtils","browse","hasClass","getAbsolutePos","addClass","removeClass","getEventTargetNode","getTargetOffset","target","container","offsetTop","offsetLeft","triggerCheckboxLabel","firefox","checkboxLabelStyle","getComputedStyle","toNumber","paddingTop","paddingLeft","offsetParent","checkboxStyle","tableKeyboardHook","setupTable","$xetable","props","reactData","internalData","refElem","getRefMaps","_a","getComputeMaps","computeEditOpts","computeCheckboxOpts","computeMouseOpts","computeTreeOpts","getCheckboxRangeRows","params","targetTrElem","moveRange","countHeight","rangeRows","isDown","moveSize","Math","abs","offsetHeight","scrollYLoad","afterFullData","scrollYStore","_rowIndex","getVTRowIndex","row","slice","ceil","rowHeight","floor","siblingProp","rowNodeRest","getRowNode","push","item","handleCheckboxRangeEvent","evnt","column","cell","type","el_1","value","elemStore","disX_1","clientX","disY_1","clientY","bodyWrapperElem_1","fixed","checkboxRangeElem_1","querySelector","domMousemove_1","document","onmousemove","domMouseup_1","onmouseup","trElem_1","parentNode","selectRecords_1","getCheckboxRecords","lastRangeRows_1","marginSize_1","offsetRest","startTop_1","offsetY","startLeft_1","offsetX","startScrollTop_1","scrollTop","rowHeight_1","mouseScrollTimeout_1","isMouseScrollDown_1","mouseScrollSpaceSize_1","triggerEvent_1","dispatchEvent","records","reserves","getCheckboxReserveRecords","handleChecked_1","rangeHeight","rangeWidth","rangeTop","rangeLeft","min","scrollHeight","clientWidth","style","height","width","left","top","display","length","ctrlKey","forEach","handleSelectRow","indexOf","setAllCheckboxRow","setCheckboxRow","stopMouseScroll_1","clearTimeout","startMouseScroll_1","setTimeout","scrollLeft","clientHeight","topSize","scrollTo","preventDefault","stopPropagation","boundingTop","removeAttribute","handleCellMousedownEvent","editConfig","checkboxConfig","mouseConfig","checkboxOpts","mouseOpts","editOpts","area","handleCellAreaEvent","range","selected","mode","handleSelected","keyboardMethods","moveTabSelected","args","isLeft","visibleColumn","targetRow","targetRowIndex","targetColumnIndex","Object","assign","_columnIndex","getVTColumnIndex","targetColumn","rowIndex","columnIndex","getCell","trigger","handleActived","scrollToRow","then","moveCurrentRow","isUpArrow","isDwArrow","treeConfig","currentRow","treeOpts","findTree","index","items","params_1","$table","getRowIndex","$rowIndex","getVMRowIndex","triggerCurrentRowEvent","moveSelected","isLeftArrow","isRightArrow","triggerHeaderCellMousedownEvent","handleHeaderCellAreaEvent","currentTarget","triggerSort","flag","triggerFilter","focus","closeMenu","triggerCellMousedownEvent","closeFilter"],"mappings":"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","sourcesContent":["import XEUtils from 'xe-utils';\nimport { browse, hasClass, getAbsolutePos, addClass, removeClass, getEventTargetNode } from '../../tools/dom';\nfunction getTargetOffset(target, container) {\n    var offsetTop = 0;\n    var offsetLeft = 0;\n    var triggerCheckboxLabel = !browse.firefox && hasClass(target, 'vxe-checkbox--label');\n    if (triggerCheckboxLabel) {\n        var checkboxLabelStyle = getComputedStyle(target);\n        offsetTop -= XEUtils.toNumber(checkboxLabelStyle.paddingTop);\n        offsetLeft -= XEUtils.toNumber(checkboxLabelStyle.paddingLeft);\n    }\n    while (target && target !== container) {\n        offsetTop += target.offsetTop;\n        offsetLeft += target.offsetLeft;\n        target = target.offsetParent;\n        if (triggerCheckboxLabel) {\n            var checkboxStyle = getComputedStyle(target);\n            offsetTop -= XEUtils.toNumber(checkboxStyle.paddingTop);\n            offsetLeft -= XEUtils.toNumber(checkboxStyle.paddingLeft);\n        }\n    }\n    return { offsetTop: offsetTop, offsetLeft: offsetLeft };\n}\nvar tableKeyboardHook = {\n    setupTable: function ($xetable) {\n        var props = $xetable.props, reactData = $xetable.reactData, internalData = $xetable.internalData;\n        var refElem = $xetable.getRefMaps().refElem;\n        var _a = $xetable.getComputeMaps(), computeEditOpts = _a.computeEditOpts, computeCheckboxOpts = _a.computeCheckboxOpts, computeMouseOpts = _a.computeMouseOpts, computeTreeOpts = _a.computeTreeOpts;\n        function getCheckboxRangeRows(params, targetTrElem, moveRange) {\n            var countHeight = 0;\n            var rangeRows = [];\n            var isDown = moveRange > 0;\n            var moveSize = moveRange > 0 ? moveRange : (Math.abs(moveRange) + targetTrElem.offsetHeight);\n            var scrollYLoad = reactData.scrollYLoad;\n            var afterFullData = internalData.afterFullData, scrollYStore = internalData.scrollYStore;\n            if (scrollYLoad) {\n                var _rowIndex = $xetable.getVTRowIndex(params.row);\n                if (isDown) {\n                    rangeRows = afterFullData.slice(_rowIndex, _rowIndex + Math.ceil(moveSize / scrollYStore.rowHeight));\n                }\n                else {\n                    rangeRows = afterFullData.slice(_rowIndex - Math.floor(moveSize / scrollYStore.rowHeight) + 1, _rowIndex + 1);\n                }\n            }\n            else {\n                var siblingProp = isDown ? 'next' : 'previous';\n                while (targetTrElem && countHeight < moveSize) {\n                    var rowNodeRest = $xetable.getRowNode(targetTrElem);\n                    if (rowNodeRest) {\n                        rangeRows.push(rowNodeRest.item);\n                        countHeight += targetTrElem.offsetHeight;\n                        targetTrElem = targetTrElem[siblingProp + \"ElementSibling\"];\n                    }\n                }\n            }\n            return rangeRows;\n        }\n        var handleCheckboxRangeEvent = function (evnt, params) {\n            var column = params.column, cell = params.cell;\n            if (column.type === 'checkbox') {\n                var el_1 = refElem.value;\n                var elemStore = internalData.elemStore;\n                var disX_1 = evnt.clientX;\n                var disY_1 = evnt.clientY;\n                var bodyWrapperElem_1 = elemStore[(column.fixed || 'main') + \"-body-wrapper\"] || elemStore['main-body-wrapper'];\n                var checkboxRangeElem_1 = bodyWrapperElem_1.querySelector('.vxe-table--checkbox-range');\n                var domMousemove_1 = document.onmousemove;\n                var domMouseup_1 = document.onmouseup;\n                var trElem_1 = cell.parentNode;\n                var selectRecords_1 = $xetable.getCheckboxRecords();\n                var lastRangeRows_1 = [];\n                var marginSize_1 = 1;\n                var offsetRest = getTargetOffset(evnt.target, bodyWrapperElem_1);\n                var startTop_1 = offsetRest.offsetTop + evnt.offsetY;\n                var startLeft_1 = offsetRest.offsetLeft + evnt.offsetX;\n                var startScrollTop_1 = bodyWrapperElem_1.scrollTop;\n                var rowHeight_1 = trElem_1.offsetHeight;\n                var mouseScrollTimeout_1 = null;\n                var isMouseScrollDown_1 = false;\n                var mouseScrollSpaceSize_1 = 1;\n                var triggerEvent_1 = function (type, evnt) {\n                    $xetable.dispatchEvent(\"checkbox-range-\" + type, { records: $xetable.getCheckboxRecords(), reserves: $xetable.getCheckboxReserveRecords() }, evnt);\n                };\n                var handleChecked_1 = function (evnt) {\n                    var clientX = evnt.clientX, clientY = evnt.clientY;\n                    var offsetLeft = clientX - disX_1;\n                    var offsetTop = clientY - disY_1 + (bodyWrapperElem_1.scrollTop - startScrollTop_1);\n                    var rangeHeight = Math.abs(offsetTop);\n                    var rangeWidth = Math.abs(offsetLeft);\n                    var rangeTop = startTop_1;\n                    var rangeLeft = startLeft_1;\n                    if (offsetTop < marginSize_1) {\n                        // 向上\n                        rangeTop += offsetTop;\n                        if (rangeTop < marginSize_1) {\n                            rangeTop = marginSize_1;\n                            rangeHeight = startTop_1;\n                        }\n                    }\n                    else {\n                        // 向下\n                        rangeHeight = Math.min(rangeHeight, bodyWrapperElem_1.scrollHeight - startTop_1 - marginSize_1);\n                    }\n                    if (offsetLeft < marginSize_1) {\n                        // 向左\n                        rangeLeft += offsetLeft;\n                        if (rangeWidth > startLeft_1) {\n                            rangeLeft = marginSize_1;\n                            rangeWidth = startLeft_1;\n                        }\n                    }\n                    else {\n                        // 向右\n                        rangeWidth = Math.min(rangeWidth, bodyWrapperElem_1.clientWidth - startLeft_1 - marginSize_1);\n                    }\n                    checkboxRangeElem_1.style.height = rangeHeight + \"px\";\n                    checkboxRangeElem_1.style.width = rangeWidth + \"px\";\n                    checkboxRangeElem_1.style.left = rangeLeft + \"px\";\n                    checkboxRangeElem_1.style.top = rangeTop + \"px\";\n                    checkboxRangeElem_1.style.display = 'block';\n                    var rangeRows = getCheckboxRangeRows(params, trElem_1, offsetTop < marginSize_1 ? -rangeHeight : rangeHeight);\n                    // 至少滑动 10px 才能有效匹配\n                    if (rangeHeight > 10 && rangeRows.length !== lastRangeRows_1.length) {\n                        lastRangeRows_1 = rangeRows;\n                        if (evnt.ctrlKey) {\n                            rangeRows.forEach(function (row) {\n                                $xetable.handleSelectRow({ row: row }, selectRecords_1.indexOf(row) === -1);\n                            });\n                        }\n                        else {\n                            $xetable.setAllCheckboxRow(false);\n                            $xetable.setCheckboxRow(rangeRows, true);\n                        }\n                        triggerEvent_1('change', evnt);\n                    }\n                };\n                // 停止鼠标滚动\n                var stopMouseScroll_1 = function () {\n                    clearTimeout(mouseScrollTimeout_1);\n                    mouseScrollTimeout_1 = null;\n                };\n                // 开始鼠标滚动\n                var startMouseScroll_1 = function (evnt) {\n                    stopMouseScroll_1();\n                    mouseScrollTimeout_1 = setTimeout(function () {\n                        if (mouseScrollTimeout_1) {\n                            var scrollLeft = bodyWrapperElem_1.scrollLeft, scrollTop = bodyWrapperElem_1.scrollTop, clientHeight = bodyWrapperElem_1.clientHeight, scrollHeight = bodyWrapperElem_1.scrollHeight;\n                            var topSize = Math.ceil(mouseScrollSpaceSize_1 * 50 / rowHeight_1);\n                            if (isMouseScrollDown_1) {\n                                if (scrollTop + clientHeight < scrollHeight) {\n                                    $xetable.scrollTo(scrollLeft, scrollTop + topSize);\n                                    startMouseScroll_1(evnt);\n                                    handleChecked_1(evnt);\n                                }\n                                else {\n                                    stopMouseScroll_1();\n                                }\n                            }\n                            else {\n                                if (scrollTop) {\n                                    $xetable.scrollTo(scrollLeft, scrollTop - topSize);\n                                    startMouseScroll_1(evnt);\n                                    handleChecked_1(evnt);\n                                }\n                                else {\n                                    stopMouseScroll_1();\n                                }\n                            }\n                        }\n                    }, 50);\n                };\n                addClass(el_1, 'drag--range');\n                document.onmousemove = function (evnt) {\n                    evnt.preventDefault();\n                    evnt.stopPropagation();\n                    var clientY = evnt.clientY;\n                    var boundingTop = getAbsolutePos(bodyWrapperElem_1).boundingTop;\n                    // 如果超过可视区，触发滚动\n                    if (clientY < boundingTop) {\n                        isMouseScrollDown_1 = false;\n                        mouseScrollSpaceSize_1 = boundingTop - clientY;\n                        if (!mouseScrollTimeout_1) {\n                            startMouseScroll_1(evnt);\n                        }\n                    }\n                    else if (clientY > boundingTop + bodyWrapperElem_1.clientHeight) {\n                        isMouseScrollDown_1 = true;\n                        mouseScrollSpaceSize_1 = clientY - boundingTop - bodyWrapperElem_1.clientHeight;\n                        if (!mouseScrollTimeout_1) {\n                            startMouseScroll_1(evnt);\n                        }\n                    }\n                    else if (mouseScrollTimeout_1) {\n                        stopMouseScroll_1();\n                    }\n                    handleChecked_1(evnt);\n                };\n                document.onmouseup = function (evnt) {\n                    stopMouseScroll_1();\n                    removeClass(el_1, 'drag--range');\n                    checkboxRangeElem_1.removeAttribute('style');\n                    document.onmousemove = domMousemove_1;\n                    document.onmouseup = domMouseup_1;\n                    triggerEvent_1('end', evnt);\n                };\n                triggerEvent_1('start', evnt);\n            }\n        };\n        var handleCellMousedownEvent = function (evnt, params) {\n            var editConfig = props.editConfig, checkboxConfig = props.checkboxConfig, mouseConfig = props.mouseConfig;\n            var checkboxOpts = computeCheckboxOpts.value;\n            var mouseOpts = computeMouseOpts.value;\n            var editOpts = computeEditOpts.value;\n            if (mouseConfig && mouseOpts.area && $xetable.handleCellAreaEvent) {\n                return $xetable.handleCellAreaEvent(evnt, params);\n            }\n            else {\n                if (checkboxConfig && checkboxOpts.range) {\n                    handleCheckboxRangeEvent(evnt, params);\n                }\n                if (mouseConfig && mouseOpts.selected) {\n                    if (!editConfig || editOpts.mode === 'cell') {\n                        $xetable.handleSelected(params, evnt);\n                    }\n                }\n            }\n        };\n        var keyboardMethods = {\n            // 处理 Tab 键移动\n            moveTabSelected: function (args, isLeft, evnt) {\n                var editConfig = props.editConfig;\n                var afterFullData = internalData.afterFullData, visibleColumn = internalData.visibleColumn;\n                var editOpts = computeEditOpts.value;\n                var targetRow;\n                var targetRowIndex;\n                var targetColumnIndex;\n                var params = Object.assign({}, args);\n                var _rowIndex = $xetable.getVTRowIndex(params.row);\n                var _columnIndex = $xetable.getVTColumnIndex(params.column);\n                evnt.preventDefault();\n                if (isLeft) {\n                    // 向左\n                    if (_columnIndex <= 0) {\n                        // 如果已经是第一列，则移动到上一行\n                        if (_rowIndex > 0) {\n                            targetRowIndex = _rowIndex - 1;\n                            targetRow = afterFullData[targetRowIndex];\n                            targetColumnIndex = visibleColumn.length - 1;\n                        }\n                    }\n                    else {\n                        targetColumnIndex = _columnIndex - 1;\n                    }\n                }\n                else {\n                    if (_columnIndex >= visibleColumn.length - 1) {\n                        // 如果已经是第一列，则移动到上一行\n                        if (_rowIndex < afterFullData.length - 1) {\n                            targetRowIndex = _rowIndex + 1;\n                            targetRow = afterFullData[targetRowIndex];\n                            targetColumnIndex = 0;\n                        }\n                    }\n                    else {\n                        targetColumnIndex = _columnIndex + 1;\n                    }\n                }\n                var targetColumn = visibleColumn[targetColumnIndex];\n                if (targetColumn) {\n                    if (targetRow) {\n                        params.rowIndex = targetRowIndex;\n                        params.row = targetRow;\n                    }\n                    else {\n                        params.rowIndex = _rowIndex;\n                    }\n                    params.columnIndex = targetColumnIndex;\n                    params.column = targetColumn;\n                    params.cell = $xetable.getCell(params.row, params.column);\n                    if (editConfig) {\n                        if (editOpts.trigger === 'click' || editOpts.trigger === 'dblclick') {\n                            if (editOpts.mode === 'row') {\n                                $xetable.handleActived(params, evnt);\n                            }\n                            else {\n                                $xetable.scrollToRow(params.row, params.column)\n                                    .then(function () { return $xetable.handleSelected(params, evnt); });\n                            }\n                        }\n                    }\n                    else {\n                        $xetable.scrollToRow(params.row, params.column)\n                            .then(function () { return $xetable.handleSelected(params, evnt); });\n                    }\n                }\n            },\n            // 处理当前行方向键移动\n            moveCurrentRow: function (isUpArrow, isDwArrow, evnt) {\n                var treeConfig = props.treeConfig;\n                var currentRow = reactData.currentRow;\n                var afterFullData = internalData.afterFullData;\n                var treeOpts = computeTreeOpts.value;\n                var targetRow;\n                evnt.preventDefault();\n                if (currentRow) {\n                    if (treeConfig) {\n                        var _a = XEUtils.findTree(afterFullData, function (item) { return item === currentRow; }, treeOpts), index = _a.index, items = _a.items;\n                        if (isUpArrow && index > 0) {\n                            targetRow = items[index - 1];\n                        }\n                        else if (isDwArrow && index < items.length - 1) {\n                            targetRow = items[index + 1];\n                        }\n                    }\n                    else {\n                        var _rowIndex = $xetable.getVTRowIndex(currentRow);\n                        if (isUpArrow && _rowIndex > 0) {\n                            targetRow = afterFullData[_rowIndex - 1];\n                        }\n                        else if (isDwArrow && _rowIndex < afterFullData.length - 1) {\n                            targetRow = afterFullData[_rowIndex + 1];\n                        }\n                    }\n                }\n                else {\n                    targetRow = afterFullData[0];\n                }\n                if (targetRow) {\n                    var params_1 = {\n                        $table: $xetable,\n                        row: targetRow,\n                        rowIndex: $xetable.getRowIndex(targetRow),\n                        $rowIndex: $xetable.getVMRowIndex(targetRow)\n                    };\n                    $xetable.scrollToRow(targetRow)\n                        .then(function () { return $xetable.triggerCurrentRowEvent(evnt, params_1); });\n                }\n            },\n            // 处理可编辑方向键移动\n            moveSelected: function (args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt) {\n                var afterFullData = internalData.afterFullData, visibleColumn = internalData.visibleColumn;\n                var params = Object.assign({}, args);\n                var _rowIndex = $xetable.getVTRowIndex(params.row);\n                var _columnIndex = $xetable.getVTColumnIndex(params.column);\n                evnt.preventDefault();\n                if (isUpArrow && _rowIndex > 0) {\n                    // 移动到上一行\n                    params.rowIndex = _rowIndex - 1;\n                    params.row = afterFullData[params.rowIndex];\n                }\n                else if (isDwArrow && _rowIndex < afterFullData.length - 1) {\n                    // 移动到下一行\n                    params.rowIndex = _rowIndex + 1;\n                    params.row = afterFullData[params.rowIndex];\n                }\n                else if (isLeftArrow && _columnIndex) {\n                    // 移动到左侧单元格\n                    params.columnIndex = _columnIndex - 1;\n                    params.column = visibleColumn[params.columnIndex];\n                }\n                else if (isRightArrow && _columnIndex < visibleColumn.length - 1) {\n                    // 移动到右侧单元格\n                    params.columnIndex = _columnIndex + 1;\n                    params.column = visibleColumn[params.columnIndex];\n                }\n                $xetable.scrollToRow(params.row, params.column).then(function () {\n                    params.cell = $xetable.getCell(params.row, params.column);\n                    $xetable.handleSelected(params, evnt);\n                });\n            },\n            /**\n             * 表头单元格按下事件\n             */\n            triggerHeaderCellMousedownEvent: function (evnt, params) {\n                var mouseConfig = props.mouseConfig;\n                var mouseOpts = computeMouseOpts.value;\n                if (mouseConfig && mouseOpts.area && $xetable.handleHeaderCellAreaEvent) {\n                    var cell = evnt.currentTarget;\n                    var triggerSort = getEventTargetNode(evnt, cell, 'vxe-cell--sort').flag;\n                    var triggerFilter = getEventTargetNode(evnt, cell, 'vxe-cell--filter').flag;\n                    $xetable.handleHeaderCellAreaEvent(evnt, Object.assign({ cell: cell, triggerSort: triggerSort, triggerFilter: triggerFilter }, params));\n                }\n                $xetable.focus();\n                if ($xetable.closeMenu) {\n                    $xetable.closeMenu();\n                }\n            },\n            /**\n             * 单元格按下事件\n             */\n            triggerCellMousedownEvent: function (evnt, params) {\n                var cell = evnt.currentTarget;\n                params.cell = cell;\n                handleCellMousedownEvent(evnt, params);\n                $xetable.focus();\n                $xetable.closeFilter();\n                if ($xetable.closeMenu) {\n                    $xetable.closeMenu();\n                }\n            }\n        };\n        return keyboardMethods;\n    }\n};\nexport default tableKeyboardHook;\n"]},"metadata":{},"sourceType":"module"}