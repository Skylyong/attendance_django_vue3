{"ast":null,"code":"var helperCreateTreeFunc = require('./helperCreateTreeFunc');\n\nfunction findTreeItem(parent, obj, iterate, context, path, node, parseChildren, opts) {\n  if (obj) {\n    var item, index, len, paths, nodes, match;\n\n    for (index = 0, len = obj.length; index < len; index++) {\n      item = obj[index];\n      paths = path.concat(['' + index]);\n      nodes = node.concat([item]);\n\n      if (iterate.call(context, item, index, obj, paths, parent, nodes)) {\n        return {\n          index: index,\n          item: item,\n          path: paths,\n          items: obj,\n          parent: parent,\n          nodes: nodes\n        };\n      }\n\n      if (parseChildren && item) {\n        match = findTreeItem(item, item[parseChildren], iterate, context, paths.concat([parseChildren]), nodes, parseChildren, opts);\n\n        if (match) {\n          return match;\n        }\n      }\n    }\n  }\n}\n/**\r\n  * 从树结构中查找匹配第一条数据的键、值、路径\r\n  *\r\n  * @param {Object} obj 对象/数组\r\n  * @param {Function} iterate(item, index, items, path, parent, nodes) 回调\r\n  * @param {Object} options {children: 'children'}\r\n  * @param {Object} context 上下文\r\n  * @return {Object} { item, index, items, path, parent, nodes }\r\n  */\n\n\nvar findTree = helperCreateTreeFunc(findTreeItem);\nmodule.exports = findTree;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/xe-utils/findTree.js"],"names":["helperCreateTreeFunc","require","findTreeItem","parent","obj","iterate","context","path","node","parseChildren","opts","item","index","len","paths","nodes","match","length","concat","call","items","findTree","module","exports"],"mappings":"AAAA,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAAlC;;AAEA,SAASC,YAAT,CAAuBC,MAAvB,EAA+BC,GAA/B,EAAoCC,OAApC,EAA6CC,OAA7C,EAAsDC,IAAtD,EAA4DC,IAA5D,EAAkEC,aAAlE,EAAiFC,IAAjF,EAAuF;AACrF,MAAIN,GAAJ,EAAS;AACP,QAAIO,IAAJ,EAAUC,KAAV,EAAiBC,GAAjB,EAAsBC,KAAtB,EAA6BC,KAA7B,EAAoCC,KAApC;;AACA,SAAKJ,KAAK,GAAG,CAAR,EAAWC,GAAG,GAAGT,GAAG,CAACa,MAA1B,EAAkCL,KAAK,GAAGC,GAA1C,EAA+CD,KAAK,EAApD,EAAwD;AACtDD,MAAAA,IAAI,GAAGP,GAAG,CAACQ,KAAD,CAAV;AACAE,MAAAA,KAAK,GAAGP,IAAI,CAACW,MAAL,CAAY,CAAC,KAAKN,KAAN,CAAZ,CAAR;AACAG,MAAAA,KAAK,GAAGP,IAAI,CAACU,MAAL,CAAY,CAACP,IAAD,CAAZ,CAAR;;AACA,UAAIN,OAAO,CAACc,IAAR,CAAab,OAAb,EAAsBK,IAAtB,EAA4BC,KAA5B,EAAmCR,GAAnC,EAAwCU,KAAxC,EAA+CX,MAA/C,EAAuDY,KAAvD,CAAJ,EAAmE;AACjE,eAAO;AAAEH,UAAAA,KAAK,EAAEA,KAAT;AAAgBD,UAAAA,IAAI,EAAEA,IAAtB;AAA4BJ,UAAAA,IAAI,EAAEO,KAAlC;AAAyCM,UAAAA,KAAK,EAAEhB,GAAhD;AAAqDD,UAAAA,MAAM,EAAEA,MAA7D;AAAqEY,UAAAA,KAAK,EAAEA;AAA5E,SAAP;AACD;;AACD,UAAIN,aAAa,IAAIE,IAArB,EAA2B;AACzBK,QAAAA,KAAK,GAAGd,YAAY,CAACS,IAAD,EAAOA,IAAI,CAACF,aAAD,CAAX,EAA4BJ,OAA5B,EAAqCC,OAArC,EAA8CQ,KAAK,CAACI,MAAN,CAAa,CAACT,aAAD,CAAb,CAA9C,EAA6EM,KAA7E,EAAoFN,aAApF,EAAmGC,IAAnG,CAApB;;AACA,YAAIM,KAAJ,EAAW;AACT,iBAAOA,KAAP;AACD;AACF;AACF;AACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,QAAQ,GAAGrB,oBAAoB,CAACE,YAAD,CAAnC;AAEAoB,MAAM,CAACC,OAAP,GAAiBF,QAAjB","sourcesContent":["var helperCreateTreeFunc = require('./helperCreateTreeFunc')\r\n\r\nfunction findTreeItem (parent, obj, iterate, context, path, node, parseChildren, opts) {\r\n  if (obj) {\r\n    var item, index, len, paths, nodes, match\r\n    for (index = 0, len = obj.length; index < len; index++) {\r\n      item = obj[index]\r\n      paths = path.concat(['' + index])\r\n      nodes = node.concat([item])\r\n      if (iterate.call(context, item, index, obj, paths, parent, nodes)) {\r\n        return { index: index, item: item, path: paths, items: obj, parent: parent, nodes: nodes }\r\n      }\r\n      if (parseChildren && item) {\r\n        match = findTreeItem(item, item[parseChildren], iterate, context, paths.concat([parseChildren]), nodes, parseChildren, opts)\r\n        if (match) {\r\n          return match\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n  * 从树结构中查找匹配第一条数据的键、值、路径\r\n  *\r\n  * @param {Object} obj 对象/数组\r\n  * @param {Function} iterate(item, index, items, path, parent, nodes) 回调\r\n  * @param {Object} options {children: 'children'}\r\n  * @param {Object} context 上下文\r\n  * @return {Object} { item, index, items, path, parent, nodes }\r\n  */\r\nvar findTree = helperCreateTreeFunc(findTreeItem)\r\n\r\nmodule.exports = findTree\r\n"]},"metadata":{},"sourceType":"script"}