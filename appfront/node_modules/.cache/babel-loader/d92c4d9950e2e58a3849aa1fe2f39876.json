{"ast":null,"code":"var setupDefaults = require('./setupDefaults');\n\nvar map = require('./map');\n\nvar orderBy = require('./orderBy');\n\nvar clone = require('./clone');\n\nvar includes = require('./includes');\n\nvar each = require('./each');\n\nvar remove = require('./remove');\n\nvar assign = require('./assign');\n\nfunction strictTree(array, optChildren) {\n  each(array, function (item) {\n    if (item.children && !item.children.length) {\n      remove(item, optChildren);\n    }\n  });\n}\n/**\r\n  * 将一个带层级的数据列表转成树结构\r\n  *\r\n  * @param {Array} array 数组\r\n  * @param {Object} options {strict: false, parentKey: 'parentId', key: 'id', children: 'children', mapChildren: 'children', data: 'data'}\r\n  * @return {Array}\r\n  */\n\n\nfunction toArrayTree(array, options) {\n  var opts = assign({}, setupDefaults.treeOptions, options);\n  var optStrict = opts.strict;\n  var optKey = opts.key;\n  var optParentKey = opts.parentKey;\n  var optChildren = opts.children;\n  var optMapChildren = opts.mapChildren;\n  var optSortKey = opts.sortKey;\n  var optReverse = opts.reverse;\n  var optData = opts.data;\n  var result = [];\n  var treeMap = {};\n  var idList, id, treeData, parentId;\n\n  if (optSortKey) {\n    array = orderBy(clone(array), optSortKey);\n\n    if (optReverse) {\n      array = array.reverse();\n    }\n  }\n\n  idList = map(array, function (item) {\n    return item[optKey];\n  });\n  each(array, function (item) {\n    id = item[optKey];\n\n    if (optData) {\n      treeData = {};\n      treeData[optData] = item;\n    } else {\n      treeData = item;\n    }\n\n    parentId = item[optParentKey];\n    treeMap[id] = treeMap[id] || [];\n    treeMap[parentId] = treeMap[parentId] || [];\n    treeMap[parentId].push(treeData);\n    treeData[optKey] = id;\n    treeData[optParentKey] = parentId;\n    treeData[optChildren] = treeMap[id];\n\n    if (optMapChildren) {\n      treeData[optMapChildren] = treeMap[id];\n    }\n\n    if (!optStrict || optStrict && !parentId) {\n      if (!includes(idList, parentId)) {\n        result.push(treeData);\n      }\n    }\n  });\n\n  if (optStrict) {\n    strictTree(array, optChildren);\n  }\n\n  return result;\n}\n\nmodule.exports = toArrayTree;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/xe-utils/toArrayTree.js"],"names":["setupDefaults","require","map","orderBy","clone","includes","each","remove","assign","strictTree","array","optChildren","item","children","length","toArrayTree","options","opts","treeOptions","optStrict","strict","optKey","key","optParentKey","parentKey","optMapChildren","mapChildren","optSortKey","sortKey","optReverse","reverse","optData","data","result","treeMap","idList","id","treeData","parentId","push","module","exports"],"mappings":"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","sourcesContent":["var setupDefaults = require('./setupDefaults')\r\n\r\nvar map = require('./map')\r\nvar orderBy = require('./orderBy')\r\n\r\nvar clone = require('./clone')\r\nvar includes = require('./includes')\r\nvar each = require('./each')\r\nvar remove = require('./remove')\r\n\r\nvar assign = require('./assign')\r\n\r\nfunction strictTree (array, optChildren) {\r\n  each(array, function (item) {\r\n    if (item.children && !item.children.length) {\r\n      remove(item, optChildren)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n  * 将一个带层级的数据列表转成树结构\r\n  *\r\n  * @param {Array} array 数组\r\n  * @param {Object} options {strict: false, parentKey: 'parentId', key: 'id', children: 'children', mapChildren: 'children', data: 'data'}\r\n  * @return {Array}\r\n  */\r\nfunction toArrayTree (array, options) {\r\n  var opts = assign({}, setupDefaults.treeOptions, options)\r\n  var optStrict = opts.strict\r\n  var optKey = opts.key\r\n  var optParentKey = opts.parentKey\r\n  var optChildren = opts.children\r\n  var optMapChildren = opts.mapChildren\r\n  var optSortKey = opts.sortKey\r\n  var optReverse = opts.reverse\r\n  var optData = opts.data\r\n  var result = []\r\n  var treeMap = {}\r\n  var idList, id, treeData, parentId\r\n\r\n  if (optSortKey) {\r\n    array = orderBy(clone(array), optSortKey)\r\n    if (optReverse) {\r\n      array = array.reverse()\r\n    }\r\n  }\r\n\r\n  idList = map(array, function (item) {\r\n    return item[optKey]\r\n  })\r\n\r\n  each(array, function (item) {\r\n    id = item[optKey]\r\n\r\n    if (optData) {\r\n      treeData = {}\r\n      treeData[optData] = item\r\n    } else {\r\n      treeData = item\r\n    }\r\n\r\n    parentId = item[optParentKey]\r\n    treeMap[id] = treeMap[id] || []\r\n    treeMap[parentId] = treeMap[parentId] || []\r\n    treeMap[parentId].push(treeData)\r\n    treeData[optKey] = id\r\n    treeData[optParentKey] = parentId\r\n    treeData[optChildren] = treeMap[id]\r\n    if (optMapChildren) {\r\n      treeData[optMapChildren] = treeMap[id]\r\n    }\r\n\r\n    if (!optStrict || (optStrict && !parentId)) {\r\n      if (!includes(idList, parentId)) {\r\n        result.push(treeData)\r\n      }\r\n    }\r\n  })\r\n\r\n  if (optStrict) {\r\n    strictTree(array, optChildren)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nmodule.exports = toArrayTree\r\n"]},"metadata":{},"sourceType":"script"}