{"ast":null,"code":"var helperStringRepeat = require('./helperStringRepeat');\n\nvar helperNumberOffsetPoint = require('./helperNumberOffsetPoint');\n/**\r\n * 数值转字符串，科学计数转字符串\r\n * @param { Number } num 数值\r\n *\r\n * @return {Number}\r\n */\n\n\nfunction toNumberString(num) {\n  var rest = '' + num;\n  var scienceMatchs = rest.match(/^([-+]?)((\\d+)|((\\d+)?[.](\\d+)?))e([-+]{1})([0-9]+)$/);\n\n  if (scienceMatchs) {\n    var isNegative = num < 0;\n    var absFlag = isNegative ? '-' : '';\n    var intNumStr = scienceMatchs[3] || '';\n    var dIntNumStr = scienceMatchs[5] || '';\n    var dFloatNumStr = scienceMatchs[6] || '';\n    var sciencFlag = scienceMatchs[7];\n    var scienceNumStr = scienceMatchs[8];\n    var floatOffsetIndex = scienceNumStr - dFloatNumStr.length;\n    var intOffsetIndex = scienceNumStr - intNumStr.length;\n    var dIntOffsetIndex = scienceNumStr - dIntNumStr.length;\n\n    if (sciencFlag === '+') {\n      if (intNumStr) {\n        return absFlag + intNumStr + helperStringRepeat('0', scienceNumStr);\n      }\n\n      if (floatOffsetIndex > 0) {\n        return absFlag + dIntNumStr + dFloatNumStr + helperStringRepeat('0', floatOffsetIndex);\n      }\n\n      return absFlag + dIntNumStr + helperNumberOffsetPoint(dFloatNumStr, scienceNumStr);\n    }\n\n    if (intNumStr) {\n      if (intOffsetIndex > 0) {\n        return absFlag + '0.' + helperStringRepeat('0', Math.abs(intOffsetIndex)) + intNumStr;\n      }\n\n      return absFlag + helperNumberOffsetPoint(intNumStr, intOffsetIndex);\n    }\n\n    if (dIntOffsetIndex > 0) {\n      return absFlag + '0.' + helperStringRepeat('0', Math.abs(dIntOffsetIndex)) + dIntNumStr + dFloatNumStr;\n    }\n\n    return absFlag + helperNumberOffsetPoint(dIntNumStr, dIntOffsetIndex) + dFloatNumStr;\n  }\n\n  return rest;\n}\n\nmodule.exports = toNumberString;","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/xe-utils/toNumberString.js"],"names":["helperStringRepeat","require","helperNumberOffsetPoint","toNumberString","num","rest","scienceMatchs","match","isNegative","absFlag","intNumStr","dIntNumStr","dFloatNumStr","sciencFlag","scienceNumStr","floatOffsetIndex","length","intOffsetIndex","dIntOffsetIndex","Math","abs","module","exports"],"mappings":"AAAA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,sBAAD,CAAhC;;AACA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,2BAAD,CAArC;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,MAAIC,IAAI,GAAG,KAAKD,GAAhB;AACA,MAAIE,aAAa,GAAGD,IAAI,CAACE,KAAL,CAAW,sDAAX,CAApB;;AACA,MAAID,aAAJ,EAAmB;AACjB,QAAIE,UAAU,GAAGJ,GAAG,GAAG,CAAvB;AACA,QAAIK,OAAO,GAAGD,UAAU,GAAG,GAAH,GAAS,EAAjC;AACA,QAAIE,SAAS,GAAGJ,aAAa,CAAC,CAAD,CAAb,IAAoB,EAApC;AACA,QAAIK,UAAU,GAAGL,aAAa,CAAC,CAAD,CAAb,IAAoB,EAArC;AACA,QAAIM,YAAY,GAAGN,aAAa,CAAC,CAAD,CAAb,IAAoB,EAAvC;AACA,QAAIO,UAAU,GAAGP,aAAa,CAAC,CAAD,CAA9B;AACA,QAAIQ,aAAa,GAAGR,aAAa,CAAC,CAAD,CAAjC;AACA,QAAIS,gBAAgB,GAAGD,aAAa,GAAGF,YAAY,CAACI,MAApD;AACA,QAAIC,cAAc,GAAGH,aAAa,GAAGJ,SAAS,CAACM,MAA/C;AACA,QAAIE,eAAe,GAAGJ,aAAa,GAAGH,UAAU,CAACK,MAAjD;;AACA,QAAIH,UAAU,KAAK,GAAnB,EAAwB;AACtB,UAAIH,SAAJ,EAAe;AACb,eAAOD,OAAO,GAAGC,SAAV,GAAsBV,kBAAkB,CAAC,GAAD,EAAMc,aAAN,CAA/C;AACD;;AACD,UAAIC,gBAAgB,GAAG,CAAvB,EAA0B;AACxB,eAAON,OAAO,GAAGE,UAAV,GAAuBC,YAAvB,GAAsCZ,kBAAkB,CAAC,GAAD,EAAMe,gBAAN,CAA/D;AACD;;AACD,aAAON,OAAO,GAAGE,UAAV,GAAuBT,uBAAuB,CAACU,YAAD,EAAeE,aAAf,CAArD;AACD;;AACD,QAAIJ,SAAJ,EAAe;AACb,UAAIO,cAAc,GAAG,CAArB,EAAwB;AACtB,eAAOR,OAAO,GAAG,IAAV,GAAiBT,kBAAkB,CAAC,GAAD,EAAMmB,IAAI,CAACC,GAAL,CAASH,cAAT,CAAN,CAAnC,GAAqEP,SAA5E;AACD;;AACD,aAAOD,OAAO,GAAGP,uBAAuB,CAACQ,SAAD,EAAYO,cAAZ,CAAxC;AACD;;AACD,QAAIC,eAAe,GAAG,CAAtB,EAAyB;AACvB,aAAOT,OAAO,GAAG,IAAV,GAAiBT,kBAAkB,CAAC,GAAD,EAAMmB,IAAI,CAACC,GAAL,CAASF,eAAT,CAAN,CAAnC,GAAsEP,UAAtE,GAAmFC,YAA1F;AACD;;AACD,WAAOH,OAAO,GAAGP,uBAAuB,CAACS,UAAD,EAAaO,eAAb,CAAjC,GAAiEN,YAAxE;AACD;;AACD,SAAOP,IAAP;AACD;;AAEDgB,MAAM,CAACC,OAAP,GAAiBnB,cAAjB","sourcesContent":["var helperStringRepeat = require('./helperStringRepeat')\r\nvar helperNumberOffsetPoint = require('./helperNumberOffsetPoint')\r\n\r\n/**\r\n * 数值转字符串，科学计数转字符串\r\n * @param { Number } num 数值\r\n *\r\n * @return {Number}\r\n */\r\nfunction toNumberString(num) {\r\n  var rest = '' + num\r\n  var scienceMatchs = rest.match(/^([-+]?)((\\d+)|((\\d+)?[.](\\d+)?))e([-+]{1})([0-9]+)$/)\r\n  if (scienceMatchs) {\r\n    var isNegative = num < 0\r\n    var absFlag = isNegative ? '-' : ''\r\n    var intNumStr = scienceMatchs[3] || ''\r\n    var dIntNumStr = scienceMatchs[5] || ''\r\n    var dFloatNumStr = scienceMatchs[6] || ''\r\n    var sciencFlag = scienceMatchs[7]\r\n    var scienceNumStr = scienceMatchs[8]\r\n    var floatOffsetIndex = scienceNumStr - dFloatNumStr.length\r\n    var intOffsetIndex = scienceNumStr - intNumStr.length\r\n    var dIntOffsetIndex = scienceNumStr - dIntNumStr.length\r\n    if (sciencFlag === '+') {\r\n      if (intNumStr) {\r\n        return absFlag + intNumStr + helperStringRepeat('0', scienceNumStr)\r\n      }\r\n      if (floatOffsetIndex > 0) {\r\n        return absFlag + dIntNumStr + dFloatNumStr + helperStringRepeat('0', floatOffsetIndex)\r\n      }\r\n      return absFlag + dIntNumStr + helperNumberOffsetPoint(dFloatNumStr, scienceNumStr)\r\n    }\r\n    if (intNumStr) {\r\n      if (intOffsetIndex > 0) {\r\n        return absFlag + '0.' + helperStringRepeat('0', Math.abs(intOffsetIndex)) + intNumStr\r\n      }\r\n      return absFlag + helperNumberOffsetPoint(intNumStr, intOffsetIndex)\r\n    }\r\n    if (dIntOffsetIndex > 0) {\r\n      return absFlag + '0.' + helperStringRepeat('0', Math.abs(dIntOffsetIndex)) + dIntNumStr + dFloatNumStr\r\n    }\r\n    return absFlag + helperNumberOffsetPoint(dIntNumStr, dIntOffsetIndex) + dFloatNumStr\r\n  }\r\n  return rest\r\n}\r\n\r\nmodule.exports = toNumberString\r\n"]},"metadata":{},"sourceType":"script"}