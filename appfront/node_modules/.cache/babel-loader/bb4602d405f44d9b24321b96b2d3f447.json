{"ast":null,"code":"import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { ref, watch, computed, reactive, nextTick, onMounted, defineComponent } from \"vue\";\nimport { deepClone } from \"../utils/deep-clone\";\nimport { pick, extend, makeArrayProp, makeNumericProp, createNamespace } from \"../utils\";\nimport { pickerSharedProps } from \"../picker/Picker\";\nimport { useExpose } from \"../composables/use-expose\";\nimport { Picker } from \"../picker\";\nconst [name, bem] = createNamespace(\"area\");\nconst EMPTY_CODE = \"000000\";\nconst INHERIT_SLOTS = [\"title\", \"cancel\", \"confirm\", \"toolbar\", \"columns-top\", \"columns-bottom\"];\nconst INHERIT_PROPS = [\"title\", \"loading\", \"readonly\", \"itemHeight\", \"swipeDuration\", \"visibleItemCount\", \"cancelButtonText\", \"confirmButtonText\"];\n\nconst isOverseaCode = code => code[0] === \"9\";\n\nconst areaProps = extend({}, pickerSharedProps, {\n  value: String,\n  columnsNum: makeNumericProp(3),\n  columnsPlaceholder: makeArrayProp(),\n  areaList: {\n    type: Object,\n    default: () => ({})\n  },\n  isOverseaCode: {\n    type: Function,\n    default: isOverseaCode\n  }\n});\nvar stdin_default = defineComponent({\n  name,\n  props: areaProps,\n  emits: [\"change\", \"confirm\", \"cancel\"],\n\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const pickerRef = ref();\n    const state = reactive({\n      code: props.value,\n      columns: [{\n        values: []\n      }, {\n        values: []\n      }, {\n        values: []\n      }]\n    });\n    const areaList = computed(() => {\n      const {\n        areaList: areaList2\n      } = props;\n      return {\n        province: areaList2.province_list || {},\n        city: areaList2.city_list || {},\n        county: areaList2.county_list || {}\n      };\n    });\n    const placeholderMap = computed(() => {\n      const {\n        columnsPlaceholder\n      } = props;\n      return {\n        province: columnsPlaceholder[0] || \"\",\n        city: columnsPlaceholder[1] || \"\",\n        county: columnsPlaceholder[2] || \"\"\n      };\n    });\n\n    const getDefaultCode = () => {\n      if (props.columnsPlaceholder.length) {\n        return EMPTY_CODE;\n      }\n\n      const {\n        county,\n        city\n      } = areaList.value;\n      const countyCodes = Object.keys(county);\n\n      if (countyCodes[0]) {\n        return countyCodes[0];\n      }\n\n      const cityCodes = Object.keys(city);\n\n      if (cityCodes[0]) {\n        return cityCodes[0];\n      }\n\n      return \"\";\n    };\n\n    const getColumnValues = (type, code) => {\n      let column = [];\n\n      if (type !== \"province\" && !code) {\n        return column;\n      }\n\n      const list = areaList.value[type];\n      column = Object.keys(list).map(listCode => ({\n        code: listCode,\n        name: list[listCode]\n      }));\n\n      if (code) {\n        if (type === \"city\" && props.isOverseaCode(code)) {\n          code = \"9\";\n        }\n\n        column = column.filter(item => item.code.indexOf(code) === 0);\n      }\n\n      if (placeholderMap.value[type] && column.length) {\n        let codeFill = \"\";\n\n        if (type === \"city\") {\n          codeFill = EMPTY_CODE.slice(2, 4);\n        } else if (type === \"county\") {\n          codeFill = EMPTY_CODE.slice(4, 6);\n        }\n\n        column.unshift({\n          code: code + codeFill,\n          name: placeholderMap.value[type]\n        });\n      }\n\n      return column;\n    };\n\n    const getIndex = (type, code) => {\n      let compareNum = code.length;\n\n      if (type === \"province\") {\n        compareNum = props.isOverseaCode(code) ? 1 : 2;\n      }\n\n      if (type === \"city\") {\n        compareNum = 4;\n      }\n\n      code = code.slice(0, compareNum);\n      const list = getColumnValues(type, compareNum > 2 ? code.slice(0, compareNum - 2) : \"\");\n\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].code.slice(0, compareNum) === code) {\n          return i;\n        }\n      }\n\n      return 0;\n    };\n\n    const setValues = () => {\n      const picker = pickerRef.value;\n\n      if (!picker) {\n        return;\n      }\n\n      let code = state.code || getDefaultCode();\n      const province = getColumnValues(\"province\");\n      const city = getColumnValues(\"city\", code.slice(0, 2));\n      picker.setColumnValues(0, province);\n      picker.setColumnValues(1, city);\n\n      if (city.length && code.slice(2, 4) === \"00\" && !props.isOverseaCode(code)) {\n        [{\n          code\n        }] = city;\n      }\n\n      picker.setColumnValues(2, getColumnValues(\"county\", code.slice(0, 4)));\n      picker.setIndexes([getIndex(\"province\", code), getIndex(\"city\", code), getIndex(\"county\", code)]);\n    };\n\n    const parseValues = values => values.map((value, index) => {\n      if (value) {\n        value = deepClone(value);\n\n        if (!value.code || value.name === props.columnsPlaceholder[index]) {\n          value.code = \"\";\n          value.name = \"\";\n        }\n      }\n\n      return value;\n    });\n\n    const getValues = () => {\n      if (pickerRef.value) {\n        const values = pickerRef.value.getValues().filter(Boolean);\n        return parseValues(values);\n      }\n\n      return [];\n    };\n\n    const getArea = () => {\n      const values = getValues();\n      const area = {\n        code: \"\",\n        country: \"\",\n        province: \"\",\n        city: \"\",\n        county: \"\"\n      };\n\n      if (!values.length) {\n        return area;\n      }\n\n      const names = values.map(item => item.name);\n      const validValues = values.filter(value => value.code);\n      area.code = validValues.length ? validValues[validValues.length - 1].code : \"\";\n\n      if (props.isOverseaCode(area.code)) {\n        area.country = names[1] || \"\";\n        area.province = names[2] || \"\";\n      } else {\n        area.province = names[0] || \"\";\n        area.city = names[1] || \"\";\n        area.county = names[2] || \"\";\n      }\n\n      return area;\n    };\n\n    const reset = (newCode = \"\") => {\n      state.code = newCode;\n      setValues();\n    };\n\n    const onChange = (values, index) => {\n      state.code = values[index].code;\n      setValues();\n\n      if (pickerRef.value) {\n        const parsedValues = parseValues(pickerRef.value.getValues());\n        emit(\"change\", parsedValues, index);\n      }\n    };\n\n    const onConfirm = (values, index) => {\n      setValues();\n      emit(\"confirm\", parseValues(values), index);\n    };\n\n    const onCancel = (...args) => emit(\"cancel\", ...args);\n\n    onMounted(setValues);\n    watch(() => props.value, value => {\n      state.code = value;\n      setValues();\n    });\n    watch(() => props.areaList, setValues, {\n      deep: true\n    });\n    watch(() => props.columnsNum, () => {\n      nextTick(setValues);\n    });\n    useExpose({\n      reset,\n      getArea,\n      getValues\n    });\n    return () => {\n      const columns = state.columns.slice(0, +props.columnsNum);\n      return _createVNode(Picker, _mergeProps({\n        \"ref\": pickerRef,\n        \"class\": bem(),\n        \"columns\": columns,\n        \"columnsFieldNames\": {\n          text: \"name\"\n        },\n        \"onChange\": onChange,\n        \"onCancel\": onCancel,\n        \"onConfirm\": onConfirm\n      }, pick(props, INHERIT_PROPS)), pick(slots, INHERIT_SLOTS));\n    };\n  }\n\n});\nexport { stdin_default as default };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/area/Area.js"],"names":["createVNode","_createVNode","mergeProps","_mergeProps","ref","watch","computed","reactive","nextTick","onMounted","defineComponent","deepClone","pick","extend","makeArrayProp","makeNumericProp","createNamespace","pickerSharedProps","useExpose","Picker","name","bem","EMPTY_CODE","INHERIT_SLOTS","INHERIT_PROPS","isOverseaCode","code","areaProps","value","String","columnsNum","columnsPlaceholder","areaList","type","Object","default","Function","stdin_default","props","emits","setup","emit","slots","pickerRef","state","columns","values","areaList2","province","province_list","city","city_list","county","county_list","placeholderMap","getDefaultCode","length","countyCodes","keys","cityCodes","getColumnValues","column","list","map","listCode","filter","item","indexOf","codeFill","slice","unshift","getIndex","compareNum","i","setValues","picker","setColumnValues","setIndexes","parseValues","index","getValues","Boolean","getArea","area","country","names","validValues","reset","newCode","onChange","parsedValues","onConfirm","onCancel","args","deep","text"],"mappings":"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","sourcesContent":["import { createVNode as _createVNode, mergeProps as _mergeProps } from \"vue\";\nimport { ref, watch, computed, reactive, nextTick, onMounted, defineComponent } from \"vue\";\nimport { deepClone } from \"../utils/deep-clone\";\nimport { pick, extend, makeArrayProp, makeNumericProp, createNamespace } from \"../utils\";\nimport { pickerSharedProps } from \"../picker/Picker\";\nimport { useExpose } from \"../composables/use-expose\";\nimport { Picker } from \"../picker\";\nconst [name, bem] = createNamespace(\"area\");\nconst EMPTY_CODE = \"000000\";\nconst INHERIT_SLOTS = [\"title\", \"cancel\", \"confirm\", \"toolbar\", \"columns-top\", \"columns-bottom\"];\nconst INHERIT_PROPS = [\"title\", \"loading\", \"readonly\", \"itemHeight\", \"swipeDuration\", \"visibleItemCount\", \"cancelButtonText\", \"confirmButtonText\"];\nconst isOverseaCode = (code) => code[0] === \"9\";\nconst areaProps = extend({}, pickerSharedProps, {\n  value: String,\n  columnsNum: makeNumericProp(3),\n  columnsPlaceholder: makeArrayProp(),\n  areaList: {\n    type: Object,\n    default: () => ({})\n  },\n  isOverseaCode: {\n    type: Function,\n    default: isOverseaCode\n  }\n});\nvar stdin_default = defineComponent({\n  name,\n  props: areaProps,\n  emits: [\"change\", \"confirm\", \"cancel\"],\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const pickerRef = ref();\n    const state = reactive({\n      code: props.value,\n      columns: [{\n        values: []\n      }, {\n        values: []\n      }, {\n        values: []\n      }]\n    });\n    const areaList = computed(() => {\n      const {\n        areaList: areaList2\n      } = props;\n      return {\n        province: areaList2.province_list || {},\n        city: areaList2.city_list || {},\n        county: areaList2.county_list || {}\n      };\n    });\n    const placeholderMap = computed(() => {\n      const {\n        columnsPlaceholder\n      } = props;\n      return {\n        province: columnsPlaceholder[0] || \"\",\n        city: columnsPlaceholder[1] || \"\",\n        county: columnsPlaceholder[2] || \"\"\n      };\n    });\n    const getDefaultCode = () => {\n      if (props.columnsPlaceholder.length) {\n        return EMPTY_CODE;\n      }\n      const {\n        county,\n        city\n      } = areaList.value;\n      const countyCodes = Object.keys(county);\n      if (countyCodes[0]) {\n        return countyCodes[0];\n      }\n      const cityCodes = Object.keys(city);\n      if (cityCodes[0]) {\n        return cityCodes[0];\n      }\n      return \"\";\n    };\n    const getColumnValues = (type, code) => {\n      let column = [];\n      if (type !== \"province\" && !code) {\n        return column;\n      }\n      const list = areaList.value[type];\n      column = Object.keys(list).map((listCode) => ({\n        code: listCode,\n        name: list[listCode]\n      }));\n      if (code) {\n        if (type === \"city\" && props.isOverseaCode(code)) {\n          code = \"9\";\n        }\n        column = column.filter((item) => item.code.indexOf(code) === 0);\n      }\n      if (placeholderMap.value[type] && column.length) {\n        let codeFill = \"\";\n        if (type === \"city\") {\n          codeFill = EMPTY_CODE.slice(2, 4);\n        } else if (type === \"county\") {\n          codeFill = EMPTY_CODE.slice(4, 6);\n        }\n        column.unshift({\n          code: code + codeFill,\n          name: placeholderMap.value[type]\n        });\n      }\n      return column;\n    };\n    const getIndex = (type, code) => {\n      let compareNum = code.length;\n      if (type === \"province\") {\n        compareNum = props.isOverseaCode(code) ? 1 : 2;\n      }\n      if (type === \"city\") {\n        compareNum = 4;\n      }\n      code = code.slice(0, compareNum);\n      const list = getColumnValues(type, compareNum > 2 ? code.slice(0, compareNum - 2) : \"\");\n      for (let i = 0; i < list.length; i++) {\n        if (list[i].code.slice(0, compareNum) === code) {\n          return i;\n        }\n      }\n      return 0;\n    };\n    const setValues = () => {\n      const picker = pickerRef.value;\n      if (!picker) {\n        return;\n      }\n      let code = state.code || getDefaultCode();\n      const province = getColumnValues(\"province\");\n      const city = getColumnValues(\"city\", code.slice(0, 2));\n      picker.setColumnValues(0, province);\n      picker.setColumnValues(1, city);\n      if (city.length && code.slice(2, 4) === \"00\" && !props.isOverseaCode(code)) {\n        [{\n          code\n        }] = city;\n      }\n      picker.setColumnValues(2, getColumnValues(\"county\", code.slice(0, 4)));\n      picker.setIndexes([getIndex(\"province\", code), getIndex(\"city\", code), getIndex(\"county\", code)]);\n    };\n    const parseValues = (values) => values.map((value, index) => {\n      if (value) {\n        value = deepClone(value);\n        if (!value.code || value.name === props.columnsPlaceholder[index]) {\n          value.code = \"\";\n          value.name = \"\";\n        }\n      }\n      return value;\n    });\n    const getValues = () => {\n      if (pickerRef.value) {\n        const values = pickerRef.value.getValues().filter(Boolean);\n        return parseValues(values);\n      }\n      return [];\n    };\n    const getArea = () => {\n      const values = getValues();\n      const area = {\n        code: \"\",\n        country: \"\",\n        province: \"\",\n        city: \"\",\n        county: \"\"\n      };\n      if (!values.length) {\n        return area;\n      }\n      const names = values.map((item) => item.name);\n      const validValues = values.filter((value) => value.code);\n      area.code = validValues.length ? validValues[validValues.length - 1].code : \"\";\n      if (props.isOverseaCode(area.code)) {\n        area.country = names[1] || \"\";\n        area.province = names[2] || \"\";\n      } else {\n        area.province = names[0] || \"\";\n        area.city = names[1] || \"\";\n        area.county = names[2] || \"\";\n      }\n      return area;\n    };\n    const reset = (newCode = \"\") => {\n      state.code = newCode;\n      setValues();\n    };\n    const onChange = (values, index) => {\n      state.code = values[index].code;\n      setValues();\n      if (pickerRef.value) {\n        const parsedValues = parseValues(pickerRef.value.getValues());\n        emit(\"change\", parsedValues, index);\n      }\n    };\n    const onConfirm = (values, index) => {\n      setValues();\n      emit(\"confirm\", parseValues(values), index);\n    };\n    const onCancel = (...args) => emit(\"cancel\", ...args);\n    onMounted(setValues);\n    watch(() => props.value, (value) => {\n      state.code = value;\n      setValues();\n    });\n    watch(() => props.areaList, setValues, {\n      deep: true\n    });\n    watch(() => props.columnsNum, () => {\n      nextTick(setValues);\n    });\n    useExpose({\n      reset,\n      getArea,\n      getValues\n    });\n    return () => {\n      const columns = state.columns.slice(0, +props.columnsNum);\n      return _createVNode(Picker, _mergeProps({\n        \"ref\": pickerRef,\n        \"class\": bem(),\n        \"columns\": columns,\n        \"columnsFieldNames\": {\n          text: \"name\"\n        },\n        \"onChange\": onChange,\n        \"onCancel\": onCancel,\n        \"onConfirm\": onConfirm\n      }, pick(props, INHERIT_PROPS)), pick(slots, INHERIT_SLOTS));\n    };\n  }\n});\nexport {\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}