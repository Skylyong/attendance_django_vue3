{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\nimport { inject, computed, defineComponent } from \"vue\";\nimport { addUnit, numericProp, makeStringProp, createNamespace } from \"../utils\";\nimport { Badge } from \"../badge\";\nimport { CONFIG_PROVIDER_KEY } from \"../config-provider/ConfigProvider\";\nconst [name, bem] = createNamespace(\"icon\");\n\nconst isImage = name2 => name2 == null ? void 0 : name2.includes(\"/\");\n\nconst iconProps = {\n  dot: Boolean,\n  tag: makeStringProp(\"i\"),\n  name: String,\n  size: numericProp,\n  badge: numericProp,\n  color: String,\n  badgeProps: Object,\n  classPrefix: String\n};\nvar stdin_default = defineComponent({\n  name,\n  props: iconProps,\n\n  setup(props, {\n    slots\n  }) {\n    const config = inject(CONFIG_PROVIDER_KEY, null);\n    const classPrefix = computed(() => props.classPrefix || (config == null ? void 0 : config.iconPrefix) || bem());\n    return () => {\n      const {\n        tag,\n        dot,\n        name: name2,\n        size,\n        badge,\n        color\n      } = props;\n      const isImageIcon = isImage(name2);\n      return _createVNode(Badge, _mergeProps({\n        \"dot\": dot,\n        \"tag\": tag,\n        \"class\": [classPrefix.value, isImageIcon ? \"\" : `${classPrefix.value}-${name2}`],\n        \"style\": {\n          color,\n          fontSize: addUnit(size)\n        },\n        \"content\": badge\n      }, props.badgeProps), {\n        default: () => {\n          var _a;\n\n          return [(_a = slots.default) == null ? void 0 : _a.call(slots), isImageIcon && _createVNode(\"img\", {\n            \"class\": bem(\"image\"),\n            \"src\": name2\n          }, null)];\n        }\n      });\n    };\n  }\n\n});\nexport { stdin_default as default };","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/vant/es/icon/Icon.js"],"names":["mergeProps","_mergeProps","createVNode","_createVNode","inject","computed","defineComponent","addUnit","numericProp","makeStringProp","createNamespace","Badge","CONFIG_PROVIDER_KEY","name","bem","isImage","name2","includes","iconProps","dot","Boolean","tag","String","size","badge","color","badgeProps","Object","classPrefix","stdin_default","props","setup","slots","config","iconPrefix","isImageIcon","value","fontSize","default","_a","call"],"mappings":"AAAA,SAASA,UAAU,IAAIC,WAAvB,EAAoCC,WAAW,IAAIC,YAAnD,QAAuE,KAAvE;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,eAA3B,QAAkD,KAAlD;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,cAA/B,EAA+CC,eAA/C,QAAsE,UAAtE;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,MAAM,CAACC,IAAD,EAAOC,GAAP,IAAcJ,eAAe,CAAC,MAAD,CAAnC;;AACA,MAAMK,OAAO,GAAIC,KAAD,IAAWA,KAAK,IAAI,IAAT,GAAgB,KAAK,CAArB,GAAyBA,KAAK,CAACC,QAAN,CAAe,GAAf,CAApD;;AACA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,GAAG,EAAEC,OADW;AAEhBC,EAAAA,GAAG,EAAEZ,cAAc,CAAC,GAAD,CAFH;AAGhBI,EAAAA,IAAI,EAAES,MAHU;AAIhBC,EAAAA,IAAI,EAAEf,WAJU;AAKhBgB,EAAAA,KAAK,EAAEhB,WALS;AAMhBiB,EAAAA,KAAK,EAAEH,MANS;AAOhBI,EAAAA,UAAU,EAAEC,MAPI;AAQhBC,EAAAA,WAAW,EAAEN;AARG,CAAlB;AAUA,IAAIO,aAAa,GAAGvB,eAAe,CAAC;AAClCO,EAAAA,IADkC;AAElCiB,EAAAA,KAAK,EAAEZ,SAF2B;;AAGlCa,EAAAA,KAAK,CAACD,KAAD,EAAQ;AACXE,IAAAA;AADW,GAAR,EAEF;AACD,UAAMC,MAAM,GAAG7B,MAAM,CAACQ,mBAAD,EAAsB,IAAtB,CAArB;AACA,UAAMgB,WAAW,GAAGvB,QAAQ,CAAC,MAAMyB,KAAK,CAACF,WAAN,KAAsBK,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACC,UAAvD,KAAsEpB,GAAG,EAAhF,CAA5B;AACA,WAAO,MAAM;AACX,YAAM;AACJO,QAAAA,GADI;AAEJF,QAAAA,GAFI;AAGJN,QAAAA,IAAI,EAAEG,KAHF;AAIJO,QAAAA,IAJI;AAKJC,QAAAA,KALI;AAMJC,QAAAA;AANI,UAOFK,KAPJ;AAQA,YAAMK,WAAW,GAAGpB,OAAO,CAACC,KAAD,CAA3B;AACA,aAAOb,YAAY,CAACQ,KAAD,EAAQV,WAAW,CAAC;AACrC,eAAOkB,GAD8B;AAErC,eAAOE,GAF8B;AAGrC,iBAAS,CAACO,WAAW,CAACQ,KAAb,EAAoBD,WAAW,GAAG,EAAH,GAAS,GAAEP,WAAW,CAACQ,KAAM,IAAGpB,KAAM,EAArE,CAH4B;AAIrC,iBAAS;AACPS,UAAAA,KADO;AAEPY,UAAAA,QAAQ,EAAE9B,OAAO,CAACgB,IAAD;AAFV,SAJ4B;AAQrC,mBAAWC;AAR0B,OAAD,EASnCM,KAAK,CAACJ,UAT6B,CAAnB,EASG;AACpBY,QAAAA,OAAO,EAAE,MAAM;AACb,cAAIC,EAAJ;;AACA,iBAAO,CAAC,CAACA,EAAE,GAAGP,KAAK,CAACM,OAAZ,KAAwB,IAAxB,GAA+B,KAAK,CAApC,GAAwCC,EAAE,CAACC,IAAH,CAAQR,KAAR,CAAzC,EAAyDG,WAAW,IAAIhC,YAAY,CAAC,KAAD,EAAQ;AACjG,qBAASW,GAAG,CAAC,OAAD,CADqF;AAEjG,mBAAOE;AAF0F,WAAR,EAGxF,IAHwF,CAApF,CAAP;AAID;AAPmB,OATH,CAAnB;AAkBD,KA5BD;AA6BD;;AArCiC,CAAD,CAAnC;AAuCA,SACEa,aAAa,IAAIS,OADnB","sourcesContent":["import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\nimport { inject, computed, defineComponent } from \"vue\";\nimport { addUnit, numericProp, makeStringProp, createNamespace } from \"../utils\";\nimport { Badge } from \"../badge\";\nimport { CONFIG_PROVIDER_KEY } from \"../config-provider/ConfigProvider\";\nconst [name, bem] = createNamespace(\"icon\");\nconst isImage = (name2) => name2 == null ? void 0 : name2.includes(\"/\");\nconst iconProps = {\n  dot: Boolean,\n  tag: makeStringProp(\"i\"),\n  name: String,\n  size: numericProp,\n  badge: numericProp,\n  color: String,\n  badgeProps: Object,\n  classPrefix: String\n};\nvar stdin_default = defineComponent({\n  name,\n  props: iconProps,\n  setup(props, {\n    slots\n  }) {\n    const config = inject(CONFIG_PROVIDER_KEY, null);\n    const classPrefix = computed(() => props.classPrefix || (config == null ? void 0 : config.iconPrefix) || bem());\n    return () => {\n      const {\n        tag,\n        dot,\n        name: name2,\n        size,\n        badge,\n        color\n      } = props;\n      const isImageIcon = isImage(name2);\n      return _createVNode(Badge, _mergeProps({\n        \"dot\": dot,\n        \"tag\": tag,\n        \"class\": [classPrefix.value, isImageIcon ? \"\" : `${classPrefix.value}-${name2}`],\n        \"style\": {\n          color,\n          fontSize: addUnit(size)\n        },\n        \"content\": badge\n      }, props.badgeProps), {\n        default: () => {\n          var _a;\n          return [(_a = slots.default) == null ? void 0 : _a.call(slots), isImageIcon && _createVNode(\"img\", {\n            \"class\": bem(\"image\"),\n            \"src\": name2\n          }, null)];\n        }\n      });\n    };\n  }\n});\nexport {\n  stdin_default as default\n};\n"]},"metadata":{},"sourceType":"module"}