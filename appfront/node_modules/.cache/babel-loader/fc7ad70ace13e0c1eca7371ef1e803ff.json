{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { defineComponent, getCurrentInstance, onMounted, onUnmounted, onUpdated, reactive, watch } from 'vue';\nimport { findDOMNode } from '../_util/props-util';\nexport default defineComponent({\n  name: 'ResizeObserver',\n  props: {\n    disabled: Boolean,\n    onResize: Function\n  },\n  emits: ['resize'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var state = reactive({\n      width: 0,\n      height: 0,\n      offsetHeight: 0,\n      offsetWidth: 0\n    });\n    var currentElement = null;\n    var resizeObserver = null;\n\n    var destroyObserver = function destroyObserver() {\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n        resizeObserver = null;\n      }\n    };\n\n    var onResize = function onResize(entries) {\n      var onResize = props.onResize;\n      var target = entries[0].target;\n\n      var _target$getBoundingCl = target.getBoundingClientRect(),\n          width = _target$getBoundingCl.width,\n          height = _target$getBoundingCl.height;\n\n      var offsetWidth = target.offsetWidth,\n          offsetHeight = target.offsetHeight;\n      /**\n       * Resize observer trigger when content size changed.\n       * In most case we just care about element size,\n       * let's use `boundary` instead of `contentRect` here to avoid shaking.\n       */\n\n      var fixedWidth = Math.floor(width);\n      var fixedHeight = Math.floor(height);\n\n      if (state.width !== fixedWidth || state.height !== fixedHeight || state.offsetWidth !== offsetWidth || state.offsetHeight !== offsetHeight) {\n        var size = {\n          width: fixedWidth,\n          height: fixedHeight,\n          offsetWidth: offsetWidth,\n          offsetHeight: offsetHeight\n        };\n\n        _extends(state, size);\n\n        if (onResize) {\n          // defer the callback but not defer to next frame\n          Promise.resolve().then(function () {\n            onResize(_extends(_extends({}, size), {\n              offsetWidth: offsetWidth,\n              offsetHeight: offsetHeight\n            }), target);\n          });\n        }\n      }\n    };\n\n    var instance = getCurrentInstance();\n\n    var registerObserver = function registerObserver() {\n      var disabled = props.disabled; // Unregister if disabled\n\n      if (disabled) {\n        destroyObserver();\n        return;\n      } // Unregister if element changed\n\n\n      var element = findDOMNode(instance);\n      var elementChanged = element !== currentElement;\n\n      if (elementChanged) {\n        destroyObserver();\n        currentElement = element;\n      }\n\n      if (!resizeObserver && element) {\n        resizeObserver = new ResizeObserver(onResize);\n        resizeObserver.observe(element);\n      }\n    };\n\n    onMounted(function () {\n      registerObserver();\n    });\n    onUpdated(function () {\n      registerObserver();\n    });\n    onUnmounted(function () {\n      destroyObserver();\n    });\n    watch(function () {\n      return props.disabled;\n    }, function () {\n      registerObserver();\n    }, {\n      flush: 'post'\n    });\n    return function () {\n      var _a;\n\n      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)[0];\n    };\n  }\n});","map":{"version":3,"sources":["/Users/lyong/Desktop/myproj/appfront/node_modules/ant-design-vue/es/vc-resize-observer/index.js"],"names":["_extends","ResizeObserver","defineComponent","getCurrentInstance","onMounted","onUnmounted","onUpdated","reactive","watch","findDOMNode","name","props","disabled","Boolean","onResize","Function","emits","setup","_ref","slots","state","width","height","offsetHeight","offsetWidth","currentElement","resizeObserver","destroyObserver","disconnect","entries","target","_target$getBoundingCl","getBoundingClientRect","fixedWidth","Math","floor","fixedHeight","size","Promise","resolve","then","instance","registerObserver","element","elementChanged","observe","flush","_a","default","call"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { defineComponent, getCurrentInstance, onMounted, onUnmounted, onUpdated, reactive, watch } from 'vue';\nimport { findDOMNode } from '../_util/props-util';\nexport default defineComponent({\n  name: 'ResizeObserver',\n  props: {\n    disabled: Boolean,\n    onResize: Function\n  },\n  emits: ['resize'],\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var state = reactive({\n      width: 0,\n      height: 0,\n      offsetHeight: 0,\n      offsetWidth: 0\n    });\n    var currentElement = null;\n    var resizeObserver = null;\n\n    var destroyObserver = function destroyObserver() {\n      if (resizeObserver) {\n        resizeObserver.disconnect();\n        resizeObserver = null;\n      }\n    };\n\n    var onResize = function onResize(entries) {\n      var onResize = props.onResize;\n      var target = entries[0].target;\n\n      var _target$getBoundingCl = target.getBoundingClientRect(),\n          width = _target$getBoundingCl.width,\n          height = _target$getBoundingCl.height;\n\n      var offsetWidth = target.offsetWidth,\n          offsetHeight = target.offsetHeight;\n      /**\n       * Resize observer trigger when content size changed.\n       * In most case we just care about element size,\n       * let's use `boundary` instead of `contentRect` here to avoid shaking.\n       */\n\n      var fixedWidth = Math.floor(width);\n      var fixedHeight = Math.floor(height);\n\n      if (state.width !== fixedWidth || state.height !== fixedHeight || state.offsetWidth !== offsetWidth || state.offsetHeight !== offsetHeight) {\n        var size = {\n          width: fixedWidth,\n          height: fixedHeight,\n          offsetWidth: offsetWidth,\n          offsetHeight: offsetHeight\n        };\n\n        _extends(state, size);\n\n        if (onResize) {\n          // defer the callback but not defer to next frame\n          Promise.resolve().then(function () {\n            onResize(_extends(_extends({}, size), {\n              offsetWidth: offsetWidth,\n              offsetHeight: offsetHeight\n            }), target);\n          });\n        }\n      }\n    };\n\n    var instance = getCurrentInstance();\n\n    var registerObserver = function registerObserver() {\n      var disabled = props.disabled; // Unregister if disabled\n\n      if (disabled) {\n        destroyObserver();\n        return;\n      } // Unregister if element changed\n\n\n      var element = findDOMNode(instance);\n      var elementChanged = element !== currentElement;\n\n      if (elementChanged) {\n        destroyObserver();\n        currentElement = element;\n      }\n\n      if (!resizeObserver && element) {\n        resizeObserver = new ResizeObserver(onResize);\n        resizeObserver.observe(element);\n      }\n    };\n\n    onMounted(function () {\n      registerObserver();\n    });\n    onUpdated(function () {\n      registerObserver();\n    });\n    onUnmounted(function () {\n      destroyObserver();\n    });\n    watch(function () {\n      return props.disabled;\n    }, function () {\n      registerObserver();\n    }, {\n      flush: 'post'\n    });\n    return function () {\n      var _a;\n\n      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots)[0];\n    };\n  }\n});"]},"metadata":{},"sourceType":"module"}